Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
	by mail.lfdr.de (Postfix) with ESMTPS id 253AF228AA5
	for <lists.virtualization@lfdr.de>; Tue, 21 Jul 2020 23:16:26 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by fraxinus.osuosl.org (Postfix) with ESMTP id 7115186BE5;
	Tue, 21 Jul 2020 21:16:24 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id atDRZMorUr53; Tue, 21 Jul 2020 21:16:20 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by fraxinus.osuosl.org (Postfix) with ESMTP id C7F1B86C15;
	Tue, 21 Jul 2020 21:16:04 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id B41A6C088E;
	Tue, 21 Jul 2020 21:16:04 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 3D442C016F
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:16:00 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by silver.osuosl.org (Postfix) with ESMTP id 1A967227A0
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:16:00 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id dfCTSbJR+22G
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:15:55 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by silver.osuosl.org (Postfix) with ESMTPS id D8E1B2274B
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:15:54 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp02.buh.bitdefender.net [10.17.80.76])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 0459F3031FC2; Wed, 22 Jul 2020 00:09:24 +0300 (EEST)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id D63B7304FA12;
 Wed, 22 Jul 2020 00:09:23 +0300 (EEST)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v9 34/84] KVM: x86: page_track: add support for preread,
 prewrite and preexec
Date: Wed, 22 Jul 2020 00:08:32 +0300
Message-Id: <20200721210922.7646-35-alazar@bitdefender.com>
In-Reply-To: <20200721210922.7646-1-alazar@bitdefender.com>
References: <20200721210922.7646-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 =?UTF-8?q?Mihai=20Don=C8=9Bu?= <mdontu@bitdefender.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

RnJvbTogTWloYWkgRG9uyJt1IDxtZG9udHVAYml0ZGVmZW5kZXIuY29tPgoKVGhlIGFjY2VzcyB0
byBhIHRyYWNrZWQgbWVtb3J5IHBhZ2UgbGVhZHMgdG8gdHdvIHR5cGVzIG9mIGFjdGlvbnMgZnJv
bSB0aGUKaW50cm9zcGVjdGlvbiB0b29sOiBlaXRoZXIgdGhlIGFjY2VzcyBpcyBhbGxvd2VkICht
YXliZSB3aXRoIGRpZmZlcmVudApkYXRhIGZvciB0aGUgc291cmNlIG9wZXJhbmQpIG9yIHRoZSB2
Q1BVIHNob3VsZCByZS1lbnRlciBpbiBndWVzdAoodGhlIHBhZ2UgaXMgbm90IHRyYWNrZWQgYW55
bW9yZSwgdGhlIGluc3RydWN0aW9uIHdhcyBza2lwcGVkL2VtdWxhdGVkIGJ5CnRoZSBpbnRyb3Nw
ZWN0aW9uIHRvb2wsIGV0Yy4pLiBUaGVzZSBuZXcgY2FsbGJhY2tzIG11c3QgcmV0dXJuICd0cnVl
Jwpmb3IgdGhlIGZpcnN0IGNhc2UgYW5kICdmYWxzZScgZm9yIHRoZSBzZWNvbmQuCgpTaWduZWQt
b2ZmLWJ5OiBNaWhhaSBEb27Im3UgPG1kb250dUBiaXRkZWZlbmRlci5jb20+ClNpZ25lZC1vZmYt
Ynk6IEFkYWxiZXJ0IExhesSDciA8YWxhemFyQGJpdGRlZmVuZGVyLmNvbT4KLS0tCiBhcmNoL3g4
Ni9pbmNsdWRlL2FzbS9rdm1fcGFnZV90cmFjay5oIHwgIDQ4ICsrKysrKysrKystCiBhcmNoL3g4
Ni9rdm0vbW11LmggICAgICAgICAgICAgICAgICAgIHwgICA0ICsKIGFyY2gveDg2L2t2bS9tbXUv
bW11LmMgICAgICAgICAgICAgICAgfCAgODEgKysrKysrKysrKysrKysrKysKIGFyY2gveDg2L2t2
bS9tbXUvcGFnZV90cmFjay5jICAgICAgICAgfCAxMjAgKysrKysrKysrKysrKysrKysrKysrKysr
LS0KIDQgZmlsZXMgY2hhbmdlZCwgMjQzIGluc2VydGlvbnMoKyksIDEwIGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bV9wYWdlX3RyYWNrLmggYi9hcmNo
L3g4Ni9pbmNsdWRlL2FzbS9rdm1fcGFnZV90cmFjay5oCmluZGV4IDAwYTY2YzRkNGQzYy4uYzEw
ZjBmNjVjNzdhIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9rdm1fcGFnZV90cmFj
ay5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bV9wYWdlX3RyYWNrLmgKQEAgLTMsNyAr
MywxMCBAQAogI2RlZmluZSBfQVNNX1g4Nl9LVk1fUEFHRV9UUkFDS19ICiAKIGVudW0ga3ZtX3Bh
Z2VfdHJhY2tfbW9kZSB7CisJS1ZNX1BBR0VfVFJBQ0tfUFJFUkVBRCwKKwlLVk1fUEFHRV9UUkFD
S19QUkVXUklURSwKIAlLVk1fUEFHRV9UUkFDS19XUklURSwKKwlLVk1fUEFHRV9UUkFDS19QUkVF
WEVDLAogCUtWTV9QQUdFX1RSQUNLX01BWCwKIH07CiAKQEAgLTIyLDYgKzI1LDMzIEBAIHN0cnVj
dCBrdm1fcGFnZV90cmFja19ub3RpZmllcl9oZWFkIHsKIHN0cnVjdCBrdm1fcGFnZV90cmFja19u
b3RpZmllcl9ub2RlIHsKIAlzdHJ1Y3QgaGxpc3Rfbm9kZSBub2RlOwogCisJLyoKKwkgKiBJdCBp
cyBjYWxsZWQgd2hlbiBndWVzdCBpcyByZWFkaW5nIHRoZSByZWFkLXRyYWNrZWQgcGFnZQorCSAq
IGFuZCB0aGUgcmVhZCBlbXVsYXRpb24gaXMgYWJvdXQgdG8gaGFwcGVuLgorCSAqCisJICogQHZj
cHU6IHRoZSB2Y3B1IHdoZXJlIHRoZSByZWFkIGFjY2VzcyBoYXBwZW5lZC4KKwkgKiBAZ3BhOiB0
aGUgcGh5c2ljYWwgYWRkcmVzcyByZWFkIGJ5IGd1ZXN0LgorCSAqIEBndmE6IHRoZSB2aXJ0dWFs
IGFkZHJlc3MgcmVhZCBieSBndWVzdC4KKwkgKiBAYnl0ZXM6IHRoZSByZWFkIGxlbmd0aC4KKwkg
KiBAbm9kZTogdGhpcyBub2RlLgorCSAqLworCWJvb2wgKCp0cmFja19wcmVyZWFkKShzdHJ1Y3Qg
a3ZtX3ZjcHUgKnZjcHUsIGdwYV90IGdwYSwgZ3ZhX3QgZ3ZhLAorCQkJICAgICAgaW50IGJ5dGVz
LAorCQkJICAgICAgc3RydWN0IGt2bV9wYWdlX3RyYWNrX25vdGlmaWVyX25vZGUgKm5vZGUpOwor
CS8qCisJICogSXQgaXMgY2FsbGVkIHdoZW4gZ3Vlc3QgaXMgd3JpdGluZyB0aGUgd3JpdGUtdHJh
Y2tlZCBwYWdlCisJICogYW5kIHRoZSB3cml0ZSBlbXVsYXRpb24gZGlkbid0IGhhcHBlbmVkIHll
dC4KKwkgKgorCSAqIEB2Y3B1OiB0aGUgdmNwdSB3aGVyZSB0aGUgd3JpdGUgYWNjZXNzIGhhcHBl
bmVkLgorCSAqIEBncGE6IHRoZSBwaHlzaWNhbCBhZGRyZXNzIHdyaXR0ZW4gYnkgZ3Vlc3QuCisJ
ICogQGd2YTogdGhlIHZpcnR1YWwgYWRkcmVzcyB3cml0dGVuIGJ5IGd1ZXN0LgorCSAqIEBuZXc6
IHRoZSBkYXRhIHdhcyB3cml0dGVuIHRvIHRoZSBhZGRyZXNzLgorCSAqIEBieXRlczogdGhlIHdy
aXR0ZW4gbGVuZ3RoLgorCSAqIEBub2RlOiB0aGlzIG5vZGUKKwkgKi8KKwlib29sICgqdHJhY2tf
cHJld3JpdGUpKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ3BhX3QgZ3BhLCBndmFfdCBndmEsCisJ
CQkgICAgICAgY29uc3QgdTggKm5ldywgaW50IGJ5dGVzLAorCQkJICAgICAgIHN0cnVjdCBrdm1f
cGFnZV90cmFja19ub3RpZmllcl9ub2RlICpub2RlKTsKIAkvKgogCSAqIEl0IGlzIGNhbGxlZCB3
aGVuIGd1ZXN0IGlzIHdyaXRpbmcgdGhlIHdyaXRlLXRyYWNrZWQgcGFnZQogCSAqIGFuZCB3cml0
ZSBlbXVsYXRpb24gaXMgZmluaXNoZWQgYXQgdGhhdCB0aW1lLgpAQCAtMzYsNiArNjYsMTcgQEAg
c3RydWN0IGt2bV9wYWdlX3RyYWNrX25vdGlmaWVyX25vZGUgewogCXZvaWQgKCp0cmFja193cml0
ZSkoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBncGFfdCBncGEsIGd2YV90IGd2YSwKIAkJCSAgICBj
b25zdCB1OCAqbmV3LCBpbnQgYnl0ZXMsCiAJCQkgICAgc3RydWN0IGt2bV9wYWdlX3RyYWNrX25v
dGlmaWVyX25vZGUgKm5vZGUpOworCS8qCisJICogSXQgaXMgY2FsbGVkIHdoZW4gZ3Vlc3QgaXMg
ZmV0Y2hpbmcgZnJvbSBhIGV4ZWMtdHJhY2tlZCBwYWdlCisJICogYW5kIHRoZSBmZXRjaCBlbXVs
YXRpb24gaXMgYWJvdXQgdG8gaGFwcGVuLgorCSAqCisJICogQHZjcHU6IHRoZSB2Y3B1IHdoZXJl
IHRoZSBmZXRjaCBhY2Nlc3MgaGFwcGVuZWQuCisJICogQGdwYTogdGhlIHBoeXNpY2FsIGFkZHJl
c3MgZmV0Y2hlZCBieSBndWVzdC4KKwkgKiBAZ3ZhOiB0aGUgdmlydHVhbCBhZGRyZXNzIGZldGNo
ZWQgYnkgZ3Vlc3QuCisJICogQG5vZGU6IHRoaXMgbm9kZS4KKwkgKi8KKwlib29sICgqdHJhY2tf
cHJlZXhlYykoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBncGFfdCBncGEsIGd2YV90IGd2YSwKKwkJ
CSAgICAgIHN0cnVjdCBrdm1fcGFnZV90cmFja19ub3RpZmllcl9ub2RlICpub2RlKTsKIAkvKgog
CSAqIEl0IGlzIGNhbGxlZCB3aGVuIG1lbW9yeSBzbG90IGlzIGJlaW5nIGNyZWF0ZWQKIAkgKgpA
QCAtNDksNyArOTAsNyBAQCBzdHJ1Y3Qga3ZtX3BhZ2VfdHJhY2tfbm90aWZpZXJfbm9kZSB7CiAJ
CQkJICBzdHJ1Y3Qga3ZtX3BhZ2VfdHJhY2tfbm90aWZpZXJfbm9kZSAqbm9kZSk7CiAJLyoKIAkg
KiBJdCBpcyBjYWxsZWQgd2hlbiBtZW1vcnkgc2xvdCBpcyBiZWluZyBtb3ZlZCBvciByZW1vdmVk
Ci0JICogdXNlcnMgY2FuIGRyb3Agd3JpdGUtcHJvdGVjdGlvbiBmb3IgdGhlIHBhZ2VzIGluIHRo
YXQgbWVtb3J5IHNsb3QKKwkgKiB1c2VycyBjYW4gZHJvcCBhY3RpdmUgcHJvdGVjdGlvbiBmb3Ig
dGhlIHBhZ2VzIGluIHRoYXQgbWVtb3J5IHNsb3QKIAkgKgogCSAqIEBrdm06IHRoZSBrdm0gd2hl
cmUgbWVtb3J5IHNsb3QgYmVpbmcgbW92ZWQgb3IgcmVtb3ZlZAogCSAqIEBzbG90OiB0aGUgbWVt
b3J5IHNsb3QgYmVpbmcgbW92ZWQgb3IgcmVtb3ZlZApAQCAtODEsNyArMTIyLDEyIEBAIGt2bV9w
YWdlX3RyYWNrX3JlZ2lzdGVyX25vdGlmaWVyKHN0cnVjdCBrdm0gKmt2bSwKIHZvaWQKIGt2bV9w
YWdlX3RyYWNrX3VucmVnaXN0ZXJfbm90aWZpZXIoc3RydWN0IGt2bSAqa3ZtLAogCQkJCSAgIHN0
cnVjdCBrdm1fcGFnZV90cmFja19ub3RpZmllcl9ub2RlICpuKTsKK2Jvb2wga3ZtX3BhZ2VfdHJh
Y2tfcHJlcmVhZChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGdwYV90IGdwYSwgZ3ZhX3QgZ3ZhLAor
CQkJICAgIGludCBieXRlcyk7Citib29sIGt2bV9wYWdlX3RyYWNrX3ByZXdyaXRlKHN0cnVjdCBr
dm1fdmNwdSAqdmNwdSwgZ3BhX3QgZ3BhLCBndmFfdCBndmEsCisJCQkgICAgIGNvbnN0IHU4ICpu
ZXcsIGludCBieXRlcyk7CiB2b2lkIGt2bV9wYWdlX3RyYWNrX3dyaXRlKHN0cnVjdCBrdm1fdmNw
dSAqdmNwdSwgZ3BhX3QgZ3BhLCBndmFfdCBndmEsCiAJCQkgIGNvbnN0IHU4ICpuZXcsIGludCBi
eXRlcyk7Citib29sIGt2bV9wYWdlX3RyYWNrX3ByZWV4ZWMoc3RydWN0IGt2bV92Y3B1ICp2Y3B1
LCBncGFfdCBncGEsIGd2YV90IGd2YSk7CiB2b2lkIGt2bV9wYWdlX3RyYWNrX2ZsdXNoX3Nsb3Qo
c3RydWN0IGt2bSAqa3ZtLCBzdHJ1Y3Qga3ZtX21lbW9yeV9zbG90ICpzbG90KTsKICNlbmRpZgpk
aWZmIC0tZ2l0IGEvYXJjaC94ODYva3ZtL21tdS5oIGIvYXJjaC94ODYva3ZtL21tdS5oCmluZGV4
IDQ0NGJiOWM1NDU0OC4uZTJjMDUxOGFmNzUwIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0vbW11
LmgKKysrIGIvYXJjaC94ODYva3ZtL21tdS5oCkBAIC0yMjIsNiArMjIyLDEwIEBAIHZvaWQga3Zt
X21tdV9nZm5fZGlzYWxsb3dfbHBhZ2Uoc3RydWN0IGt2bV9tZW1vcnlfc2xvdCAqc2xvdCwgZ2Zu
X3QgZ2ZuKTsKIHZvaWQga3ZtX21tdV9nZm5fYWxsb3dfbHBhZ2Uoc3RydWN0IGt2bV9tZW1vcnlf
c2xvdCAqc2xvdCwgZ2ZuX3QgZ2ZuKTsKIGJvb2wga3ZtX21tdV9zbG90X2dmbl93cml0ZV9wcm90
ZWN0KHN0cnVjdCBrdm0gKmt2bSwKIAkJCQkgICAgc3RydWN0IGt2bV9tZW1vcnlfc2xvdCAqc2xv
dCwgdTY0IGdmbik7Citib29sIGt2bV9tbXVfc2xvdF9nZm5fcmVhZF9wcm90ZWN0KHN0cnVjdCBr
dm0gKmt2bSwKKwkJCQkgICBzdHJ1Y3Qga3ZtX21lbW9yeV9zbG90ICpzbG90LCB1NjQgZ2ZuKTsK
K2Jvb2wga3ZtX21tdV9zbG90X2dmbl9leGVjX3Byb3RlY3Qoc3RydWN0IGt2bSAqa3ZtLAorCQkJ
CSAgIHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QsIHU2NCBnZm4pOwogaW50IGt2bV9hcmNo
X3dyaXRlX2xvZ19kaXJ0eShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGdwYV90IGwyX2dwYSk7CiAK
IGludCBrdm1fbW11X3Bvc3RfaW5pdF92bShzdHJ1Y3Qga3ZtICprdm0pOwpkaWZmIC0tZ2l0IGEv
YXJjaC94ODYva3ZtL21tdS9tbXUuYyBiL2FyY2gveDg2L2t2bS9tbXUvbW11LmMKaW5kZXggMDM4
YTBlMDI4ZTc3Li5lZGU4ZWY2ZDFlMzQgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2t2bS9tbXUvbW11
LmMKKysrIGIvYXJjaC94ODYva3ZtL21tdS9tbXUuYwpAQCAtMTU3OSw2ICsxNTc5LDMxIEBAIHN0
YXRpYyBib29sIHNwdGVfd3JpdGVfcHJvdGVjdCh1NjQgKnNwdGVwLCBib29sIHB0X3Byb3RlY3Qp
CiAJcmV0dXJuIG1tdV9zcHRlX3VwZGF0ZShzcHRlcCwgc3B0ZSk7CiB9CiAKK3N0YXRpYyBib29s
IHNwdGVfcmVhZF9wcm90ZWN0KHU2NCAqc3B0ZXApCit7CisJdTY0IHNwdGUgPSAqc3B0ZXA7CisJ
Ym9vbCBleGVjX29ubHlfc3VwcG9ydGVkID0gKHNoYWRvd19wcmVzZW50X21hc2sgPT0gMHVsbCk7
CisKKwlybWFwX3ByaW50aygicm1hcF9yZWFkX3Byb3RlY3Q6IHNwdGUgJXAgJWxseFxuIiwgc3B0
ZXAsICpzcHRlcCk7CisKKwlXQVJOX09OX09OQ0UoIWV4ZWNfb25seV9zdXBwb3J0ZWQpOworCisJ
c3B0ZSA9IHNwdGUgJiB+KFBUX1dSSVRBQkxFX01BU0sgfCBQVF9QUkVTRU5UX01BU0spOworCisJ
cmV0dXJuIG1tdV9zcHRlX3VwZGF0ZShzcHRlcCwgc3B0ZSk7Cit9CisKK3N0YXRpYyBib29sIHNw
dGVfZXhlY19wcm90ZWN0KHU2NCAqc3B0ZXApCit7CisJdTY0IHNwdGUgPSAqc3B0ZXA7CisKKwly
bWFwX3ByaW50aygicm1hcF9leGVjX3Byb3RlY3Q6IHNwdGUgJXAgJWxseFxuIiwgc3B0ZXAsICpz
cHRlcCk7CisKKwlzcHRlID0gc3B0ZSAmIH5QVF9VU0VSX01BU0s7CisKKwlyZXR1cm4gbW11X3Nw
dGVfdXBkYXRlKHNwdGVwLCBzcHRlKTsKK30KKwogc3RhdGljIGJvb2wgX19ybWFwX3dyaXRlX3By
b3RlY3Qoc3RydWN0IGt2bSAqa3ZtLAogCQkJCSBzdHJ1Y3Qga3ZtX3JtYXBfaGVhZCAqcm1hcF9o
ZWFkLAogCQkJCSBib29sIHB0X3Byb3RlY3QpCkBAIC0xNTkzLDYgKzE2MTgsMzIgQEAgc3RhdGlj
IGJvb2wgX19ybWFwX3dyaXRlX3Byb3RlY3Qoc3RydWN0IGt2bSAqa3ZtLAogCXJldHVybiBmbHVz
aDsKIH0KIAorc3RhdGljIGJvb2wgX19ybWFwX3JlYWRfcHJvdGVjdChzdHJ1Y3Qga3ZtICprdm0s
CisJCQkJc3RydWN0IGt2bV9ybWFwX2hlYWQgKnJtYXBfaGVhZCkKK3sKKwlzdHJ1Y3Qgcm1hcF9p
dGVyYXRvciBpdGVyOworCWJvb2wgZmx1c2ggPSBmYWxzZTsKKwl1NjQgKnNwdGVwOworCisJZm9y
X2VhY2hfcm1hcF9zcHRlKHJtYXBfaGVhZCwgJml0ZXIsIHNwdGVwKQorCQlmbHVzaCB8PSBzcHRl
X3JlYWRfcHJvdGVjdChzcHRlcCk7CisKKwlyZXR1cm4gZmx1c2g7Cit9CisKK3N0YXRpYyBib29s
IF9fcm1hcF9leGVjX3Byb3RlY3Qoc3RydWN0IGt2bSAqa3ZtLAorCQkJCXN0cnVjdCBrdm1fcm1h
cF9oZWFkICpybWFwX2hlYWQpCit7CisJc3RydWN0IHJtYXBfaXRlcmF0b3IgaXRlcjsKKwlib29s
IGZsdXNoID0gZmFsc2U7CisJdTY0ICpzcHRlcDsKKworCWZvcl9lYWNoX3JtYXBfc3B0ZShybWFw
X2hlYWQsICZpdGVyLCBzcHRlcCkKKwkJZmx1c2ggfD0gc3B0ZV9leGVjX3Byb3RlY3Qoc3B0ZXAp
OworCisJcmV0dXJuIGZsdXNoOworfQorCiBzdGF0aWMgYm9vbCBzcHRlX2NsZWFyX2RpcnR5KHU2
NCAqc3B0ZXApCiB7CiAJdTY0IHNwdGUgPSAqc3B0ZXA7CkBAIC0xNzY4LDYgKzE4MTksMzYgQEAg
Ym9vbCBrdm1fbW11X3Nsb3RfZ2ZuX3dyaXRlX3Byb3RlY3Qoc3RydWN0IGt2bSAqa3ZtLAogCXJl
dHVybiB3cml0ZV9wcm90ZWN0ZWQ7CiB9CiAKK2Jvb2wga3ZtX21tdV9zbG90X2dmbl9yZWFkX3By
b3RlY3Qoc3RydWN0IGt2bSAqa3ZtLAorCQkJCSAgIHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNs
b3QsIHU2NCBnZm4pCit7CisJc3RydWN0IGt2bV9ybWFwX2hlYWQgKnJtYXBfaGVhZDsKKwlib29s
IHJlYWRfcHJvdGVjdGVkID0gZmFsc2U7CisJaW50IGk7CisKKwlmb3IgKGkgPSBQR19MRVZFTF80
SzsgaSA8PSBLVk1fTUFYX0hVR0VQQUdFX0xFVkVMOyArK2kpIHsKKwkJcm1hcF9oZWFkID0gX19n
Zm5fdG9fcm1hcChnZm4sIGksIHNsb3QpOworCQlyZWFkX3Byb3RlY3RlZCB8PSBfX3JtYXBfcmVh
ZF9wcm90ZWN0KGt2bSwgcm1hcF9oZWFkKTsKKwl9CisKKwlyZXR1cm4gcmVhZF9wcm90ZWN0ZWQ7
Cit9CisKK2Jvb2wga3ZtX21tdV9zbG90X2dmbl9leGVjX3Byb3RlY3Qoc3RydWN0IGt2bSAqa3Zt
LAorCQkJCSAgIHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QsIHU2NCBnZm4pCit7CisJc3Ry
dWN0IGt2bV9ybWFwX2hlYWQgKnJtYXBfaGVhZDsKKwlib29sIGV4ZWNfcHJvdGVjdGVkID0gZmFs
c2U7CisJaW50IGk7CisKKwlmb3IgKGkgPSBQR19MRVZFTF80SzsgaSA8PSBLVk1fTUFYX0hVR0VQ
QUdFX0xFVkVMOyArK2kpIHsKKwkJcm1hcF9oZWFkID0gX19nZm5fdG9fcm1hcChnZm4sIGksIHNs
b3QpOworCQlleGVjX3Byb3RlY3RlZCB8PSBfX3JtYXBfZXhlY19wcm90ZWN0KGt2bSwgcm1hcF9o
ZWFkKTsKKwl9CisKKwlyZXR1cm4gZXhlY19wcm90ZWN0ZWQ7Cit9CisKIHN0YXRpYyBib29sIHJt
YXBfd3JpdGVfcHJvdGVjdChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHU2NCBnZm4pCiB7CiAJc3Ry
dWN0IGt2bV9tZW1vcnlfc2xvdCAqc2xvdDsKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2t2bS9tbXUv
cGFnZV90cmFjay5jIGIvYXJjaC94ODYva3ZtL21tdS9wYWdlX3RyYWNrLmMKaW5kZXggMDI3NTli
ODFhMDRjLi5iNTkzYmNmODBiZTAgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2t2bS9tbXUvcGFnZV90
cmFjay5jCisrKyBiL2FyY2gveDg2L2t2bS9tbXUvcGFnZV90cmFjay5jCkBAIC0xLDYgKzEsNiBA
QAogLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAtb25seQogLyoKLSAqIFN1cHBv
cnQgS1ZNIGd1c3QgcGFnZSB0cmFja2luZworICogU3VwcG9ydCBLVk0gZ3Vlc3QgcGFnZSB0cmFj
a2luZwogICoKICAqIFRoaXMgZmVhdHVyZSBhbGxvd3MgdXMgdG8gdHJhY2sgcGFnZSBhY2Nlc3Mg
aW4gZ3Vlc3QuIEN1cnJlbnRseSwgb25seQogICogd3JpdGUgYWNjZXNzIGlzIHRyYWNrZWQuCkBA
IC05NSw3ICs5NSw3IEBAIHN0YXRpYyB2b2lkIHVwZGF0ZV9nZm5fdHJhY2soc3RydWN0IGt2bV9t
ZW1vcnlfc2xvdCAqc2xvdCwgZ2ZuX3QgZ2ZuLAogICogQGt2bTogdGhlIGd1ZXN0IGluc3RhbmNl
IHdlIGFyZSBpbnRlcmVzdGVkIGluLgogICogQHNsb3Q6IHRoZSBAZ2ZuIGJlbG9uZ3MgdG8uCiAg
KiBAZ2ZuOiB0aGUgZ3Vlc3QgcGFnZS4KLSAqIEBtb2RlOiB0cmFja2luZyBtb2RlLCBjdXJyZW50
bHkgb25seSB3cml0ZSB0cmFjayBpcyBzdXBwb3J0ZWQuCisgKiBAbW9kZTogdHJhY2tpbmcgbW9k
ZS4KICAqLwogdm9pZCBrdm1fc2xvdF9wYWdlX3RyYWNrX2FkZF9wYWdlKHN0cnVjdCBrdm0gKmt2
bSwKIAkJCQkgIHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QsIGdmbl90IGdmbiwKQEAgLTEx
Myw5ICsxMTMsMTYgQEAgdm9pZCBrdm1fc2xvdF9wYWdlX3RyYWNrX2FkZF9wYWdlKHN0cnVjdCBr
dm0gKmt2bSwKIAkgKi8KIAlrdm1fbW11X2dmbl9kaXNhbGxvd19scGFnZShzbG90LCBnZm4pOwog
Ci0JaWYgKG1vZGUgPT0gS1ZNX1BBR0VfVFJBQ0tfV1JJVEUpCisJaWYgKG1vZGUgPT0gS1ZNX1BB
R0VfVFJBQ0tfUFJFV1JJVEUgfHwgbW9kZSA9PSBLVk1fUEFHRV9UUkFDS19XUklURSkgewogCQlp
ZiAoa3ZtX21tdV9zbG90X2dmbl93cml0ZV9wcm90ZWN0KGt2bSwgc2xvdCwgZ2ZuKSkKIAkJCWt2
bV9mbHVzaF9yZW1vdGVfdGxicyhrdm0pOworCX0gZWxzZSBpZiAobW9kZSA9PSBLVk1fUEFHRV9U
UkFDS19QUkVSRUFEKSB7CisJCWlmIChrdm1fbW11X3Nsb3RfZ2ZuX3JlYWRfcHJvdGVjdChrdm0s
IHNsb3QsIGdmbikpCisJCQlrdm1fZmx1c2hfcmVtb3RlX3RsYnMoa3ZtKTsKKwl9IGVsc2UgaWYg
KG1vZGUgPT0gS1ZNX1BBR0VfVFJBQ0tfUFJFRVhFQykgeworCQlpZiAoa3ZtX21tdV9zbG90X2dm
bl9leGVjX3Byb3RlY3Qoa3ZtLCBzbG90LCBnZm4pKQorCQkJa3ZtX2ZsdXNoX3JlbW90ZV90bGJz
KGt2bSk7CisJfQogfQogRVhQT1JUX1NZTUJPTF9HUEwoa3ZtX3Nsb3RfcGFnZV90cmFja19hZGRf
cGFnZSk7CiAKQEAgLTEzMCw3ICsxMzcsNyBAQCBFWFBPUlRfU1lNQk9MX0dQTChrdm1fc2xvdF9w
YWdlX3RyYWNrX2FkZF9wYWdlKTsKICAqIEBrdm06IHRoZSBndWVzdCBpbnN0YW5jZSB3ZSBhcmUg
aW50ZXJlc3RlZCBpbi4KICAqIEBzbG90OiB0aGUgQGdmbiBiZWxvbmdzIHRvLgogICogQGdmbjog
dGhlIGd1ZXN0IHBhZ2UuCi0gKiBAbW9kZTogdHJhY2tpbmcgbW9kZSwgY3VycmVudGx5IG9ubHkg
d3JpdGUgdHJhY2sgaXMgc3VwcG9ydGVkLgorICogQG1vZGU6IHRyYWNraW5nIG1vZGUuCiAgKi8K
IHZvaWQga3ZtX3Nsb3RfcGFnZV90cmFja19yZW1vdmVfcGFnZShzdHJ1Y3Qga3ZtICprdm0sCiAJ
CQkJICAgICBzdHJ1Y3Qga3ZtX21lbW9yeV9zbG90ICpzbG90LCBnZm5fdCBnZm4sCkBAIC0yMjMs
MTIgKzIzMCw3OCBAQCBrdm1fcGFnZV90cmFja191bnJlZ2lzdGVyX25vdGlmaWVyKHN0cnVjdCBr
dm0gKmt2bSwKIH0KIEVYUE9SVF9TWU1CT0xfR1BMKGt2bV9wYWdlX3RyYWNrX3VucmVnaXN0ZXJf
bm90aWZpZXIpOwogCisvKgorICogTm90aWZ5IHRoZSBub2RlIHRoYXQgYSByZWFkIGFjY2VzcyBp
cyBhYm91dCB0byBoYXBwZW4uIFJldHVybmluZyBmYWxzZQorICogZG9lc24ndCBzdG9wIHRoZSBv
dGhlciBub2RlcyBmcm9tIGJlaW5nIGNhbGxlZCwgYnV0IGl0IHdpbGwgc3RvcAorICogdGhlIGVt
dWxhdGlvbi4KKyAqCisgKiBUaGUgbm9kZSBzaG91bGQgZmlndXJlIG91dCBpZiB0aGUgcmVhZCBw
YWdlIGlzIHRoZSBvbmUgdGhhdCB0aGUgbm9kZQorICogaXMgaW50ZXJlc3RlZCBpbiBieSBpdHNl
bGYuCisgKgorICogVGhlIG5vZGVzIHdpbGwgYWx3YXlzIGJlIGluIGNvbmZsaWN0IGlmIHRoZXkg
dHJhY2sgdGhlIHNhbWUgcGFnZToKKyAqIC0gYWNjZXB0aW5nIGEgcmVhZCB3b24ndCBndWFyYW50
ZWUgdGhhdCB0aGUgbmV4dCBub2RlIHdpbGwgbm90IG92ZXJyaWRlCisgKiAgIHRoZSBkYXRhIChm
aWxsaW5nIG5ldy9ieXRlcyBhbmQgc2V0dGluZyBkYXRhX3JlYWR5KQorICogLSBmaWxsaW5nIG5l
dy9ieXRlcyB3aXRoIGN1c3RvbSBkYXRhIHdvbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBuZXh0IG5v
ZGUKKyAqICAgd2lsbCBub3Qgb3ZlcnJpZGUgdGhhdAorICovCitib29sIGt2bV9wYWdlX3RyYWNr
X3ByZXJlYWQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBncGFfdCBncGEsIGd2YV90IGd2YSwKKwkJ
CSAgICBpbnQgYnl0ZXMpCit7CisJc3RydWN0IGt2bV9wYWdlX3RyYWNrX25vdGlmaWVyX2hlYWQg
KmhlYWQ7CisJc3RydWN0IGt2bV9wYWdlX3RyYWNrX25vdGlmaWVyX25vZGUgKm47CisJaW50IGlk
eDsKKwlib29sIHJldCA9IHRydWU7CisKKwloZWFkID0gJnZjcHUtPmt2bS0+YXJjaC50cmFja19u
b3RpZmllcl9oZWFkOworCisJaWYgKGhsaXN0X2VtcHR5KCZoZWFkLT50cmFja19ub3RpZmllcl9s
aXN0KSkKKwkJcmV0dXJuIHJldDsKKworCWlkeCA9IHNyY3VfcmVhZF9sb2NrKCZoZWFkLT50cmFj
a19zcmN1KTsKKwlobGlzdF9mb3JfZWFjaF9lbnRyeV9yY3UobiwgJmhlYWQtPnRyYWNrX25vdGlm
aWVyX2xpc3QsIG5vZGUpCisJCWlmIChuLT50cmFja19wcmVyZWFkKQorCQkJaWYgKCFuLT50cmFj
a19wcmVyZWFkKHZjcHUsIGdwYSwgZ3ZhLCBieXRlcywgbikpCisJCQkJcmV0ID0gZmFsc2U7CisJ
c3JjdV9yZWFkX3VubG9jaygmaGVhZC0+dHJhY2tfc3JjdSwgaWR4KTsKKwlyZXR1cm4gcmV0Owor
fQorCisvKgorICogTm90aWZ5IHRoZSBub2RlIHRoYXQgYSB3cml0ZSBhY2Nlc3MgaXMgYWJvdXQg
dG8gaGFwcGVuLiBSZXR1cm5pbmcgZmFsc2UKKyAqIGRvZXNuJ3Qgc3RvcCB0aGUgb3RoZXIgbm9k
ZXMgZnJvbSBiZWluZyBjYWxsZWQsIGJ1dCBpdCB3aWxsIHN0b3AKKyAqIHRoZSBlbXVsYXRpb24u
CisgKgorICogVGhlIG5vZGUgc2hvdWxkIGZpZ3VyZSBvdXQgaWYgdGhlIHdyaXR0ZW4gcGFnZSBp
cyB0aGUgb25lIHRoYXQgdGhlIG5vZGUKKyAqIGlzIGludGVyZXN0ZWQgaW4gYnkgaXRzZWxmLgor
ICovCitib29sIGt2bV9wYWdlX3RyYWNrX3ByZXdyaXRlKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwg
Z3BhX3QgZ3BhLCBndmFfdCBndmEsCisJCQkgICAgIGNvbnN0IHU4ICpuZXcsIGludCBieXRlcykK
K3sKKwlzdHJ1Y3Qga3ZtX3BhZ2VfdHJhY2tfbm90aWZpZXJfaGVhZCAqaGVhZDsKKwlzdHJ1Y3Qg
a3ZtX3BhZ2VfdHJhY2tfbm90aWZpZXJfbm9kZSAqbjsKKwlpbnQgaWR4OworCWJvb2wgcmV0ID0g
dHJ1ZTsKKworCWhlYWQgPSAmdmNwdS0+a3ZtLT5hcmNoLnRyYWNrX25vdGlmaWVyX2hlYWQ7CisK
KwlpZiAoaGxpc3RfZW1wdHkoJmhlYWQtPnRyYWNrX25vdGlmaWVyX2xpc3QpKQorCQlyZXR1cm4g
cmV0OworCisJaWR4ID0gc3JjdV9yZWFkX2xvY2soJmhlYWQtPnRyYWNrX3NyY3UpOworCWhsaXN0
X2Zvcl9lYWNoX2VudHJ5X3JjdShuLCAmaGVhZC0+dHJhY2tfbm90aWZpZXJfbGlzdCwgbm9kZSkK
KwkJaWYgKG4tPnRyYWNrX3ByZXdyaXRlKQorCQkJaWYgKCFuLT50cmFja19wcmV3cml0ZSh2Y3B1
LCBncGEsIGd2YSwgbmV3LCBieXRlcywgbikpCisJCQkJcmV0ID0gZmFsc2U7CisJc3JjdV9yZWFk
X3VubG9jaygmaGVhZC0+dHJhY2tfc3JjdSwgaWR4KTsKKwlyZXR1cm4gcmV0OworfQorCiAvKgog
ICogTm90aWZ5IHRoZSBub2RlIHRoYXQgd3JpdGUgYWNjZXNzIGlzIGludGVyY2VwdGVkIGFuZCB3
cml0ZSBlbXVsYXRpb24gaXMKICAqIGZpbmlzaGVkIGF0IHRoaXMgdGltZS4KICAqCi0gKiBUaGUg
bm9kZSBzaG91bGQgZmlndXJlIG91dCBpZiB0aGUgd3JpdHRlbiBwYWdlIGlzIHRoZSBvbmUgdGhh
dCBub2RlIGlzCi0gKiBpbnRlcmVzdGVkIGluIGJ5IGl0c2VsZi4KKyAqIFRoZSBub2RlIHNob3Vs
ZCBmaWd1cmUgb3V0IGlmIHRoZSB3cml0dGVuIHBhZ2UgaXMgdGhlIG9uZSB0aGF0IHRoZSBub2Rl
CisgKiBpcyBpbnRlcmVzdGVkIGluIGJ5IGl0c2VsZi4KICAqLwogdm9pZCBrdm1fcGFnZV90cmFj
a193cml0ZShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGdwYV90IGdwYSwgZ3ZhX3QgZ3ZhLAogCQkJ
ICBjb25zdCB1OCAqbmV3LCBpbnQgYnl0ZXMpCkBAIC0yNDksMTIgKzMyMiw0MSBAQCB2b2lkIGt2
bV9wYWdlX3RyYWNrX3dyaXRlKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ3BhX3QgZ3BhLCBndmFf
dCBndmEsCiAJc3JjdV9yZWFkX3VubG9jaygmaGVhZC0+dHJhY2tfc3JjdSwgaWR4KTsKIH0KIAor
LyoKKyAqIE5vdGlmeSB0aGUgbm9kZSB0aGF0IGFuIGluc3RydWN0aW9uIGlzIGFib3V0IHRvIGJl
IGV4ZWN1dGVkLgorICogUmV0dXJuaW5nIGZhbHNlIGRvZXNuJ3Qgc3RvcCB0aGUgb3RoZXIgbm9k
ZXMgZnJvbSBiZWluZyBjYWxsZWQsCisgKiBidXQgaXQgd2lsbCBzdG9wIHRoZSBlbXVsYXRpb24g
d2l0aCBYODZFTVVMX1JFVFJZX0lOU1RSLgorICoKKyAqIFRoZSBub2RlIHNob3VsZCBmaWd1cmUg
b3V0IGlmIHRoZSBwYWdlIGlzIHRoZSBvbmUgdGhhdCB0aGUgbm9kZQorICogaXMgaW50ZXJlc3Rl
ZCBpbiBieSBpdHNlbGYuCisgKi8KK2Jvb2wga3ZtX3BhZ2VfdHJhY2tfcHJlZXhlYyhzdHJ1Y3Qg
a3ZtX3ZjcHUgKnZjcHUsIGdwYV90IGdwYSwgZ3ZhX3QgZ3ZhKQoreworCXN0cnVjdCBrdm1fcGFn
ZV90cmFja19ub3RpZmllcl9oZWFkICpoZWFkOworCXN0cnVjdCBrdm1fcGFnZV90cmFja19ub3Rp
Zmllcl9ub2RlICpuOworCWludCBpZHg7CisJYm9vbCByZXQgPSB0cnVlOworCisJaGVhZCA9ICZ2
Y3B1LT5rdm0tPmFyY2gudHJhY2tfbm90aWZpZXJfaGVhZDsKKworCWlmIChobGlzdF9lbXB0eSgm
aGVhZC0+dHJhY2tfbm90aWZpZXJfbGlzdCkpCisJCXJldHVybiByZXQ7CisKKwlpZHggPSBzcmN1
X3JlYWRfbG9jaygmaGVhZC0+dHJhY2tfc3JjdSk7CisJaGxpc3RfZm9yX2VhY2hfZW50cnlfcmN1
KG4sICZoZWFkLT50cmFja19ub3RpZmllcl9saXN0LCBub2RlKQorCQlpZiAobi0+dHJhY2tfcHJl
ZXhlYykKKwkJCWlmICghbi0+dHJhY2tfcHJlZXhlYyh2Y3B1LCBncGEsIGd2YSwgbikpCisJCQkJ
cmV0ID0gZmFsc2U7CisJc3JjdV9yZWFkX3VubG9jaygmaGVhZC0+dHJhY2tfc3JjdSwgaWR4KTsK
KwlyZXR1cm4gcmV0OworfQorCiAvKgogICogTm90aWZ5IHRoZSBub2RlIHRoYXQgbWVtb3J5IHNs
b3QgaXMgYmVpbmcgcmVtb3ZlZCBvciBtb3ZlZCBzbyB0aGF0IGl0IGNhbgotICogZHJvcCB3cml0
ZS1wcm90ZWN0aW9uIGZvciB0aGUgcGFnZXMgaW4gdGhlIG1lbW9yeSBzbG90LgorICogZHJvcCBh
Y3RpdmUgcHJvdGVjdGlvbiBmb3IgdGhlIHBhZ2VzIGluIHRoZSBtZW1vcnkgc2xvdC4KICAqCi0g
KiBUaGUgbm9kZSBzaG91bGQgZmlndXJlIG91dCBpdCBoYXMgYW55IHdyaXRlLXByb3RlY3RlZCBw
YWdlcyBpbiB0aGlzIHNsb3QKLSAqIGJ5IGl0c2VsZi4KKyAqIFRoZSBub2RlIHNob3VsZCBmaWd1
cmUgb3V0IGlmIHRoZSBwYWdlIGlzIHRoZSBvbmUgdGhhdCB0aGUgbm9kZQorICogaXMgaW50ZXJl
c3RlZCBpbiBieSBpdHNlbGYuCiAgKi8KIHZvaWQga3ZtX3BhZ2VfdHJhY2tfZmx1c2hfc2xvdChz
dHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QpCiB7Cl9fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fClZpcnR1YWxpemF0aW9uIG1h
aWxpbmcgbGlzdApWaXJ0dWFsaXphdGlvbkBsaXN0cy5saW51eC1mb3VuZGF0aW9uLm9yZwpodHRw
czovL2xpc3RzLmxpbnV4Zm91bmRhdGlvbi5vcmcvbWFpbG1hbi9saXN0aW5mby92aXJ0dWFsaXph
dGlvbg==
