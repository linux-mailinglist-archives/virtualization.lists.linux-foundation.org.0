Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
	by mail.lfdr.de (Postfix) with ESMTPS id 9917B228B41
	for <lists.virtualization@lfdr.de>; Tue, 21 Jul 2020 23:26:42 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by silver.osuosl.org (Postfix) with ESMTP id 3843E2275A;
	Tue, 21 Jul 2020 21:26:41 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id xm9k3ZU2Tw8g; Tue, 21 Jul 2020 21:26:20 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by silver.osuosl.org (Postfix) with ESMTP id DBF2C2280C;
	Tue, 21 Jul 2020 21:26:02 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id BCC42C08A2;
	Tue, 21 Jul 2020 21:26:02 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 27CF8C016F
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:58 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by fraxinus.osuosl.org (Postfix) with ESMTP id EFB4986BAD
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:57 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id 9mkWo4ZNYhge
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:55 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by fraxinus.osuosl.org (Postfix) with ESMTPS id A7AB986B82
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:54 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp02.buh.bitdefender.net [10.17.80.76])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 6C151305D59B; Wed, 22 Jul 2020 00:09:27 +0300 (EEST)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 4D55D304FA12;
 Wed, 22 Jul 2020 00:09:27 +0300 (EEST)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v9 53/84] KVM: introspection: add KVMI_EVENT_PAUSE_VCPU
Date: Wed, 22 Jul 2020 00:08:51 +0300
Message-Id: <20200721210922.7646-54-alazar@bitdefender.com>
In-Reply-To: <20200721210922.7646-1-alazar@bitdefender.com>
References: <20200721210922.7646-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>, virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

VGhpcyBldmVudCBpcyBzZW50IGJ5IHRoZSB2Q1BVIHRocmVhZCBhcyBhIHJlc3BvbnNlIHRvIHRo
ZSBLVk1JX1ZDUFVfUEFVU0UKY29tbWFuZCwgYnV0IGl0IGhhcyBhIGxvd2VyIHByaW9yaXR5LCBi
ZWluZyBzZW50IGFmdGVyIGFueSBvdGhlcgppbnRyb3NwZWN0aW9uIGV2ZW50IGFuZCB3aGVuIG5v
IG90aGVyIGludHJvc3BlY3Rpb24gY29tbWFuZCBpcyBxdWV1ZWQuCgpUaGUgbnVtYmVyIG9mIEtW
TUlfRVZFTlRfUEFVU0VfVkNQVSB3aWxsIG1hdGNoIHRoZSBudW1iZXIgb2Ygc3VjY2Vzc2Z1bApL
Vk1JX1ZDUFVfUEFVU0UgY29tbWFuZHMuCgpTaWduZWQtb2ZmLWJ5OiBBZGFsYmVydCBMYXrEg3Ig
PGFsYXphckBiaXRkZWZlbmRlci5jb20+Ci0tLQogRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1p
LnJzdCAgICAgICAgICAgICAgIHwgIDIyICsrLQogYXJjaC94ODYva3ZtL2t2bWkuYyAgICAgICAg
ICAgICAgICAgICAgICAgICAgIHwgIDgxICsrKysrKysrKwogaW5jbHVkZS9saW51eC9rdm1pX2hv
c3QuaCAgICAgICAgICAgICAgICAgICAgIHwgIDExICsrCiBpbmNsdWRlL3VhcGkvbGludXgva3Zt
aS5oICAgICAgICAgICAgICAgICAgICAgfCAgMTMgKysKIC4uLi90ZXN0aW5nL3NlbGZ0ZXN0cy9r
dm0veDg2XzY0L2t2bWlfdGVzdC5jICB8ICA0NiArKysrKysKIHZpcnQva3ZtL2ludHJvc3BlY3Rp
b24va3ZtaS5jICAgICAgICAgICAgICAgICB8ICAyNCArKy0KIHZpcnQva3ZtL2ludHJvc3BlY3Rp
b24va3ZtaV9pbnQuaCAgICAgICAgICAgICB8ICAgMyArCiB2aXJ0L2t2bS9pbnRyb3NwZWN0aW9u
L2t2bWlfbXNnLmMgICAgICAgICAgICAgfCAxNTUgKysrKysrKysrKysrKysrKystCiA4IGZpbGVz
IGNoYW5nZWQsIDM1MSBpbnNlcnRpb25zKCspLCA0IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBh
L0RvY3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QgYi9Eb2N1bWVudGF0aW9uL3ZpcnQva3Zt
L2t2bWkucnN0CmluZGV4IDUwMmVlMDZkNWU3Ny4uMDZjMWNiMzQyMDllIDEwMDY0NAotLS0gYS9E
b2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CisrKyBiL0RvY3VtZW50YXRpb24vdmlydC9r
dm0va3ZtaS5yc3QKQEAgLTU2Myw2ICs1NjMsMjUgQEAgT24geDg2IHRoZSBzdHJ1Y3R1cmUgbG9v
a3MgbGlrZSB0aGlzOjoKIAogSXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHZDUFUg
c3RhdGUgYXQgdGhlIHRpbWUgb2YgdGhlIGV2ZW50LgogCitBbiBldmVudCByZXBseSBiZWdpbnMg
d2l0aCB0d28gY29tbW9uIHN0cnVjdHVyZXM6OgorCisJc3RydWN0IGt2bWlfdmNwdV9oZHI7CisJ
c3RydWN0IGt2bWlfZXZlbnRfcmVwbHkgeworCQlfX3U4IGFjdGlvbjsKKwkJX191OCBldmVudDsK
KwkJX191MTYgcGFkZGluZzE7CisJCV9fdTMyIHBhZGRpbmcyOworCX07CisKK0FsbCBldmVudHMg
YWNjZXB0IHRoZSBLVk1JX0VWRU5UX0FDVElPTl9DUkFTSCBhY3Rpb24sIHdoaWNoIHN0b3BzIHRo
ZQorZ3Vlc3QgdW5ncmFjZWZ1bGx5LCBidXQgYXMgc29vbiBhcyBwb3NzaWJsZS4KKworTW9zdCBv
ZiB0aGUgZXZlbnRzIGFjY2VwdCB0aGUgS1ZNSV9FVkVOVF9BQ1RJT05fQ09OVElOVUUgYWN0aW9u
LCB3aGljaAorbGV0cyB0aGUgaW5zdHJ1Y3Rpb24gdGhhdCBjYXVzZWQgdGhlIGV2ZW50IHRvIGNv
bnRpbnVlLgorCitTb21lIG9mIHRoZSBldmVudHMgYWNjZXB0IHRoZSBLVk1JX0VWRU5UX0FDVElP
Tl9SRVRSWSBhY3Rpb24sIHRvIGNvbnRpbnVlCitieSByZS1lbnRlcmluZyBpbiBndWVzdC4KKwog
U3BlY2lmaWMgZXZlbnQgZGF0YSBjYW4gZm9sbG93IHRoZXNlIGNvbW1vbiBzdHJ1Y3R1cmVzLgog
CiAxLiBLVk1JX0VWRU5UX1VOSE9PSwpAQCAtNjA0LDcgKzYyMyw4IEBAIG9wZXJhdGlvbiBjYW4g
cHJvY2VlZCkuCiAJc3RydWN0IGt2bWlfdmNwdV9oZHI7CiAJc3RydWN0IGt2bWlfZXZlbnRfcmVw
bHk7CiAKLVRoaXMgZXZlbnQgaXMgc2VudCBpbiByZXNwb25zZSB0byBhICpLVk1JX1ZDUFVfUEFV
U0UqIGNvbW1hbmQuCitUaGlzIGV2ZW50IGlzIHNlbnQgaW4gcmVzcG9uc2UgdG8gYSAqS1ZNSV9W
Q1BVX1BBVVNFKiBjb21tYW5kIGFuZAorY2Fubm90IGJlIGNvbnRyb2xsZWQgd2l0aCAqS1ZNSV9W
Q1BVX0NPTlRST0xfRVZFTlRTKi4KIEJlY2F1c2UgaXQgaGFzIGEgbG93IHByaW9yaXR5LCBpdCB3
aWxsIGJlIHNlbnQgYWZ0ZXIgYW55IG90aGVyIHZDUFUKIGludHJvc3BlY3Rpb24gZXZlbnQgYW5k
IHdoZW4gbm8gb3RoZXIgdkNQVSBpbnRyb3NwZWN0aW9uIGNvbW1hbmQgaXMKIHF1ZXVlZC4KZGlm
ZiAtLWdpdCBhL2FyY2gveDg2L2t2bS9rdm1pLmMgYi9hcmNoL3g4Ni9rdm0va3ZtaS5jCmluZGV4
IGNmN2JmZmY2YzhjNS4uY2U3ZTJkNWYyYWI0IDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0va3Zt
aS5jCisrKyBiL2FyY2gveDg2L2t2bS9rdm1pLmMKQEAgLTUsOCArNSw4OSBAQAogICogQ29weXJp
Z2h0IChDKSAyMDE5LTIwMjAgQml0ZGVmZW5kZXIgUy5SLkwuCiAgKi8KIAorI2luY2x1ZGUgImxp
bnV4L2t2bV9ob3N0LmgiCisjaW5jbHVkZSAieDg2LmgiCiAjaW5jbHVkZSAiLi4vLi4vLi4vdmly
dC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX2ludC5oIgogCitzdGF0aWMgdW5zaWduZWQgaW50IGt2
bWlfdmNwdV9tb2RlKGNvbnN0IHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKKwkJCQkgICBjb25zdCBz
dHJ1Y3Qga3ZtX3NyZWdzICpzcmVncykKK3sKKwl1bnNpZ25lZCBpbnQgbW9kZSA9IDA7CisKKwlp
ZiAoaXNfbG9uZ19tb2RlKChzdHJ1Y3Qga3ZtX3ZjcHUgKikgdmNwdSkpIHsKKwkJaWYgKHNyZWdz
LT5jcy5sKQorCQkJbW9kZSA9IDg7CisJCWVsc2UgaWYgKCFzcmVncy0+Y3MuZGIpCisJCQltb2Rl
ID0gMjsKKwkJZWxzZQorCQkJbW9kZSA9IDQ7CisJfSBlbHNlIGlmIChzcmVncy0+Y3IwICYgWDg2
X0NSMF9QRSkgeworCQlpZiAoIXNyZWdzLT5jcy5kYikKKwkJCW1vZGUgPSAyOworCQllbHNlCisJ
CQltb2RlID0gNDsKKwl9IGVsc2UgaWYgKCFzcmVncy0+Y3MuZGIpIHsKKwkJbW9kZSA9IDI7CisJ
fSBlbHNlIHsKKwkJbW9kZSA9IDQ7CisJfQorCisJcmV0dXJuIG1vZGU7Cit9CisKK3N0YXRpYyB2
b2lkIGt2bWlfZ2V0X21zcnMoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtaV9ldmVu
dF9hcmNoICpldmVudCkKK3sKKwlzdHJ1Y3QgbXNyX2RhdGEgbXNyOworCisJbXNyLmhvc3RfaW5p
dGlhdGVkID0gdHJ1ZTsKKworCW1zci5pbmRleCA9IE1TUl9JQTMyX1NZU0VOVEVSX0NTOworCWt2
bV94ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQtPm1zcnMuc3lzZW50ZXJfY3Mg
PSBtc3IuZGF0YTsKKworCW1zci5pbmRleCA9IE1TUl9JQTMyX1NZU0VOVEVSX0VTUDsKKwlrdm1f
eDg2X29wcy5nZXRfbXNyKHZjcHUsICZtc3IpOworCWV2ZW50LT5tc3JzLnN5c2VudGVyX2VzcCA9
IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0lBMzJfU1lTRU5URVJfRUlQOworCWt2bV94
ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQtPm1zcnMuc3lzZW50ZXJfZWlwID0g
bXNyLmRhdGE7CisKKwltc3IuaW5kZXggPSBNU1JfRUZFUjsKKwlrdm1feDg2X29wcy5nZXRfbXNy
KHZjcHUsICZtc3IpOworCWV2ZW50LT5tc3JzLmVmZXIgPSBtc3IuZGF0YTsKKworCW1zci5pbmRl
eCA9IE1TUl9TVEFSOworCWt2bV94ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQt
Pm1zcnMuc3RhciA9IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0xTVEFSOworCWt2bV94
ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQtPm1zcnMubHN0YXIgPSBtc3IuZGF0
YTsKKworCW1zci5pbmRleCA9IE1TUl9DU1RBUjsKKwlrdm1feDg2X29wcy5nZXRfbXNyKHZjcHUs
ICZtc3IpOworCWV2ZW50LT5tc3JzLmNzdGFyID0gbXNyLmRhdGE7CisKKwltc3IuaW5kZXggPSBN
U1JfSUEzMl9DUl9QQVQ7CisJa3ZtX3g4Nl9vcHMuZ2V0X21zcih2Y3B1LCAmbXNyKTsKKwlldmVu
dC0+bXNycy5wYXQgPSBtc3IuZGF0YTsKKworCW1zci5pbmRleCA9IE1TUl9LRVJORUxfR1NfQkFT
RTsKKwlrdm1feDg2X29wcy5nZXRfbXNyKHZjcHUsICZtc3IpOworCWV2ZW50LT5tc3JzLnNoYWRv
d19ncyA9IG1zci5kYXRhOworfQorCit2b2lkIGt2bWlfYXJjaF9zZXR1cF9ldmVudChzdHJ1Y3Qg
a3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1pX2V2ZW50ICpldikKK3sKKwlzdHJ1Y3Qga3ZtaV9l
dmVudF9hcmNoICpldmVudCA9ICZldi0+YXJjaDsKKworCWt2bV9hcmNoX3ZjcHVfZ2V0X3JlZ3Mo
dmNwdSwgJmV2ZW50LT5yZWdzKTsKKwlrdm1fYXJjaF92Y3B1X2dldF9zcmVncyh2Y3B1LCAmZXZl
bnQtPnNyZWdzKTsKKwlldi0+YXJjaC5tb2RlID0ga3ZtaV92Y3B1X21vZGUodmNwdSwgJmV2ZW50
LT5zcmVncyk7CisJa3ZtaV9nZXRfbXNycyh2Y3B1LCBldmVudCk7Cit9CisKIGludCBrdm1pX2Fy
Y2hfY21kX3ZjcHVfZ2V0X2luZm8oc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAogCQkJCXN0cnVjdCBr
dm1pX3ZjcHVfZ2V0X2luZm9fcmVwbHkgKnJwbCkKIHsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGlu
dXgva3ZtaV9ob3N0LmggYi9pbmNsdWRlL2xpbnV4L2t2bWlfaG9zdC5oCmluZGV4IGZkYjhjZTZm
ZTZhNS4uYTg3ZjAzMjJjNTg0IDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L2t2bWlfaG9zdC5o
CisrKyBiL2luY2x1ZGUvbGludXgva3ZtaV9ob3N0LmgKQEAgLTYsNiArNiwxNCBAQAogCiAjaW5j
bHVkZSA8YXNtL2t2bWlfaG9zdC5oPgogCitzdHJ1Y3Qga3ZtaV92Y3B1X3JlcGx5IHsKKwlpbnQg
ZXJyb3I7CisJaW50IGFjdGlvbjsKKwl1MzIgc2VxOworCXZvaWQgKmRhdGE7CisJc2l6ZV90IHNp
emU7Cit9OworCiBzdHJ1Y3Qga3ZtaV9qb2IgewogCXN0cnVjdCBsaXN0X2hlYWQgbGluazsKIAl2
b2lkICpjdHg7CkBAIC0yMCw2ICsyOCw5IEBAIHN0cnVjdCBrdm1fdmNwdV9pbnRyb3NwZWN0aW9u
IHsKIAlzcGlubG9ja190IGpvYl9sb2NrOwogCiAJYXRvbWljX3QgcGF1c2VfcmVxdWVzdHM7CisK
KwlzdHJ1Y3Qga3ZtaV92Y3B1X3JlcGx5IHJlcGx5OworCWJvb2wgd2FpdGluZ19mb3JfcmVwbHk7
CiB9OwogCiBzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gewpkaWZmIC0tZ2l0IGEvaW5jbHVkZS91
YXBpL2xpbnV4L2t2bWkuaCBiL2luY2x1ZGUvdWFwaS9saW51eC9rdm1pLmgKaW5kZXggM2RlZDIy
MDIwYmVmLi41YTViMDFkZjdlM2UgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvdWFwaS9saW51eC9rdm1p
LmgKKysrIGIvaW5jbHVkZS91YXBpL2xpbnV4L2t2bWkuaApAQCAtMzgsNiArMzgsMTIgQEAgZW51
bSB7CiAJS1ZNSV9OVU1fRVZFTlRTCiB9OwogCitlbnVtIHsKKwlLVk1JX0VWRU5UX0FDVElPTl9D
T05USU5VRSA9IDAsCisJS1ZNSV9FVkVOVF9BQ1RJT05fUkVUUlkgICAgPSAxLAorCUtWTUlfRVZF
TlRfQUNUSU9OX0NSQVNIICAgID0gMiwKK307CisKIHN0cnVjdCBrdm1pX21zZ19oZHIgewogCV9f
dTE2IGlkOwogCV9fdTE2IHNpemU7CkBAIC0xMjQsNCArMTMwLDExIEBAIHN0cnVjdCBrdm1pX2V2
ZW50IHsKIAlzdHJ1Y3Qga3ZtaV9ldmVudF9hcmNoIGFyY2g7CiB9OwogCitzdHJ1Y3Qga3ZtaV9l
dmVudF9yZXBseSB7CisJX191OCBhY3Rpb247CisJX191OCBldmVudDsKKwlfX3UxNiBwYWRkaW5n
MTsKKwlfX3UzMiBwYWRkaW5nMjsKK307CisKICNlbmRpZiAvKiBfVUFQSV9fTElOVVhfS1ZNSV9I
ICovCmRpZmYgLS1naXQgYS90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlf
dGVzdC5jIGIvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYwpp
bmRleCAwZGY4OTBiNGI0NDAuLjVjNWM1MDE4ODMyZCAxMDA2NDQKLS0tIGEvdG9vbHMvdGVzdGlu
Zy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYworKysgYi90b29scy90ZXN0aW5nL3Nl
bGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jCkBAIC0zNCw2ICszNCwxMiBAQCBzdGF0aWMg
dm1fcGFkZHJfdCB0ZXN0X2dwYTsKIHN0YXRpYyB1aW50OF90IHRlc3Rfd3JpdGVfcGF0dGVybjsK
IHN0YXRpYyBpbnQgcGFnZV9zaXplOwogCitzdHJ1Y3QgdmNwdV9yZXBseSB7CisJc3RydWN0IGt2
bWlfbXNnX2hkciBoZHI7CisJc3RydWN0IGt2bWlfdmNwdV9oZHIgdmNwdV9oZHI7CisJc3RydWN0
IGt2bWlfZXZlbnRfcmVwbHkgcmVwbHk7Cit9OworCiBzdHJ1Y3QgdmNwdV93b3JrZXJfZGF0YSB7
CiAJc3RydWN0IGt2bV92bSAqdm07CiAJaW50IHZjcHVfaWQ7CkBAIC03NzIsMTQgKzc3OCw1NCBA
QCBzdGF0aWMgdm9pZCBwYXVzZV92Y3B1KHZvaWQpCiAJY21kX3ZjcHVfcGF1c2UoMSwgMCwgMCk7
CiB9CiAKK3N0YXRpYyB2b2lkIHJlcGx5X3RvX2V2ZW50KHN0cnVjdCBrdm1pX21zZ19oZHIgKmV2
X2hkciwgc3RydWN0IGt2bWlfZXZlbnQgKmV2LAorCQkJICAgX191OCBhY3Rpb24sIHN0cnVjdCB2
Y3B1X3JlcGx5ICpycGwsIHNpemVfdCBycGxfc2l6ZSkKK3sKKwlzc2l6ZV90IHI7CisKKwlycGwt
Pmhkci5pZCA9IGV2X2hkci0+aWQ7CisJcnBsLT5oZHIuc2VxID0gZXZfaGRyLT5zZXE7CisJcnBs
LT5oZHIuc2l6ZSA9IHJwbF9zaXplIC0gc2l6ZW9mKHJwbC0+aGRyKTsKKworCXJwbC0+dmNwdV9o
ZHIudmNwdSA9IGV2LT52Y3B1OworCisJcnBsLT5yZXBseS5hY3Rpb24gPSBhY3Rpb247CisJcnBs
LT5yZXBseS5ldmVudCA9IGV2LT5ldmVudDsKKworCXIgPSBzZW5kKFVzZXJzcGFjZV9zb2NrZXQs
IHJwbCwgcnBsX3NpemUsIDApOworCVRFU1RfQVNTRVJUKHIgPT0gcnBsX3NpemUsCisJCSJzZW5k
KCkgZmFpbGVkLCBzZW5kaW5nICV6ZCwgcmVzdWx0ICV6ZCwgZXJybm8gJWQgKCVzKVxuIiwKKwkJ
cnBsX3NpemUsIHIsIGVycm5vLCBzdHJlcnJvcihlcnJubykpOworfQorCitzdGF0aWMgdm9pZCBk
aXNjYXJkX3BhdXNlX2V2ZW50KHN0cnVjdCBrdm1fdm0gKnZtKQoreworCXN0cnVjdCB2Y3B1X3dv
cmtlcl9kYXRhIGRhdGEgPSB7LnZtID0gdm0sIC52Y3B1X2lkID0gVkNQVV9JRH07CisJc3RydWN0
IHZjcHVfcmVwbHkgcnBsID0ge307CisJc3RydWN0IGt2bWlfbXNnX2hkciBoZHI7CisJcHRocmVh
ZF90IHZjcHVfdGhyZWFkOworCXN0cnVjdCBrdm1pX2V2ZW50IGV2OworCisJdmNwdV90aHJlYWQg
PSBzdGFydF92Y3B1X3dvcmtlcigmZGF0YSk7CisKKwlyZWNlaXZlX2V2ZW50KCZoZHIsICZldiwg
c2l6ZW9mKGV2KSwgS1ZNSV9FVkVOVF9QQVVTRV9WQ1BVKTsKKworCXJlcGx5X3RvX2V2ZW50KCZo
ZHIsICZldiwgS1ZNSV9FVkVOVF9BQ1RJT05fQ09OVElOVUUsCisJCQkmcnBsLCBzaXplb2YocnBs
KSk7CisKKwlzdG9wX3ZjcHVfd29ya2VyKHZjcHVfdGhyZWFkLCAmZGF0YSk7Cit9CisKIHN0YXRp
YyB2b2lkIHRlc3RfcGF1c2Uoc3RydWN0IGt2bV92bSAqdm0pCiB7CiAJX191OCBub193YWl0ID0g
MCwgd2FpdCA9IDEsIHdhaXRfaW52YWwgPSAyOwogCV9fdTggcGFkZGluZyA9IDEsIG5vX3BhZGRp
bmcgPSAwOwogCiAJcGF1c2VfdmNwdSgpOworCWRpc2NhcmRfcGF1c2VfZXZlbnQodm0pOwogCiAJ
Y21kX3ZjcHVfcGF1c2Uod2FpdCwgbm9fcGFkZGluZywgMCk7CisJZGlzY2FyZF9wYXVzZV9ldmVu
dCh2bSk7CiAJY21kX3ZjcHVfcGF1c2Uod2FpdF9pbnZhbCwgbm9fcGFkZGluZywgLUtWTV9FSU5W
QUwpOwogCWNtZF92Y3B1X3BhdXNlKG5vX3dhaXQsIHBhZGRpbmcsIC1LVk1fRUlOVkFMKTsKIApk
aWZmIC0tZ2l0IGEvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMgYi92aXJ0L2t2bS9pbnRy
b3NwZWN0aW9uL2t2bWkuYwppbmRleCBhNzA0ZTA1YjMxODQuLjAyYTg2NmNhOGQ4YyAxMDA2NDQK
LS0tIGEvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMKKysrIGIvdmlydC9rdm0vaW50cm9z
cGVjdGlvbi9rdm1pLmMKQEAgLTM1OCw2ICszNTgsNyBAQCBzdGF0aWMgdm9pZCBrdm1pX2pvYl9y
ZWxlYXNlX3ZjcHUoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCB2b2lkICpjdHgpCiAJc3RydWN0IGt2
bV92Y3B1X2ludHJvc3BlY3Rpb24gKnZjcHVpID0gVkNQVUkodmNwdSk7CiAKIAlhdG9taWNfc2V0
KCZ2Y3B1aS0+cGF1c2VfcmVxdWVzdHMsIDApOworCXZjcHVpLT53YWl0aW5nX2Zvcl9yZXBseSA9
IGZhbHNlOwogfQogCiBzdGF0aWMgdm9pZCBrdm1pX3JlbGVhc2VfdmNwdXMoc3RydWN0IGt2bSAq
a3ZtKQpAQCAtNzQzLDEyICs3NDQsMzMgQEAgdm9pZCBrdm1pX3J1bl9qb2JzKHN0cnVjdCBrdm1f
dmNwdSAqdmNwdSkKIAl9CiB9CiAKK3N0YXRpYyB2b2lkIGt2bWlfaGFuZGxlX3Vuc3VwcG9ydGVk
X2V2ZW50X2FjdGlvbihzdHJ1Y3Qga3ZtICprdm0pCit7CisJa3ZtaV9zb2NrX3NodXRkb3duKEtW
TUkoa3ZtKSk7Cit9CisKK3ZvaWQga3ZtaV9oYW5kbGVfY29tbW9uX2V2ZW50X2FjdGlvbnMoc3Ry
dWN0IGt2bSAqa3ZtLCB1MzIgYWN0aW9uKQoreworCXN3aXRjaCAoYWN0aW9uKSB7CisJZGVmYXVs
dDoKKwkJa3ZtaV9oYW5kbGVfdW5zdXBwb3J0ZWRfZXZlbnRfYWN0aW9uKGt2bSk7CisJfQorfQor
CiBzdGF0aWMgdm9pZCBrdm1pX3ZjcHVfcGF1c2VfZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1
KQogewogCXN0cnVjdCBrdm1fdmNwdV9pbnRyb3NwZWN0aW9uICp2Y3B1aSA9IFZDUFVJKHZjcHUp
OworCXUzMiBhY3Rpb247CiAKIAlhdG9taWNfZGVjKCZ2Y3B1aS0+cGF1c2VfcmVxdWVzdHMpOwot
CS8qIHRvIGJlIGltcGxlbWVudGVkICovCisKKwlhY3Rpb24gPSBrdm1pX21zZ19zZW5kX3ZjcHVf
cGF1c2UodmNwdSk7CisJc3dpdGNoIChhY3Rpb24pIHsKKwljYXNlIEtWTUlfRVZFTlRfQUNUSU9O
X0NPTlRJTlVFOgorCQlicmVhazsKKwlkZWZhdWx0OgorCQlrdm1pX2hhbmRsZV9jb21tb25fZXZl
bnRfYWN0aW9ucyh2Y3B1LT5rdm0sIGFjdGlvbik7CisJfQogfQogCiB2b2lkIGt2bWlfaGFuZGxl
X3JlcXVlc3RzKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2lu
dHJvc3BlY3Rpb24va3ZtaV9pbnQuaCBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQu
aAppbmRleCBjYjk5Y2IzZGIzOTYuLmY3MzU5NjAzMjg4MyAxMDA2NDQKLS0tIGEvdmlydC9rdm0v
aW50cm9zcGVjdGlvbi9rdm1pX2ludC5oCisrKyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3Zt
aV9pbnQuaApAQCAtMjcsNiArMjcsNyBAQCB2b2lkIGt2bWlfc29ja19zaHV0ZG93bihzdHJ1Y3Qg
a3ZtX2ludHJvc3BlY3Rpb24gKmt2bWkpOwogdm9pZCBrdm1pX3NvY2tfcHV0KHN0cnVjdCBrdm1f
aW50cm9zcGVjdGlvbiAqa3ZtaSk7CiBib29sIGt2bWlfbXNnX3Byb2Nlc3Moc3RydWN0IGt2bV9p
bnRyb3NwZWN0aW9uICprdm1pKTsKIGludCBrdm1pX21zZ19zZW5kX3VuaG9vayhzdHJ1Y3Qga3Zt
X2ludHJvc3BlY3Rpb24gKmt2bWkpOwordTMyIGt2bWlfbXNnX3NlbmRfdmNwdV9wYXVzZShzdHJ1
Y3Qga3ZtX3ZjcHUgKnZjcHUpOwogCiAvKiBrdm1pLmMgKi8KIHZvaWQgKmt2bWlfbXNnX2FsbG9j
KHZvaWQpOwpAQCAtMzcsNiArMzgsNyBAQCBib29sIGt2bWlfaXNfa25vd25fdm1fZXZlbnQodTgg
aWQpOwogaW50IGt2bWlfYWRkX2pvYihzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsCiAJCSB2b2lkICgq
ZmN0KShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHZvaWQgKmN0eCksCiAJCSB2b2lkICpjdHgsIHZv
aWQgKCpmcmVlX2ZjdCkodm9pZCAqY3R4KSk7Cit2b2lkIGt2bWlfcnVuX2pvYnMoc3RydWN0IGt2
bV92Y3B1ICp2Y3B1KTsKIGludCBrdm1pX2NtZF92bV9jb250cm9sX2V2ZW50cyhzdHJ1Y3Qga3Zt
X2ludHJvc3BlY3Rpb24gKmt2bWksCiAJCQkJdW5zaWduZWQgaW50IGV2ZW50X2lkLCBib29sIGVu
YWJsZSk7CiBpbnQga3ZtaV9jbWRfcmVhZF9waHlzaWNhbChzdHJ1Y3Qga3ZtICprdm0sIHU2NCBn
cGEsIHNpemVfdCBzaXplLApAQCAtNTEsNSArNTMsNiBAQCBpbnQga3ZtaV9jbWRfdmNwdV9wYXVz
ZShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGJvb2wgd2FpdCk7CiAvKiBhcmNoICovCiBpbnQga3Zt
aV9hcmNoX2NtZF92Y3B1X2dldF9pbmZvKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKIAkJCQlzdHJ1
Y3Qga3ZtaV92Y3B1X2dldF9pbmZvX3JlcGx5ICpycGwpOwordm9pZCBrdm1pX2FyY2hfc2V0dXBf
ZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtaV9ldmVudCAqZXYpOwogCiAj
ZW5kaWYKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYyBiL3Zp
cnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYwppbmRleCAxYWRlYzgzOGNkZGQuLjFkY2Qz
ZGI3NWZmMSAxMDA2NDQKLS0tIGEvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jCisr
KyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYwpAQCAtMzM3LDYgKzMzNyw2NiBA
QCBzdGF0aWMgaW50IGhhbmRsZV92Y3B1X2dldF9pbmZvKGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVf
bXNnX2pvYiAqam9iLAogCXJldHVybiBrdm1pX21zZ192Y3B1X3JlcGx5KGpvYiwgbXNnLCAwLCAm
cnBsLCBzaXplb2YocnBsKSk7CiB9CiAKK3N0YXRpYyBpbnQgY2hlY2tfZXZlbnRfcmVwbHkoY29u
c3Qgc3RydWN0IGt2bWlfbXNnX2hkciAqbXNnLAorCQkJICAgICBjb25zdCBzdHJ1Y3Qga3ZtaV9l
dmVudF9yZXBseSAqcmVwbHksCisJCQkgICAgIGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfcmVwbHkg
KmV4cGVjdGVkLAorCQkJICAgICB1OCAqYWN0aW9uLCBzaXplX3QgKnJlY2VpdmVkKQoreworCXNp
emVfdCBtc2dfc2l6ZSwgY29tbW9uLCBldmVudF9zaXplOworCWludCBlcnIgPSAtRUlOVkFMOwor
CisJaWYgKHVubGlrZWx5KG1zZy0+c2VxICE9IGV4cGVjdGVkLT5zZXEpKQorCQlyZXR1cm4gZXJy
OworCisJbXNnX3NpemUgPSBtc2ctPnNpemU7CisJY29tbW9uID0gc2l6ZW9mKHN0cnVjdCBrdm1p
X3ZjcHVfaGRyKSArIHNpemVvZigqcmVwbHkpOworCisJaWYgKGNoZWNrX3N1Yl9vdmVyZmxvdyht
c2dfc2l6ZSwgY29tbW9uLCAmZXZlbnRfc2l6ZSkpCisJCXJldHVybiBlcnI7CisKKwlpZiAodW5s
aWtlbHkoZXZlbnRfc2l6ZSA+IGV4cGVjdGVkLT5zaXplKSkKKwkJcmV0dXJuIGVycjsKKworCWlm
ICh1bmxpa2VseShyZXBseS0+cGFkZGluZzEgfHwgcmVwbHktPnBhZGRpbmcyKSkKKwkJcmV0dXJu
IGVycjsKKworCSpyZWNlaXZlZCA9IGV2ZW50X3NpemU7CisJKmFjdGlvbiA9IHJlcGx5LT5hY3Rp
b247CisJcmV0dXJuIDA7Cit9CisKK3N0YXRpYyBpbnQgaGFuZGxlX3ZjcHVfZXZlbnRfcmVwbHko
Y29uc3Qgc3RydWN0IGt2bWlfdmNwdV9tc2dfam9iICpqb2IsCisJCQkJICAgY29uc3Qgc3RydWN0
IGt2bWlfbXNnX2hkciAqbXNnLAorCQkJCSAgIGNvbnN0IHZvaWQgKnJwbCkKK3sKKwlzdHJ1Y3Qg
a3ZtX3ZjcHVfaW50cm9zcGVjdGlvbiAqdmNwdWkgPSBWQ1BVSShqb2ItPnZjcHUpOworCXN0cnVj
dCBrdm1pX3ZjcHVfcmVwbHkgKmV4cGVjdGVkID0gJnZjcHVpLT5yZXBseTsKKwljb25zdCBzdHJ1
Y3Qga3ZtaV9ldmVudF9yZXBseSAqcmVwbHkgPSBycGw7CisJY29uc3Qgdm9pZCAqcmVwbHlfZGF0
YSA9IHJlcGx5ICsgMTsKKwlzaXplX3QgdXNlZnVsLCByZWNlaXZlZDsKKwl1OCBhY3Rpb247CisK
KwlleHBlY3RlZC0+ZXJyb3IgPSBjaGVja19ldmVudF9yZXBseShtc2csIHJlcGx5LCBleHBlY3Rl
ZCwgJmFjdGlvbiwKKwkJCQkJICAgICZyZWNlaXZlZCk7CisJaWYgKHVubGlrZWx5KGV4cGVjdGVk
LT5lcnJvcikpCisJCWdvdG8gb3V0OworCisJdXNlZnVsID0gbWluKHJlY2VpdmVkLCBleHBlY3Rl
ZC0+c2l6ZSk7CisJaWYgKHVzZWZ1bCkKKwkJbWVtY3B5KGV4cGVjdGVkLT5kYXRhLCByZXBseV9k
YXRhLCB1c2VmdWwpOworCisJaWYgKGV4cGVjdGVkLT5zaXplID4gdXNlZnVsKQorCQltZW1zZXQo
KGNoYXIgKilleHBlY3RlZC0+ZGF0YSArIHVzZWZ1bCwgMCwKKwkJCWV4cGVjdGVkLT5zaXplIC0g
dXNlZnVsKTsKKworCWV4cGVjdGVkLT5hY3Rpb24gPSBhY3Rpb247CisJZXhwZWN0ZWQtPmVycm9y
ID0gMDsKKworb3V0OgorCXZjcHVpLT53YWl0aW5nX2Zvcl9yZXBseSA9IGZhbHNlOworCXJldHVy
biBleHBlY3RlZC0+ZXJyb3I7Cit9CisKIC8qCiAgKiBUaGVzZSBmdW5jdGlvbnMgYXJlIGV4ZWN1
dGVkIGZyb20gdGhlIHZDUFUgdGhyZWFkLiBUaGUgcmVjZWl2aW5nIHRocmVhZAogICogcGFzc2Vz
IHRoZSBtZXNzYWdlcyB1c2luZyBhIG5ld2x5IGFsbG9jYXRlZCAnc3RydWN0IGt2bWlfdmNwdV9t
c2dfam9iJwpAQCAtMzQ1LDYgKzQwNSw3IEBAIHN0YXRpYyBpbnQgaGFuZGxlX3ZjcHVfZ2V0X2lu
Zm8oY29uc3Qgc3RydWN0IGt2bWlfdmNwdV9tc2dfam9iICpqb2IsCiAgKi8KIHN0YXRpYyBpbnQo
KmNvbnN0IG1zZ192Y3B1W10pKGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfbXNnX2pvYiAqLAogCQkJ
ICAgICAgY29uc3Qgc3RydWN0IGt2bWlfbXNnX2hkciAqLCBjb25zdCB2b2lkICopID0geworCVtL
Vk1JX0VWRU5UXSAgICAgICAgID0gaGFuZGxlX3ZjcHVfZXZlbnRfcmVwbHksCiAJW0tWTUlfVkNQ
VV9HRVRfSU5GT10gPSBoYW5kbGVfdmNwdV9nZXRfaW5mbywKIH07CiAKQEAgLTQzMCw3ICs0OTEs
NyBAQCBzdGF0aWMgaW50IGt2bWlfbXNnX2RvX3ZtX2NtZChzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rp
b24gKmt2bWksCiAKIHN0YXRpYyBib29sIGlzX21lc3NhZ2VfYWxsb3dlZChzdHJ1Y3Qga3ZtX2lu
dHJvc3BlY3Rpb24gKmt2bWksIHUxNiBpZCkKIHsKLQlyZXR1cm4ga3ZtaV9pc19jb21tYW5kX2Fs
bG93ZWQoa3ZtaSwgaWQpOworCXJldHVybiBpZCA9PSBLVk1JX0VWRU5UIHx8IGt2bWlfaXNfY29t
bWFuZF9hbGxvd2VkKGt2bWksIGlkKTsKIH0KIAogc3RhdGljIGludCBrdm1pX21zZ192bV9yZXBs
eV9lYyhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWksCkBAIC00NTAsNyArNTExLDggQEAg
c3RhdGljIGludCBrdm1pX21zZ19oYW5kbGVfdm1fY21kKHN0cnVjdCBrdm1faW50cm9zcGVjdGlv
biAqa3ZtaSwKIAogc3RhdGljIGJvb2wgdmNwdV9jYW5faGFuZGxlX21lc3NhZ2VzKHN0cnVjdCBr
dm1fdmNwdSAqdmNwdSkKIHsKLQlyZXR1cm4gdmNwdS0+YXJjaC5tcF9zdGF0ZSAhPSBLVk1fTVBf
U1RBVEVfVU5JTklUSUFMSVpFRDsKKwlyZXR1cm4gVkNQVUkodmNwdSktPndhaXRpbmdfZm9yX3Jl
cGx5CisJCXx8IHZjcHUtPmFyY2gubXBfc3RhdGUgIT0gS1ZNX01QX1NUQVRFX1VOSU5JVElBTEla
RUQ7CiB9CiAKIHN0YXRpYyBpbnQga3ZtaV9nZXRfdmNwdV9pZl9yZWFkeShzdHJ1Y3Qga3ZtX2lu
dHJvc3BlY3Rpb24gKmt2bWksCkBAIC01NTQsNiArNjE2LDEzIEBAIHN0YXRpYyB2b2lkIGt2bWlf
c2V0dXBfZXZlbnRfY29tbW9uKHN0cnVjdCBrdm1pX2V2ZW50ICpldiwgdTMyIGV2X2lkLAogCWV2
LT5zaXplID0gc2l6ZW9mKCpldik7CiB9CiAKK3N0YXRpYyB2b2lkIGt2bWlfc2V0dXBfZXZlbnQo
c3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtaV9ldmVudCAqZXYsCisJCQkgICAgIHUz
MiBldl9pZCkKK3sKKwlrdm1pX3NldHVwX2V2ZW50X2NvbW1vbihldiwgZXZfaWQsIGt2bV92Y3B1
X2dldF9pZHgodmNwdSkpOworCWt2bWlfYXJjaF9zZXR1cF9ldmVudCh2Y3B1LCBldik7Cit9CisK
IGludCBrdm1pX21zZ19zZW5kX3VuaG9vayhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWkp
CiB7CiAJc3RydWN0IGt2bWlfbXNnX2hkciBoZHI7CkBAIC01NzAsMyArNjM5LDg1IEBAIGludCBr
dm1pX21zZ19zZW5kX3VuaG9vayhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWkpCiAKIAly
ZXR1cm4ga3ZtaV9zb2NrX3dyaXRlKGt2bWksIHZlYywgbiwgbXNnX3NpemUpOwogfQorCitzdGF0
aWMgaW50IGt2bWlfd2FpdF9mb3JfcmVwbHkoc3RydWN0IGt2bV92Y3B1ICp2Y3B1KQoreworCXN0
cnVjdCByY3V3YWl0ICp3YWl0cCA9IGt2bV9hcmNoX3ZjcHVfZ2V0X3dhaXQodmNwdSk7CisJc3Ry
dWN0IGt2bV92Y3B1X2ludHJvc3BlY3Rpb24gKnZjcHVpID0gVkNQVUkodmNwdSk7CisJaW50IGVy
ciA9IDA7CisKKwl3aGlsZSAodmNwdWktPndhaXRpbmdfZm9yX3JlcGx5ICYmICFlcnIpIHsKKwkJ
a3ZtaV9ydW5fam9icyh2Y3B1KTsKKworCQllcnIgPSByY3V3YWl0X3dhaXRfZXZlbnQod2FpdHAs
CisJCQkhdmNwdWktPndhaXRpbmdfZm9yX3JlcGx5IHx8CisJCQkhbGlzdF9lbXB0eSgmdmNwdWkt
PmpvYl9saXN0KSwKKwkJCVRBU0tfS0lMTEFCTEUpOworCX0KKworCXJldHVybiBlcnI7Cit9CisK
K3N0YXRpYyB2b2lkIGt2bWlfc2V0dXBfdmNwdV9yZXBseShzdHJ1Y3Qga3ZtX3ZjcHVfaW50cm9z
cGVjdGlvbiAqdmNwdWksCisJCQkJICB1MzIgZXZlbnRfc2VxLCB2b2lkICpycGwsIHNpemVfdCBy
cGxfc2l6ZSkKK3sKKwltZW1zZXQoJnZjcHVpLT5yZXBseSwgMCwgc2l6ZW9mKHZjcHVpLT5yZXBs
eSkpOworCisJdmNwdWktPnJlcGx5LnNlcSA9IGV2ZW50X3NlcTsKKwl2Y3B1aS0+cmVwbHkuZGF0
YSA9IHJwbDsKKwl2Y3B1aS0+cmVwbHkuc2l6ZSA9IHJwbF9zaXplOworCXZjcHVpLT5yZXBseS5l
cnJvciA9IC1FSU5UUjsKKwl2Y3B1aS0+d2FpdGluZ19mb3JfcmVwbHkgPSB0cnVlOworfQorCitz
dGF0aWMgaW50IGt2bWlfc2VuZF9ldmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHUzMiBldl9p
ZCwKKwkJCSAgIHZvaWQgKmV2LCBzaXplX3QgZXZfc2l6ZSwKKwkJCSAgIHZvaWQgKnJwbCwgc2l6
ZV90IHJwbF9zaXplLCBpbnQgKmFjdGlvbikKK3sKKwlzdHJ1Y3Qga3ZtaV9tc2dfaGRyIGhkcjsK
KwlzdHJ1Y3Qga3ZtaV9ldmVudCBjb21tb247CisJc3RydWN0IGt2ZWMgdmVjW10gPSB7CisJCXsu
aW92X2Jhc2UgPSAmaGRyLAkuaW92X2xlbiA9IHNpemVvZihoZHIpCSB9LAorCQl7Lmlvdl9iYXNl
ID0gJmNvbW1vbiwJLmlvdl9sZW4gPSBzaXplb2YoY29tbW9uKX0sCisJCXsuaW92X2Jhc2UgPSBl
diwJLmlvdl9sZW4gPSBldl9zaXplCSB9LAorCX07CisJc2l6ZV90IG1zZ19zaXplID0gc2l6ZW9m
KGhkcikgKyBzaXplb2YoY29tbW9uKSArIGV2X3NpemU7CisJc2l6ZV90IG4gPSBBUlJBWV9TSVpF
KHZlYykgLSAoZXZfc2l6ZSA9PSAwID8gMSA6IDApOworCXN0cnVjdCBrdm1fdmNwdV9pbnRyb3Nw
ZWN0aW9uICp2Y3B1aSA9IFZDUFVJKHZjcHUpOworCXN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAq
a3ZtaSA9IEtWTUkodmNwdS0+a3ZtKTsKKwlpbnQgZXJyOworCisJa3ZtaV9zZXR1cF9ldmVudF9t
c2dfaGRyKGt2bWksICZoZHIsIG1zZ19zaXplKTsKKwlrdm1pX3NldHVwX2V2ZW50KHZjcHUsICZj
b21tb24sIGV2X2lkKTsKKwlrdm1pX3NldHVwX3ZjcHVfcmVwbHkodmNwdWksIGhkci5zZXEsIHJw
bCwgcnBsX3NpemUpOworCisJZXJyID0ga3ZtaV9zb2NrX3dyaXRlKGt2bWksIHZlYywgbiwgbXNn
X3NpemUpOworCWlmIChlcnIpCisJCWdvdG8gb3V0OworCisJZXJyID0ga3ZtaV93YWl0X2Zvcl9y
ZXBseSh2Y3B1KTsKKwlpZiAoZXJyKQorCQlnb3RvIG91dDsKKworCWVyciA9IHZjcHVpLT5yZXBs
eS5lcnJvcjsKKworCWlmICghZXJyKQorCQkqYWN0aW9uID0gdmNwdWktPnJlcGx5LmFjdGlvbjsK
Kworb3V0OgorCWlmIChlcnIpCisJCWt2bWlfc29ja19zaHV0ZG93bihrdm1pKTsKKwlyZXR1cm4g
ZXJyOworfQorCit1MzIga3ZtaV9tc2dfc2VuZF92Y3B1X3BhdXNlKHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSkKK3sKKwlpbnQgZXJyLCBhY3Rpb247CisKKwllcnIgPSBrdm1pX3NlbmRfZXZlbnQodmNw
dSwgS1ZNSV9FVkVOVF9QQVVTRV9WQ1BVLCBOVUxMLCAwLAorCQkJICAgICAgTlVMTCwgMCwgJmFj
dGlvbik7CisJaWYgKGVycikKKwkJcmV0dXJuIEtWTUlfRVZFTlRfQUNUSU9OX0NPTlRJTlVFOwor
CisJcmV0dXJuIGFjdGlvbjsKK30KX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX18KVmlydHVhbGl6YXRpb24gbWFpbGluZyBsaXN0ClZpcnR1YWxpemF0aW9uQGxp
c3RzLmxpbnV4LWZvdW5kYXRpb24ub3JnCmh0dHBzOi8vbGlzdHMubGludXhmb3VuZGF0aW9uLm9y
Zy9tYWlsbWFuL2xpc3RpbmZvL3ZpcnR1YWxpemF0aW9u
