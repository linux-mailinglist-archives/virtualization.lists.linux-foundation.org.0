Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
	by mail.lfdr.de (Postfix) with ESMTPS id A41402C3CDD
	for <lists.virtualization@lfdr.de>; Wed, 25 Nov 2020 10:52:03 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by fraxinus.osuosl.org (Postfix) with ESMTP id 5FE9F86B01;
	Wed, 25 Nov 2020 09:52:02 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id 0zf0epRN82cs; Wed, 25 Nov 2020 09:51:59 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by fraxinus.osuosl.org (Postfix) with ESMTP id 2888786AC9;
	Wed, 25 Nov 2020 09:51:58 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 1BD6EC0052;
	Wed, 25 Nov 2020 09:51:58 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 5AD42C0052
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:51:55 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by silver.osuosl.org (Postfix) with ESMTP id 3F7F12743A
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:51:55 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id IHuFJTz66dxw
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:51:55 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by silver.osuosl.org (Postfix) with ESMTPS id 991032746F
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:51:54 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp01.buh.bitdefender.com [10.17.80.75])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 76477305D468; Wed, 25 Nov 2020 11:35:50 +0200 (EET)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 514363072785;
 Wed, 25 Nov 2020 11:35:50 +0200 (EET)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v10 47/81] KVM: introspection: add KVMI_VCPU_GET_INFO
Date: Wed, 25 Nov 2020 11:35:26 +0200
Message-Id: <20201125093600.2766-48-alazar@bitdefender.com>
In-Reply-To: <20201125093600.2766-1-alazar@bitdefender.com>
References: <20201125093600.2766-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 =?UTF-8?q?Mihai=20Don=C8=9Bu?= <mdontu@bitdefender.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

RnJvbTogTWloYWkgRG9uyJt1IDxtZG9udHVAYml0ZGVmZW5kZXIuY29tPgoKVGhpcyBjb21tYW5k
IHJldHVybnMgdGhlIFRTQyBmcmVxdWVuY3kgKGluIEhaKSBmb3IgdGhlIHNwZWNpZmllZAp2Q1BV
IGlmIGF2YWlsYWJsZSAob3RoZXJ3aXNlIGl0IHJldHVybnMgemVybykuCgpTaWduZWQtb2ZmLWJ5
OiBNaWhhaSBEb27Im3UgPG1kb250dUBiaXRkZWZlbmRlci5jb20+CkNvLWRldmVsb3BlZC1ieTog
QWRhbGJlcnQgTGF6xINyIDxhbGF6YXJAYml0ZGVmZW5kZXIuY29tPgpTaWduZWQtb2ZmLWJ5OiBB
ZGFsYmVydCBMYXrEg3IgPGFsYXphckBiaXRkZWZlbmRlci5jb20+Ci0tLQogRG9jdW1lbnRhdGlv
bi92aXJ0L2t2bS9rdm1pLnJzdCAgICAgICAgICAgICAgIHwgIDI5ICsrKysKIGFyY2gveDg2L2lu
Y2x1ZGUvYXNtL2t2bWlfaG9zdC5oICAgICAgICAgICAgICB8ICAgMiArCiBhcmNoL3g4Ni9pbmNs
dWRlL3VhcGkvYXNtL2t2bWkuaCAgICAgICAgICAgICAgfCAgMTMgKysKIGFyY2gveDg2L2t2bS9r
dm1pX21zZy5jICAgICAgICAgICAgICAgICAgICAgICB8ICAxNCArKwogaW5jbHVkZS91YXBpL2xp
bnV4L2t2bWkuaCAgICAgICAgICAgICAgICAgICAgIHwgICAyICsKIC4uLi90ZXN0aW5nL3NlbGZ0
ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jICB8IDE0NCArKysrKysrKysrKysrKysrKy0KIHZp
cnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaCAgICAgICAgICAgICB8ICAgMyArCiB2aXJ0
L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMgICAgICAgICAgICAgfCAgIDkgKysKIDggZmls
ZXMgY2hhbmdlZCwgMjE1IGluc2VydGlvbnMoKyksIDEgZGVsZXRpb24oLSkKIGNyZWF0ZSBtb2Rl
IDEwMDY0NCBhcmNoL3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWkuaAoKZGlmZiAtLWdpdCBhL0Rv
Y3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QgYi9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2
bWkucnN0CmluZGV4IDRkMzQwNTI4ZDJmNC4uOTAyY2VkNGRkMGM0IDEwMDY0NAotLS0gYS9Eb2N1
bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CisrKyBiL0RvY3VtZW50YXRpb24vdmlydC9rdm0v
a3ZtaS5yc3QKQEAgLTQ0MSw2ICs0NDEsMzUgQEAgb25lIHBhZ2UgKG9mZnNldCArIHNpemUgPD0g
UEFHRV9TSVpFKS4KICogLUtWTV9FSU5WQUwgLSB0aGUgc3BlY2lmaWVkIGdwYS9zaXplIHBhaXIg
aXMgaW52YWxpZAogKiAtS1ZNX0VJTlZBTCAtIHRoZSBwYWRkaW5nIGlzIG5vdCB6ZXJvCiAKKzgu
IEtWTUlfVkNQVV9HRVRfSU5GTworLS0tLS0tLS0tLS0tLS0tLS0tLS0tCisKKzpBcmNoaXRlY3R1
cmVzOiB4ODYKKzpWZXJzaW9uczogPj0gMQorOlBhcmFtZXRlcnM6CisKKzo6CisKKwlzdHJ1Y3Qg
a3ZtaV92Y3B1X2hkcjsKKworOlJldHVybnM6CisKKzo6CisKKwlzdHJ1Y3Qga3ZtaV9lcnJvcl9j
b2RlOworCXN0cnVjdCBrdm1pX3ZjcHVfZ2V0X2luZm9fcmVwbHkgeworCQlfX3U2NCB0c2Nfc3Bl
ZWQ7CisJfTsKKworUmV0dXJucyB0aGUgVFNDIGZyZXF1ZW5jeSAoaW4gSFopIGZvciB0aGUgc3Bl
Y2lmaWVkIHZDUFUgaWYgYXZhaWxhYmxlCisob3RoZXJ3aXNlIGl0IHJldHVybnMgemVybykuCisK
KzpFcnJvcnM6CisKKyogLUtWTV9FSU5WQUwgLSB0aGUgcGFkZGluZyBpcyBub3QgemVybworKiAt
S1ZNX0VJTlZBTCAtIHRoZSBzZWxlY3RlZCB2Q1BVIGlzIGludmFsaWQKKyogLUtWTV9FQUdBSU4g
LSB0aGUgc2VsZWN0ZWQgdkNQVSBjYW4ndCBiZSBpbnRyb3NwZWN0ZWQgeWV0CisKIEV2ZW50cwog
PT09PT09CiAKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bWlfaG9zdC5oIGIv
YXJjaC94ODYvaW5jbHVkZS9hc20va3ZtaV9ob3N0LmgKaW5kZXggMzYwYTU3ZGQ5MDE5Li4wNWFk
ZTNhMTZiMjQgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bWlfaG9zdC5oCisr
KyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bWlfaG9zdC5oCkBAIC0yLDYgKzIsOCBAQAogI2lm
bmRlZiBfQVNNX1g4Nl9LVk1JX0hPU1RfSAogI2RlZmluZSBfQVNNX1g4Nl9LVk1JX0hPU1RfSAog
CisjaW5jbHVkZSA8YXNtL2t2bWkuaD4KKwogc3RydWN0IGt2bV92Y3B1X2FyY2hfaW50cm9zcGVj
dGlvbiB7CiB9OwogCmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWku
aCBiL2FyY2gveDg2L2luY2x1ZGUvdWFwaS9hc20va3ZtaS5oCm5ldyBmaWxlIG1vZGUgMTAwNjQ0
CmluZGV4IDAwMDAwMDAwMDAwMC4uMmI2MTkyZTFhOWE0Ci0tLSAvZGV2L251bGwKKysrIGIvYXJj
aC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKQEAgLTAsMCArMSwxMyBAQAorLyogU1BEWC1M
aWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgV0lUSCBMaW51eC1zeXNjYWxsLW5vdGUgKi8KKyNp
Zm5kZWYgX1VBUElfQVNNX1g4Nl9LVk1JX0gKKyNkZWZpbmUgX1VBUElfQVNNX1g4Nl9LVk1JX0gK
KworLyoKKyAqIEtWTSBpbnRyb3NwZWN0aW9uIC0geDg2IHNwZWNpZmljIHN0cnVjdHVyZXMgYW5k
IGRlZmluaXRpb25zCisgKi8KKworc3RydWN0IGt2bWlfdmNwdV9nZXRfaW5mb19yZXBseSB7CisJ
X191NjQgdHNjX3NwZWVkOworfTsKKworI2VuZGlmIC8qIF9VQVBJX0FTTV9YODZfS1ZNSV9IICov
CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9rdm0va3ZtaV9tc2cuYyBiL2FyY2gveDg2L2t2bS9rdm1p
X21zZy5jCmluZGV4IDBmNDcxN2NhNWZhOC4uNzc1NTJiZjUwOTg0IDEwMDY0NAotLS0gYS9hcmNo
L3g4Ni9rdm0va3ZtaV9tc2cuYworKysgYi9hcmNoL3g4Ni9rdm0va3ZtaV9tc2cuYwpAQCAtOCw3
ICs4LDIxIEBACiAKICNpbmNsdWRlICIuLi8uLi8uLi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2
bWlfaW50LmgiCiAKK3N0YXRpYyBpbnQgaGFuZGxlX3ZjcHVfZ2V0X2luZm8oY29uc3Qgc3RydWN0
IGt2bWlfdmNwdV9tc2dfam9iICpqb2IsCisJCQkJY29uc3Qgc3RydWN0IGt2bWlfbXNnX2hkciAq
bXNnLAorCQkJCWNvbnN0IHZvaWQgKnJlcSkKK3sKKwlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9pbmZv
X3JlcGx5IHJwbDsKKworCW1lbXNldCgmcnBsLCAwLCBzaXplb2YocnBsKSk7CisJaWYgKGt2bV9o
YXNfdHNjX2NvbnRyb2wpCisJCXJwbC50c2Nfc3BlZWQgPSAxMDAwdWwgKiBqb2ItPnZjcHUtPmFy
Y2gudmlydHVhbF90c2Nfa2h6OworCisJcmV0dXJuIGt2bWlfbXNnX3ZjcHVfcmVwbHkoam9iLCBt
c2csIDAsICZycGwsIHNpemVvZihycGwpKTsKK30KKwogc3RhdGljIGt2bWlfdmNwdV9tc2dfam9i
X2ZjdCBjb25zdCBtc2dfdmNwdVtdID0geworCVtLVk1JX1ZDUFVfR0VUX0lORk9dID0gaGFuZGxl
X3ZjcHVfZ2V0X2luZm8sCiB9OwogCiBrdm1pX3ZjcHVfbXNnX2pvYl9mY3Qga3ZtaV9hcmNoX3Zj
cHVfbXNnX2hhbmRsZXIodTE2IGlkKQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS91YXBpL2xpbnV4L2t2
bWkuaCBiL2luY2x1ZGUvdWFwaS9saW51eC9rdm1pLmgKaW5kZXggN2JhMWM4NzU4YWJhLi5kYTc2
NjQyNzIzMWUgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvdWFwaS9saW51eC9rdm1pLmgKKysrIGIvaW5j
bHVkZS91YXBpL2xpbnV4L2t2bWkuaApAQCAtMzEsNiArMzEsOCBAQCBlbnVtIHsKIH07CiAKIGVu
dW0geworCUtWTUlfVkNQVV9HRVRfSU5GTyA9IEtWTUlfVkNQVV9NRVNTQUdFX0lEKDEpLAorCiAJ
S1ZNSV9ORVhUX1ZDUFVfTUVTU0FHRQogfTsKIApkaWZmIC0tZ2l0IGEvdG9vbHMvdGVzdGluZy9z
ZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYyBiL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3Rz
L2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKaW5kZXggYjQ5M2VkYjUzNGIwLi45MzUwYmE4YjdmOWIg
MTAwNjQ0Ci0tLSBhL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0
LmMKKysrIGIvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYwpA
QCAtOSw2ICs5LDcgQEAKICNpbmNsdWRlIDxzeXMvdHlwZXMuaD4KICNpbmNsdWRlIDxzeXMvc29j
a2V0Lmg+CiAjaW5jbHVkZSA8dGltZS5oPgorI2luY2x1ZGUgPHB0aHJlYWQuaD4KIAogI2luY2x1
ZGUgInRlc3RfdXRpbC5oIgogCkBAIC0xOCw2ICsxOSw3IEBACiAKICNpbmNsdWRlICJsaW51eC9r
dm1fcGFyYS5oIgogI2luY2x1ZGUgImxpbnV4L2t2bWkuaCIKKyNpbmNsdWRlICJhc20va3ZtaS5o
IgogCiAjZGVmaW5lIFZDUFVfSUQgMQogCkBAIC0yNSwxMiArMjcsNDYgQEAgc3RhdGljIGludCBz
b2NrZXRfcGFpclsyXTsKICNkZWZpbmUgS3ZtX3NvY2tldCAgICAgICBzb2NrZXRfcGFpclswXQog
I2RlZmluZSBVc2Vyc3BhY2Vfc29ja2V0IHNvY2tldF9wYWlyWzFdCiAKK3N0YXRpYyBpbnQgdGVz
dF9pZDsKIHN0YXRpYyB2bV92YWRkcl90IHRlc3RfZ3ZhOwogc3RhdGljIHZvaWQgKnRlc3RfaHZh
Owogc3RhdGljIHZtX3BhZGRyX3QgdGVzdF9ncGE7CiAKIHN0YXRpYyBpbnQgcGFnZV9zaXplOwog
CitzdHJ1Y3QgdmNwdV93b3JrZXJfZGF0YSB7CisJc3RydWN0IGt2bV92bSAqdm07CisJaW50IHZj
cHVfaWQ7CisJaW50IHRlc3RfaWQ7Cit9OworCitlbnVtIHsKKwlHVUVTVF9URVNUX05PT1AgPSAw
LAorfTsKKworI2RlZmluZSBHVUVTVF9SRVFVRVNUX1RFU1QoKSAgICAgR1VFU1RfU1lOQygwKQor
I2RlZmluZSBHVUVTVF9TSUdOQUxfVEVTVF9ET05FKCkgR1VFU1RfU1lOQygxKQorCisjZGVmaW5l
IEhPU1RfU0VORF9URVNUKHVjKSAgICAgICAodWMuY21kID09IFVDQUxMX1NZTkMgJiYgdWMuYXJn
c1sxXSA9PSAwKQorI2RlZmluZSBIT1NUX1RFU1RfRE9ORSh1YykgICAgICAgKHVjLmNtZCA9PSBV
Q0FMTF9TWU5DICYmIHVjLmFyZ3NbMV0gPT0gMSkKKworc3RhdGljIGludCBndWVzdF90ZXN0X2lk
KHZvaWQpCit7CisJR1VFU1RfUkVRVUVTVF9URVNUKCk7CisJcmV0dXJuIFJFQURfT05DRSh0ZXN0
X2lkKTsKK30KKworc3RhdGljIHZvaWQgZ3Vlc3RfY29kZSh2b2lkKQoreworCXdoaWxlICh0cnVl
KSB7CisJCXN3aXRjaCAoZ3Vlc3RfdGVzdF9pZCgpKSB7CisJCWNhc2UgR1VFU1RfVEVTVF9OT09Q
OgorCQkJYnJlYWs7CisJCX0KKwkJR1VFU1RfU0lHTkFMX1RFU1RfRE9ORSgpOworCX0KK30KKwog
dm9pZCBzZXR1cF9zb2NrZXQodm9pZCkKIHsKIAlpbnQgcjsKQEAgLTUzMCw2ICs1NjYsMTExIEBA
IHN0YXRpYyB2b2lkIHRlc3RfbWVtb3J5X2FjY2VzcyhzdHJ1Y3Qga3ZtX3ZtICp2bSkKIAlyZWFk
X2ludmFsaWRfZ3Vlc3RfcGFnZSh2bSk7CiB9CiAKK3N0YXRpYyB2b2lkICp2Y3B1X3dvcmtlcih2
b2lkICpkYXRhKQoreworCXN0cnVjdCB2Y3B1X3dvcmtlcl9kYXRhICpjdHggPSBkYXRhOworCXN0
cnVjdCBrdm1fcnVuICpydW47CisKKwlydW4gPSB2Y3B1X3N0YXRlKGN0eC0+dm0sIGN0eC0+dmNw
dV9pZCk7CisKKwl3aGlsZSAodHJ1ZSkgeworCQlzdHJ1Y3QgdWNhbGwgdWM7CisKKwkJdmNwdV9y
dW4oY3R4LT52bSwgY3R4LT52Y3B1X2lkKTsKKworCQlURVNUX0FTU0VSVChydW4tPmV4aXRfcmVh
c29uID09IEtWTV9FWElUX0lPLAorCQkJInZjcHVfcnVuKCkgZmFpbGVkLCB0ZXN0X2lkICVkLCBl
eGl0IHJlYXNvbiAldSAoJXMpXG4iLAorCQkJY3R4LT50ZXN0X2lkLCBydW4tPmV4aXRfcmVhc29u
LAorCQkJZXhpdF9yZWFzb25fc3RyKHJ1bi0+ZXhpdF9yZWFzb24pKTsKKworCQlURVNUX0FTU0VS
VChnZXRfdWNhbGwoY3R4LT52bSwgY3R4LT52Y3B1X2lkLCAmdWMpLAorCQkJIk5vIGd1ZXN0IHJl
cXVlc3RcbiIpOworCisJCWlmIChIT1NUX1NFTkRfVEVTVCh1YykpIHsKKwkJCXRlc3RfaWQgPSBS
RUFEX09OQ0UoY3R4LT50ZXN0X2lkKTsKKwkJCXN5bmNfZ2xvYmFsX3RvX2d1ZXN0KGN0eC0+dm0s
IHRlc3RfaWQpOworCQl9IGVsc2UgaWYgKEhPU1RfVEVTVF9ET05FKHVjKSkgeworCQkJYnJlYWs7
CisJCX0KKwl9CisKKwlyZXR1cm4gTlVMTDsKK30KKworc3RhdGljIHB0aHJlYWRfdCBzdGFydF92
Y3B1X3dvcmtlcihzdHJ1Y3QgdmNwdV93b3JrZXJfZGF0YSAqZGF0YSkKK3sKKwlwdGhyZWFkX3Qg
dGhyZWFkX2lkOworCisJcHRocmVhZF9jcmVhdGUoJnRocmVhZF9pZCwgTlVMTCwgdmNwdV93b3Jr
ZXIsIGRhdGEpOworCisJcmV0dXJuIHRocmVhZF9pZDsKK30KKworc3RhdGljIHZvaWQgd2FpdF92
Y3B1X3dvcmtlcihwdGhyZWFkX3QgdmNwdV90aHJlYWQpCit7CisJcHRocmVhZF9qb2luKHZjcHVf
dGhyZWFkLCBOVUxMKTsKK30KKworc3RhdGljIGludCBkb192Y3B1X2NvbW1hbmQoc3RydWN0IGt2
bV92bSAqdm0sIGludCBjbWRfaWQsCisJCQkgICBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICpyZXEsIHNp
emVfdCByZXFfc2l6ZSwKKwkJCSAgIHZvaWQgKnJwbCwgc2l6ZV90IHJwbF9zaXplKQoreworCXN0
cnVjdCB2Y3B1X3dvcmtlcl9kYXRhIGRhdGEgPSB7LnZtID0gdm0sIC52Y3B1X2lkID0gVkNQVV9J
RCB9OworCXB0aHJlYWRfdCB2Y3B1X3RocmVhZDsKKwlpbnQgcjsKKworCXZjcHVfdGhyZWFkID0g
c3RhcnRfdmNwdV93b3JrZXIoJmRhdGEpOworCisJciA9IGRvX2NvbW1hbmQoY21kX2lkLCByZXEs
IHJlcV9zaXplLCBycGwsIHJwbF9zaXplKTsKKworCXdhaXRfdmNwdV93b3JrZXIodmNwdV90aHJl
YWQpOworCXJldHVybiByOworfQorCitzdGF0aWMgaW50IGRvX3ZjcHUwX2NvbW1hbmQoc3RydWN0
IGt2bV92bSAqdm0sIGludCBjbWRfaWQsCisJCQkgICAgc3RydWN0IGt2bWlfbXNnX2hkciAqcmVx
LCBzaXplX3QgcmVxX3NpemUsCisJCQkgICAgdm9pZCAqcnBsLCBzaXplX3QgcnBsX3NpemUpCit7
CisJc3RydWN0IGt2bWlfdmNwdV9oZHIgKnZjcHVfaGRyID0gKHN0cnVjdCBrdm1pX3ZjcHVfaGRy
ICopKHJlcSArIDEpOworCisJdmNwdV9oZHItPnZjcHUgPSAwOworCisJcmV0dXJuIGRvX3ZjcHVf
Y29tbWFuZCh2bSwgY21kX2lkLCByZXEsIHJlcV9zaXplLCBycGwsIHJwbF9zaXplKTsKK30KKwor
c3RhdGljIHZvaWQgdGVzdF92Y3B1MF9jb21tYW5kKHN0cnVjdCBrdm1fdm0gKnZtLCBpbnQgY21k
X2lkLAorCQkJICAgICAgIHN0cnVjdCBrdm1pX21zZ19oZHIgKnJlcSwgc2l6ZV90IHJlcV9zaXpl
LAorCQkJICAgICAgIHZvaWQgKnJwbCwgc2l6ZV90IHJwbF9zaXplLAorCQkJICAgICAgIGludCBl
eHBlY3RlZF9lcnIpCit7CisJaW50IHI7CisKKwlyID0gZG9fdmNwdTBfY29tbWFuZCh2bSwgY21k
X2lkLCByZXEsIHJlcV9zaXplLCBycGwsIHJwbF9zaXplKTsKKwlURVNUX0FTU0VSVChyID09IGV4
cGVjdGVkX2VyciwKKwkJIkNvbW1hbmQgJWQgZmFpbGVkLCBlcnJvciAlZCAoJXMpIGluc3RlYWQg
b2YgJWQgKCVzKVxuIiwKKwkJY21kX2lkLCAtciwga3ZtX3N0cmVycm9yKC1yKSwKKwkJZXhwZWN0
ZWRfZXJyLCBrdm1fc3RyZXJyb3IoZXhwZWN0ZWRfZXJyKSk7Cit9CisKK3N0YXRpYyB2b2lkIHRl
c3RfY21kX3ZjcHVfZ2V0X2luZm8oc3RydWN0IGt2bV92bSAqdm0pCit7CisJc3RydWN0IHsKKwkJ
c3RydWN0IGt2bWlfbXNnX2hkciBoZHI7CisJCXN0cnVjdCBrdm1pX3ZjcHVfaGRyIHZjcHVfaGRy
OworCX0gcmVxID0ge307CisJc3RydWN0IGt2bWlfdmNwdV9nZXRfaW5mb19yZXBseSBycGw7CisJ
aW50IGNtZF9pZCA9IEtWTUlfVkNQVV9HRVRfSU5GTzsKKworCXRlc3RfdmNwdTBfY29tbWFuZCh2
bSwgY21kX2lkLCAmcmVxLmhkciwgc2l6ZW9mKHJlcSksCisJCQkgICAmcnBsLCBzaXplb2YocnBs
KSwgMCk7CisKKwlwcl9kZWJ1ZygidHNjX3NwZWVkOiAlbGx1IEhaXG4iLCBycGwudHNjX3NwZWVk
KTsKKworCXJlcS52Y3B1X2hkci52Y3B1ID0gOTk7CisJdGVzdF92bV9jb21tYW5kKGNtZF9pZCwg
JnJlcS5oZHIsIHNpemVvZihyZXEpLAorCQkJJnJwbCwgc2l6ZW9mKHJwbCksIC1LVk1fRUlOVkFM
KTsKK30KKwogc3RhdGljIHZvaWQgdGVzdF9pbnRyb3NwZWN0aW9uKHN0cnVjdCBrdm1fdm0gKnZt
KQogewogCXNyYW5kb20odGltZSgwKSk7CkBAIC01NDQsNiArNjg1LDcgQEAgc3RhdGljIHZvaWQg
dGVzdF9pbnRyb3NwZWN0aW9uKHN0cnVjdCBrdm1fdm0gKnZtKQogCXRlc3RfZXZlbnRfdW5ob29r
KHZtKTsKIAl0ZXN0X2NtZF92bV9jb250cm9sX2V2ZW50cyh2bSk7CiAJdGVzdF9tZW1vcnlfYWNj
ZXNzKHZtKTsKKwl0ZXN0X2NtZF92Y3B1X2dldF9pbmZvKHZtKTsKIAogCXVuaG9va19pbnRyb3Nw
ZWN0aW9uKHZtKTsKIH0KQEAgLTU2Niw3ICs3MDgsNyBAQCBpbnQgbWFpbihpbnQgYXJnYywgY2hh
ciAqYXJndltdKQogCQlleGl0KEtTRlRfU0tJUCk7CiAJfQogCi0Jdm0gPSB2bV9jcmVhdGVfZGVm
YXVsdChWQ1BVX0lELCAwLCBOVUxMKTsKKwl2bSA9IHZtX2NyZWF0ZV9kZWZhdWx0KFZDUFVfSUQs
IDAsIGd1ZXN0X2NvZGUpOwogCXZjcHVfc2V0X2NwdWlkKHZtLCBWQ1BVX0lELCBrdm1fZ2V0X3N1
cHBvcnRlZF9jcHVpZCgpKTsKIAogCXBhZ2Vfc2l6ZSA9IGdldHBhZ2VzaXplKCk7CmRpZmYgLS1n
aXQgYS92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmggYi92aXJ0L2t2bS9pbnRyb3Nw
ZWN0aW9uL2t2bWlfaW50LmgKaW5kZXggYzNlNGRhN2U3ZjIwLi4xMjZlNzIyMDE1MTggMTAwNjQ0
Ci0tLSBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaAorKysgYi92aXJ0L2t2bS9p
bnRyb3NwZWN0aW9uL2t2bWlfaW50LmgKQEAgLTMyLDYgKzMyLDkgQEAgdm9pZCBrdm1pX3NvY2tf
c2h1dGRvd24oc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pKTsKIHZvaWQga3ZtaV9zb2Nr
X3B1dChzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWkpOwogYm9vbCBrdm1pX21zZ19wcm9j
ZXNzKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSk7CiBpbnQga3ZtaV9tc2dfc2VuZF91
bmhvb2soc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pKTsKK2ludCBrdm1pX21zZ192Y3B1
X3JlcGx5KGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfbXNnX2pvYiAqam9iLAorCQkJY29uc3Qgc3Ry
dWN0IGt2bWlfbXNnX2hkciAqbXNnLCBpbnQgZXJyLAorCQkJY29uc3Qgdm9pZCAqcnBsLCBzaXpl
X3QgcnBsX3NpemUpOwogCiAvKiBrdm1pLmMgKi8KIHZvaWQgKmt2bWlfbXNnX2FsbG9jKHZvaWQp
OwpkaWZmIC0tZ2l0IGEvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jIGIvdmlydC9r
dm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jCmluZGV4IDZmMmZlMjQ1YThiMS4uZWZkMDRiNGFh
NGZmIDEwMDY0NAotLS0gYS92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMKKysrIGIv
dmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jCkBAIC0xMDUsNiArMTA1LDE1IEBAIHN0
YXRpYyBpbnQga3ZtaV9tc2dfdm1fcmVwbHkoc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1p
LAogCXJldHVybiBrdm1pX21zZ19yZXBseShrdm1pLCBtc2csIGVyciwgcnBsLCBycGxfc2l6ZSk7
CiB9CiAKK2ludCBrdm1pX21zZ192Y3B1X3JlcGx5KGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfbXNn
X2pvYiAqam9iLAorCQkJY29uc3Qgc3RydWN0IGt2bWlfbXNnX2hkciAqbXNnLCBpbnQgZXJyLAor
CQkJY29uc3Qgdm9pZCAqcnBsLCBzaXplX3QgcnBsX3NpemUpCit7CisJc3RydWN0IGt2bV9pbnRy
b3NwZWN0aW9uICprdm1pID0gS1ZNSShqb2ItPnZjcHUtPmt2bSk7CisKKwlyZXR1cm4ga3ZtaV9t
c2dfcmVwbHkoa3ZtaSwgbXNnLCBlcnIsIHJwbCwgcnBsX3NpemUpOworfQorCiBzdGF0aWMgc3Ry
dWN0IGt2bV92Y3B1ICprdm1pX2dldF92Y3B1KHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3Zt
aSwKIAkJCQkgICAgICB1bnNpZ25lZCBpbnQgdmNwdV9pZHgpCiB7Cl9fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fClZpcnR1YWxpemF0aW9uIG1haWxpbmcgbGlz
dApWaXJ0dWFsaXphdGlvbkBsaXN0cy5saW51eC1mb3VuZGF0aW9uLm9yZwpodHRwczovL2xpc3Rz
LmxpbnV4Zm91bmRhdGlvbi5vcmcvbWFpbG1hbi9saXN0aW5mby92aXJ0dWFsaXphdGlvbg==
