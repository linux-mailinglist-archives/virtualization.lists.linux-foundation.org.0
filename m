Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from hemlock.osuosl.org (smtp2.osuosl.org [140.211.166.133])
	by mail.lfdr.de (Postfix) with ESMTPS id 86B78228B28
	for <lists.virtualization@lfdr.de>; Tue, 21 Jul 2020 23:26:12 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by hemlock.osuosl.org (Postfix) with ESMTP id 3DE67883AC;
	Tue, 21 Jul 2020 21:26:11 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from hemlock.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id hetZT4BdllJk; Tue, 21 Jul 2020 21:26:09 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by hemlock.osuosl.org (Postfix) with ESMTP id DD17788738;
	Tue, 21 Jul 2020 21:26:04 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id C53C6C016F;
	Tue, 21 Jul 2020 21:26:04 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
 by lists.linuxfoundation.org (Postfix) with ESMTP id CD632C016F
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:59 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by fraxinus.osuosl.org (Postfix) with ESMTP id BCED286B7D
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:59 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id 2JvQ7U2TULQp
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:57 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by fraxinus.osuosl.org (Postfix) with ESMTPS id C34D386B93
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:25:56 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp02.buh.bitdefender.net [10.17.80.76])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 26976305D599; Wed, 22 Jul 2020 00:09:27 +0300 (EEST)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 0418F304FA13;
 Wed, 22 Jul 2020 00:09:27 +0300 (EEST)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v9 51/84] KVM: introspection: add KVMI_VCPU_GET_INFO
Date: Wed, 22 Jul 2020 00:08:49 +0300
Message-Id: <20200721210922.7646-52-alazar@bitdefender.com>
In-Reply-To: <20200721210922.7646-1-alazar@bitdefender.com>
References: <20200721210922.7646-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 =?UTF-8?q?Mihai=20Don=C8=9Bu?= <mdontu@bitdefender.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

RnJvbTogTWloYWkgRG9uyJt1IDxtZG9udHVAYml0ZGVmZW5kZXIuY29tPgoKRm9yIG5vdywgdGhp
cyBjb21tYW5kIHJldHVybnMgdGhlIFRTQyBmcmVxdWVuY3kgKGluIEhaKSBmb3IgdGhlIHNwZWNp
ZmllZAp2Q1BVIGlmIGF2YWlsYWJsZSAob3RoZXJ3aXNlIGl0IHJldHVybnMgemVybykuCgpTaWdu
ZWQtb2ZmLWJ5OiBNaWhhaSBEb27Im3UgPG1kb250dUBiaXRkZWZlbmRlci5jb20+CkNvLWRldmVs
b3BlZC1ieTogQWRhbGJlcnQgTGF6xINyIDxhbGF6YXJAYml0ZGVmZW5kZXIuY29tPgpTaWduZWQt
b2ZmLWJ5OiBBZGFsYmVydCBMYXrEg3IgPGFsYXphckBiaXRkZWZlbmRlci5jb20+Ci0tLQogRG9j
dW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1pLnJzdCAgICAgICAgICAgICAgIHwgIDI5ICsrKysKIGFy
Y2gveDg2L2luY2x1ZGUvdWFwaS9hc20va3ZtaS5oICAgICAgICAgICAgICB8ICAgNCArCiBhcmNo
L3g4Ni9rdm0vTWFrZWZpbGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIDIgKy0KIGFyY2gv
eDg2L2t2bS9rdm1pLmMgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAxOSArKysKIGluY2x1
ZGUvdWFwaS9saW51eC9rdm1pLmggICAgICAgICAgICAgICAgICAgICB8ICAgMiArCiAuLi4vdGVz
dGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYyAgfCAxNTIgKysrKysrKysrKysr
KysrKystCiB2aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmggICAgICAgICAgICAgfCAg
IDQgKwogdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jICAgICAgICAgICAgIHwgIDIy
ICsrKwogOCBmaWxlcyBjaGFuZ2VkLCAyMzIgaW5zZXJ0aW9ucygrKSwgMiBkZWxldGlvbnMoLSkK
IGNyZWF0ZSBtb2RlIDEwMDY0NCBhcmNoL3g4Ni9rdm0va3ZtaS5jCgpkaWZmIC0tZ2l0IGEvRG9j
dW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1pLnJzdCBiL0RvY3VtZW50YXRpb24vdmlydC9rdm0va3Zt
aS5yc3QKaW5kZXggMzgzYmYzOWVjMWU0Li41ZWFkMjlhN2IyYTcgMTAwNjQ0Ci0tLSBhL0RvY3Vt
ZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QKKysrIGIvRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9r
dm1pLnJzdApAQCAtNDUxLDYgKzQ1MSwzNSBAQCBvbmUgcGFnZSAob2Zmc2V0ICsgc2l6ZSA8PSBQ
QUdFX1NJWkUpLgogKiAtS1ZNX0VJTlZBTCAtIHRoZSBzcGVjaWZpZWQgZ3BhL3NpemUgcGFpciBp
cyBpbnZhbGlkCiAqIC1LVk1fRUlOVkFMIC0gdGhlIHBhZGRpbmcgaXMgbm90IHplcm8KIAorOC4g
S1ZNSV9WQ1BVX0dFVF9JTkZPCistLS0tLS0tLS0tLS0tLS0tLS0tLS0KKworOkFyY2hpdGVjdHVy
ZXM6IGFsbAorOlZlcnNpb25zOiA+PSAxCis6UGFyYW1ldGVyczoKKworOjoKKworCXN0cnVjdCBr
dm1pX3ZjcHVfaGRyOworCis6UmV0dXJuczoKKworOjoKKworCXN0cnVjdCBrdm1pX2Vycm9yX2Nv
ZGU7CisJc3RydWN0IGt2bWlfdmNwdV9nZXRfaW5mb19yZXBseSB7CisJCV9fdTY0IHRzY19zcGVl
ZDsKKwl9OworCitSZXR1cm5zIHRoZSBUU0MgZnJlcXVlbmN5IChpbiBIWikgZm9yIHRoZSBzcGVj
aWZpZWQgdkNQVSBpZiBhdmFpbGFibGUKKyhvdGhlcndpc2UgaXQgcmV0dXJucyB6ZXJvKS4KKwor
OkVycm9yczoKKworKiAtS1ZNX0VJTlZBTCAtIHRoZSBwYWRkaW5nIGlzIG5vdCB6ZXJvCisqIC1L
Vk1fRUlOVkFMIC0gdGhlIHNlbGVjdGVkIHZDUFUgaXMgaW52YWxpZAorKiAtS1ZNX0VBR0FJTiAt
IHRoZSBzZWxlY3RlZCB2Q1BVIGNhbid0IGJlIGludHJvc3BlY3RlZCB5ZXQKKwogRXZlbnRzCiA9
PT09PT0KIApkaWZmIC0tZ2l0IGEvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmggYi9h
cmNoL3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWkuaAppbmRleCA1NTFmOWVkMWVkOWMuLjg5YWRm
ODRjZWZlNCAxMDA2NDQKLS0tIGEvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKKysr
IGIvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKQEAgLTI2LDQgKzI2LDggQEAgc3Ry
dWN0IGt2bWlfZXZlbnRfYXJjaCB7CiAJfSBtc3JzOwogfTsKIAorc3RydWN0IGt2bWlfdmNwdV9n
ZXRfaW5mb19yZXBseSB7CisJX191NjQgdHNjX3NwZWVkOworfTsKKwogI2VuZGlmIC8qIF9VQVBJ
X0FTTV9YODZfS1ZNSV9IICovCmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9rdm0vTWFrZWZpbGUgYi9h
cmNoL3g4Ni9rdm0vTWFrZWZpbGUKaW5kZXggZmIwMjQyMDMyY2QxLi4zY2ZlNzYyOTlkZWUgMTAw
NjQ0Ci0tLSBhL2FyY2gveDg2L2t2bS9NYWtlZmlsZQorKysgYi9hcmNoL3g4Ni9rdm0vTWFrZWZp
bGUKQEAgLTEzLDcgKzEzLDcgQEAgS1ZNSSA6PSAkKEtWTSkvaW50cm9zcGVjdGlvbgoga3ZtLXkJ
CQkrPSAkKEtWTSkva3ZtX21haW4ubyAkKEtWTSkvY29hbGVzY2VkX21taW8ubyBcCiAJCQkJJChL
Vk0pL2V2ZW50ZmQubyAkKEtWTSkvaXJxY2hpcC5vICQoS1ZNKS92ZmlvLm8KIGt2bS0kKENPTkZJ
R19LVk1fQVNZTkNfUEYpCSs9ICQoS1ZNKS9hc3luY19wZi5vCi1rdm0tJChDT05GSUdfS1ZNX0lO
VFJPU1BFQ1RJT04pICs9ICQoS1ZNSSkva3ZtaS5vICQoS1ZNSSkva3ZtaV9tc2cubwora3ZtLSQo
Q09ORklHX0tWTV9JTlRST1NQRUNUSU9OKSArPSAkKEtWTUkpL2t2bWkubyAkKEtWTUkpL2t2bWlf
bXNnLm8ga3ZtaS5vCiAKIGt2bS15CQkJKz0geDg2Lm8gZW11bGF0ZS5vIGk4MjU5Lm8gaXJxLm8g
bGFwaWMubyBcCiAJCQkgICBpODI1NC5vIGlvYXBpYy5vIGlycV9jb21tLm8gY3B1aWQubyBwbXUu
byBtdHJyLm8gXApkaWZmIC0tZ2l0IGEvYXJjaC94ODYva3ZtL2t2bWkuYyBiL2FyY2gveDg2L2t2
bS9rdm1pLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMDAwLi5jZjdiZmZm
NmM4YzUKLS0tIC9kZXYvbnVsbAorKysgYi9hcmNoL3g4Ni9rdm0va3ZtaS5jCkBAIC0wLDAgKzEs
MTkgQEAKKy8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wCisvKgorICogS1ZNIElu
dHJvc3BlY3Rpb24gLSB4ODYKKyAqCisgKiBDb3B5cmlnaHQgKEMpIDIwMTktMjAyMCBCaXRkZWZl
bmRlciBTLlIuTC4KKyAqLworCisjaW5jbHVkZSAiLi4vLi4vLi4vdmlydC9rdm0vaW50cm9zcGVj
dGlvbi9rdm1pX2ludC5oIgorCitpbnQga3ZtaV9hcmNoX2NtZF92Y3B1X2dldF9pbmZvKHN0cnVj
dCBrdm1fdmNwdSAqdmNwdSwKKwkJCQlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9pbmZvX3JlcGx5ICpy
cGwpCit7CisJaWYgKGt2bV9oYXNfdHNjX2NvbnRyb2wpCisJCXJwbC0+dHNjX3NwZWVkID0gMTAw
MHVsICogdmNwdS0+YXJjaC52aXJ0dWFsX3RzY19raHo7CisJZWxzZQorCQlycGwtPnRzY19zcGVl
ZCA9IDA7CisKKwlyZXR1cm4gMDsKK30KZGlmZiAtLWdpdCBhL2luY2x1ZGUvdWFwaS9saW51eC9r
dm1pLmggYi9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCmluZGV4IGIyMDZiNzQ0MTg1OS4uYTNk
Y2E0MjBjODg3IDEwMDY0NAotLS0gYS9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCisrKyBiL2lu
Y2x1ZGUvdWFwaS9saW51eC9rdm1pLmgKQEAgLTI1LDYgKzI1LDggQEAgZW51bSB7CiAJS1ZNSV9W
TV9SRUFEX1BIWVNJQ0FMICA9IDYsCiAJS1ZNSV9WTV9XUklURV9QSFlTSUNBTCA9IDcsCiAKKwlL
Vk1JX1ZDUFVfR0VUX0lORk8gICAgID0gOCwKKwogCUtWTUlfTlVNX01FU1NBR0VTCiB9OwogCmRp
ZmYgLS1naXQgYS90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5j
IGIvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYwppbmRleCA5
N2RlYzQ5ZDUyYjcuLjEwNzY2MWZiZTUyZiAxMDA2NDQKLS0tIGEvdG9vbHMvdGVzdGluZy9zZWxm
dGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYworKysgYi90b29scy90ZXN0aW5nL3NlbGZ0ZXN0
cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jCkBAIC05LDYgKzksNyBAQAogI2luY2x1ZGUgPHN5cy90
eXBlcy5oPgogI2luY2x1ZGUgPHN5cy9zb2NrZXQuaD4KICNpbmNsdWRlIDx0aW1lLmg+CisjaW5j
bHVkZSA8cHRocmVhZC5oPgogCiAjaW5jbHVkZSAidGVzdF91dGlsLmgiCiAKQEAgLTI1LDYgKzI2
LDcgQEAgc3RhdGljIGludCBzb2NrZXRfcGFpclsyXTsKICNkZWZpbmUgS3ZtX3NvY2tldCAgICAg
ICBzb2NrZXRfcGFpclswXQogI2RlZmluZSBVc2Vyc3BhY2Vfc29ja2V0IHNvY2tldF9wYWlyWzFd
CiAKK3N0YXRpYyBpbnQgdGVzdF9pZDsKIHN0YXRpYyB2bV92YWRkcl90IHRlc3RfZ3ZhOwogc3Rh
dGljIHZvaWQgKnRlc3RfaHZhOwogc3RhdGljIHZtX3BhZGRyX3QgdGVzdF9ncGE7CkBAIC0zMiw2
ICszNCwzOSBAQCBzdGF0aWMgdm1fcGFkZHJfdCB0ZXN0X2dwYTsKIHN0YXRpYyB1aW50OF90IHRl
c3Rfd3JpdGVfcGF0dGVybjsKIHN0YXRpYyBpbnQgcGFnZV9zaXplOwogCitzdHJ1Y3QgdmNwdV93
b3JrZXJfZGF0YSB7CisJc3RydWN0IGt2bV92bSAqdm07CisJaW50IHZjcHVfaWQ7CisJaW50IHRl
c3RfaWQ7CisJYm9vbCBzdG9wOworfTsKKworZW51bSB7CisJR1VFU1RfVEVTVF9OT09QID0gMCwK
K307CisKKyNkZWZpbmUgR1VFU1RfUkVRVUVTVF9URVNUKCkgICAgIEdVRVNUX1NZTkMoMCkKKyNk
ZWZpbmUgR1VFU1RfU0lHTkFMX1RFU1RfRE9ORSgpIEdVRVNUX1NZTkMoMSkKKworI2RlZmluZSBI
T1NUX1NFTkRfVEVTVCh1YykgICAgICAgKHVjLmNtZCA9PSBVQ0FMTF9TWU5DICYmIHVjLmFyZ3Nb
MV0gPT0gMCkKKworc3RhdGljIGludCBndWVzdF90ZXN0X2lkKHZvaWQpCit7CisJR1VFU1RfUkVR
VUVTVF9URVNUKCk7CisJcmV0dXJuIFJFQURfT05DRSh0ZXN0X2lkKTsKK30KKworc3RhdGljIHZv
aWQgZ3Vlc3RfY29kZSh2b2lkKQoreworCXdoaWxlICh0cnVlKSB7CisJCXN3aXRjaCAoZ3Vlc3Rf
dGVzdF9pZCgpKSB7CisJCWNhc2UgR1VFU1RfVEVTVF9OT09QOgorCQkJYnJlYWs7CisJCX0KKwkJ
R1VFU1RfU0lHTkFMX1RFU1RfRE9ORSgpOworCX0KK30KKwogdm9pZCBzZXR1cF9zb2NrZXQodm9p
ZCkKIHsKIAlpbnQgcjsKQEAgLTU4Nyw2ICs2MjIsMTIwIEBAIHN0YXRpYyB2b2lkIHRlc3RfbWVt
b3J5X2FjY2VzcyhzdHJ1Y3Qga3ZtX3ZtICp2bSkKIAogCXJlYWRfaW52YWxpZF9ndWVzdF9wYWdl
KHZtKTsKIH0KKworc3RhdGljIHZvaWQgKnZjcHVfd29ya2VyKHZvaWQgKmRhdGEpCit7CisJc3Ry
dWN0IHZjcHVfd29ya2VyX2RhdGEgKmN0eCA9IGRhdGE7CisJc3RydWN0IGt2bV9ydW4gKnJ1bjsK
KworCXJ1biA9IHZjcHVfc3RhdGUoY3R4LT52bSwgY3R4LT52Y3B1X2lkKTsKKworCXdoaWxlICgh
UkVBRF9PTkNFKGN0eC0+c3RvcCkpIHsKKwkJc3RydWN0IHVjYWxsIHVjOworCisJCXZjcHVfcnVu
KGN0eC0+dm0sIGN0eC0+dmNwdV9pZCk7CisKKwkJVEVTVF9BU1NFUlQocnVuLT5leGl0X3JlYXNv
biA9PSBLVk1fRVhJVF9JTywKKwkJCSJ2Y3B1X3J1bigpIGZhaWxlZCwgdGVzdF9pZCAlZCwgZXhp
dCByZWFzb24gJXUgKCVzKVxuIiwKKwkJCWN0eC0+dGVzdF9pZCwgcnVuLT5leGl0X3JlYXNvbiwK
KwkJCWV4aXRfcmVhc29uX3N0cihydW4tPmV4aXRfcmVhc29uKSk7CisKKwkJVEVTVF9BU1NFUlQo
Z2V0X3VjYWxsKGN0eC0+dm0sIGN0eC0+dmNwdV9pZCwgJnVjKSwKKwkJCSJObyBndWVzdCByZXF1
ZXN0XG4iKTsKKworCQlpZiAoSE9TVF9TRU5EX1RFU1QodWMpKSB7CisJCQl0ZXN0X2lkID0gUkVB
RF9PTkNFKGN0eC0+dGVzdF9pZCk7CisJCQlzeW5jX2dsb2JhbF90b19ndWVzdChjdHgtPnZtLCB0
ZXN0X2lkKTsKKwkJfQorCX0KKworCXJldHVybiBOVUxMOworfQorCitzdGF0aWMgcHRocmVhZF90
IHN0YXJ0X3ZjcHVfd29ya2VyKHN0cnVjdCB2Y3B1X3dvcmtlcl9kYXRhICpkYXRhKQoreworCXB0
aHJlYWRfdCB0aHJlYWRfaWQ7CisKKwlwdGhyZWFkX2NyZWF0ZSgmdGhyZWFkX2lkLCBOVUxMLCB2
Y3B1X3dvcmtlciwgZGF0YSk7CisKKwlyZXR1cm4gdGhyZWFkX2lkOworfQorCitzdGF0aWMgdm9p
ZCB3YWl0X3ZjcHVfd29ya2VyKHB0aHJlYWRfdCB2Y3B1X3RocmVhZCkKK3sKKwlwdGhyZWFkX2pv
aW4odmNwdV90aHJlYWQsIE5VTEwpOworfQorCitzdGF0aWMgdm9pZCBzdG9wX3ZjcHVfd29ya2Vy
KHB0aHJlYWRfdCB2Y3B1X3RocmVhZCwKKwkJCSAgICAgc3RydWN0IHZjcHVfd29ya2VyX2RhdGEg
KmRhdGEpCit7CisJV1JJVEVfT05DRShkYXRhLT5zdG9wLCB0cnVlKTsKKworCXdhaXRfdmNwdV93
b3JrZXIodmNwdV90aHJlYWQpOworfQorCitzdGF0aWMgaW50IGRvX3ZjcHVfY29tbWFuZChzdHJ1
Y3Qga3ZtX3ZtICp2bSwgaW50IGNtZF9pZCwKKwkJCSAgIHN0cnVjdCBrdm1pX21zZ19oZHIgKnJl
cSwgc2l6ZV90IHJlcV9zaXplLAorCQkJICAgdm9pZCAqcnBsLCBzaXplX3QgcnBsX3NpemUpCit7
CisJc3RydWN0IHZjcHVfd29ya2VyX2RhdGEgZGF0YSA9IHsudm0gPSB2bSwgLnZjcHVfaWQgPSBW
Q1BVX0lEIH07CisJcHRocmVhZF90IHZjcHVfdGhyZWFkOworCWludCByOworCisJdmNwdV90aHJl
YWQgPSBzdGFydF92Y3B1X3dvcmtlcigmZGF0YSk7CisKKwlzZW5kX21lc3NhZ2UoY21kX2lkLCBy
ZXEsIHJlcV9zaXplKTsKKwlyID0gcmVjZWl2ZV9jbWRfcmVwbHkocmVxLCBycGwsIHJwbF9zaXpl
KTsKKworCXN0b3BfdmNwdV93b3JrZXIodmNwdV90aHJlYWQsICZkYXRhKTsKKwlyZXR1cm4gcjsK
K30KKworc3RhdGljIGludCBkb192Y3B1MF9jb21tYW5kKHN0cnVjdCBrdm1fdm0gKnZtLCBpbnQg
Y21kX2lkLAorCQkJICAgIHN0cnVjdCBrdm1pX21zZ19oZHIgKnJlcSwgc2l6ZV90IHJlcV9zaXpl
LAorCQkJICAgIHZvaWQgKnJwbCwgc2l6ZV90IHJwbF9zaXplKQoreworCXN0cnVjdCBrdm1pX3Zj
cHVfaGRyICp2Y3B1X2hkciA9IChzdHJ1Y3Qga3ZtaV92Y3B1X2hkciAqKShyZXEgKyAxKTsKKwor
CXZjcHVfaGRyLT52Y3B1ID0gMDsKKworCXJldHVybiBkb192Y3B1X2NvbW1hbmQodm0sIGNtZF9p
ZCwgcmVxLCByZXFfc2l6ZSwgcnBsLCBycGxfc2l6ZSk7Cit9CisKK3N0YXRpYyB2b2lkIHRlc3Rf
dmNwdTBfY29tbWFuZChzdHJ1Y3Qga3ZtX3ZtICp2bSwgaW50IGNtZF9pZCwKKwkJCSAgICAgICBz
dHJ1Y3Qga3ZtaV9tc2dfaGRyICpyZXEsIHNpemVfdCByZXFfc2l6ZSwKKwkJCSAgICAgICB2b2lk
ICpycGwsIHNpemVfdCBycGxfc2l6ZSkKK3sKKwlpbnQgcjsKKworCXIgPSBkb192Y3B1MF9jb21t
YW5kKHZtLCBjbWRfaWQsIHJlcSwgcmVxX3NpemUsIHJwbCwgcnBsX3NpemUpOworCVRFU1RfQVNT
RVJUKHIgPT0gMCwKKwkJIkNvbW1hbmQgJWQgZmFpbGVkLCBlcnJvciAlZCAoJXMpXG4iLAorCQlj
bWRfaWQsIC1yLCBrdm1fc3RyZXJyb3IoLXIpKTsKK30KKworc3RhdGljIHZvaWQgdGVzdF9jbWRf
dmNwdV9nZXRfaW5mbyhzdHJ1Y3Qga3ZtX3ZtICp2bSkKK3sKKwlzdHJ1Y3QgeworCQlzdHJ1Y3Qg
a3ZtaV9tc2dfaGRyIGhkcjsKKwkJc3RydWN0IGt2bWlfdmNwdV9oZHIgdmNwdV9oZHI7CisJfSBy
ZXEgPSB7fTsKKwlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9pbmZvX3JlcGx5IHJwbDsKKwlpbnQgY21k
X2lkID0gS1ZNSV9WQ1BVX0dFVF9JTkZPOworCWludCByOworCisJdGVzdF92Y3B1MF9jb21tYW5k
KHZtLCBjbWRfaWQsICZyZXEuaGRyLCBzaXplb2YocmVxKSwKKwkJCSAgICZycGwsIHNpemVvZihy
cGwpKTsKKworCXByX2luZm8oInRzY19zcGVlZDogJWxsdSBIWlxuIiwgcnBsLnRzY19zcGVlZCk7
CisKKwlyZXEudmNwdV9oZHIudmNwdSA9IDk5OworCXIgPSBkb19jb21tYW5kKGNtZF9pZCwgJnJl
cS5oZHIsIHNpemVvZihyZXEpLCAmcnBsLCBzaXplb2YocnBsKSk7CisJVEVTVF9BU1NFUlQociA9
PSAtS1ZNX0VJTlZBTCwKKwkJIktWTUlfVkNQVV9HRVRfSU5GTyBkaWRuJ3QgZmFpbGVkIHdpdGgg
LUtWTV9FSU5WQUwsIGVycm9yICVkICglcylcbiIsCisJCS1yLCBrdm1fc3RyZXJyb3IoLXIpKTsK
K30KKwogc3RhdGljIHZvaWQgdGVzdF9pbnRyb3NwZWN0aW9uKHN0cnVjdCBrdm1fdm0gKnZtKQog
ewogCXNyYW5kb20odGltZSgwKSk7CkBAIC02MDEsNiArNzUwLDcgQEAgc3RhdGljIHZvaWQgdGVz
dF9pbnRyb3NwZWN0aW9uKHN0cnVjdCBrdm1fdm0gKnZtKQogCXRlc3RfZXZlbnRfdW5ob29rKHZt
KTsKIAl0ZXN0X2NtZF92bV9jb250cm9sX2V2ZW50cyh2bSk7CiAJdGVzdF9tZW1vcnlfYWNjZXNz
KHZtKTsKKwl0ZXN0X2NtZF92Y3B1X2dldF9pbmZvKHZtKTsKIAogCXVuaG9va19pbnRyb3NwZWN0
aW9uKHZtKTsKIH0KQEAgLTYyNiw3ICs3NzYsNyBAQCBpbnQgbWFpbihpbnQgYXJnYywgY2hhciAq
YXJndltdKQogCQlleGl0KEtTRlRfU0tJUCk7CiAJfQogCi0Jdm0gPSB2bV9jcmVhdGVfZGVmYXVs
dChWQ1BVX0lELCAwLCBOVUxMKTsKKwl2bSA9IHZtX2NyZWF0ZV9kZWZhdWx0KFZDUFVfSUQsIDAs
IGd1ZXN0X2NvZGUpOwogCXZjcHVfc2V0X2NwdWlkKHZtLCBWQ1BVX0lELCBrdm1fZ2V0X3N1cHBv
cnRlZF9jcHVpZCgpKTsKIAogCXBhZ2Vfc2l6ZSA9IGdldHBhZ2VzaXplKCk7CmRpZmYgLS1naXQg
YS92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmggYi92aXJ0L2t2bS9pbnRyb3NwZWN0
aW9uL2t2bWlfaW50LmgKaW5kZXggZmU1MTkwYWIzMWQ2Li40MjgwM2I2ZDBlODEgMTAwNjQ0Ci0t
LSBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaAorKysgYi92aXJ0L2t2bS9pbnRy
b3NwZWN0aW9uL2t2bWlfaW50LmgKQEAgLTQ3LDQgKzQ3LDggQEAgaW50IGt2bWlfY21kX3JlYWRf
cGh5c2ljYWwoc3RydWN0IGt2bSAqa3ZtLCB1NjQgZ3BhLCBzaXplX3Qgc2l6ZSwKIGludCBrdm1p
X2NtZF93cml0ZV9waHlzaWNhbChzdHJ1Y3Qga3ZtICprdm0sIHU2NCBncGEsIHNpemVfdCBzaXpl
LAogCQkJICAgIGNvbnN0IHZvaWQgKmJ1Zik7CiAKKy8qIGFyY2ggKi8KK2ludCBrdm1pX2FyY2hf
Y21kX3ZjcHVfZ2V0X2luZm8oc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAorCQkJCXN0cnVjdCBrdm1p
X3ZjcHVfZ2V0X2luZm9fcmVwbHkgKnJwbCk7CisKICNlbmRpZgpkaWZmIC0tZ2l0IGEvdmlydC9r
dm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jIGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1p
X21zZy5jCmluZGV4IDMxYTQ3MWRmNGIxMi4uZWUyNWJhNDRmYjBiIDEwMDY0NAotLS0gYS92aXJ0
L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMKKysrIGIvdmlydC9rdm0vaW50cm9zcGVjdGlv
bi9rdm1pX21zZy5jCkBAIC0xMDksNiArMTA5LDE1IEBAIHN0YXRpYyBpbnQga3ZtaV9tc2dfdm1f
cmVwbHkoc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pLAogCXJldHVybiBrdm1pX21zZ19y
ZXBseShrdm1pLCBtc2csIGVyciwgcnBsLCBycGxfc2l6ZSk7CiB9CiAKK3N0YXRpYyBpbnQga3Zt
aV9tc2dfdmNwdV9yZXBseShjb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X21zZ19qb2IgKmpvYiwKKwkJ
CQljb25zdCBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICptc2csIGludCBlcnIsCisJCQkJY29uc3Qgdm9p
ZCAqcnBsLCBzaXplX3QgcnBsX3NpemUpCit7CisJc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICpr
dm1pID0gS1ZNSShqb2ItPnZjcHUtPmt2bSk7CisKKwlyZXR1cm4ga3ZtaV9tc2dfcmVwbHkoa3Zt
aSwgbXNnLCBlcnIsIHJwbCwgcnBsX3NpemUpOworfQorCiBzdGF0aWMgYm9vbCBpbnZhbGlkX3Zj
cHVfaGRyKGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfaGRyICpoZHIpCiB7CiAJcmV0dXJuIGhkci0+
cGFkZGluZzEgfHwgaGRyLT5wYWRkaW5nMjsKQEAgLTI3NCw2ICsyODMsMTggQEAgc3RhdGljIGJv
b2wgaXNfdm1fY29tbWFuZCh1MTYgaWQpCiAJcmV0dXJuIGlkIDwgQVJSQVlfU0laRShtc2dfdm0p
ICYmICEhbXNnX3ZtW2lkXTsKIH0KIAorc3RhdGljIGludCBoYW5kbGVfdmNwdV9nZXRfaW5mbyhj
b25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X21zZ19qb2IgKmpvYiwKKwkJCQljb25zdCBzdHJ1Y3Qga3Zt
aV9tc2dfaGRyICptc2csCisJCQkJY29uc3Qgdm9pZCAqcmVxKQoreworCXN0cnVjdCBrdm1pX3Zj
cHVfZ2V0X2luZm9fcmVwbHkgcnBsOworCisJbWVtc2V0KCZycGwsIDAsIHNpemVvZihycGwpKTsK
Kwlrdm1pX2FyY2hfY21kX3ZjcHVfZ2V0X2luZm8oam9iLT52Y3B1LCAmcnBsKTsKKworCXJldHVy
biBrdm1pX21zZ192Y3B1X3JlcGx5KGpvYiwgbXNnLCAwLCAmcnBsLCBzaXplb2YocnBsKSk7Cit9
CisKIC8qCiAgKiBUaGVzZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkIGZyb20gdGhlIHZDUFUgdGhy
ZWFkLiBUaGUgcmVjZWl2aW5nIHRocmVhZAogICogcGFzc2VzIHRoZSBtZXNzYWdlcyB1c2luZyBh
IG5ld2x5IGFsbG9jYXRlZCAnc3RydWN0IGt2bWlfdmNwdV9tc2dfam9iJwpAQCAtMjgyLDYgKzMw
Myw3IEBAIHN0YXRpYyBib29sIGlzX3ZtX2NvbW1hbmQodTE2IGlkKQogICovCiBzdGF0aWMgaW50
KCpjb25zdCBtc2dfdmNwdVtdKShjb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X21zZ19qb2IgKiwKIAkJ
CSAgICAgIGNvbnN0IHN0cnVjdCBrdm1pX21zZ19oZHIgKiwgY29uc3Qgdm9pZCAqKSA9IHsKKwlb
S1ZNSV9WQ1BVX0dFVF9JTkZPXSA9IGhhbmRsZV92Y3B1X2dldF9pbmZvLAogfTsKIAogc3RhdGlj
IGJvb2wgaXNfdmNwdV9jb21tYW5kKHUxNiBpZCkKX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX18KVmlydHVhbGl6YXRpb24gbWFpbGluZyBsaXN0ClZpcnR1YWxp
emF0aW9uQGxpc3RzLmxpbnV4LWZvdW5kYXRpb24ub3JnCmh0dHBzOi8vbGlzdHMubGludXhmb3Vu
ZGF0aW9uLm9yZy9tYWlsbWFuL2xpc3RpbmZvL3ZpcnR1YWxpemF0aW9u
