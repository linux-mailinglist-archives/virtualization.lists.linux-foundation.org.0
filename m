Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from hemlock.osuosl.org (smtp2.osuosl.org [140.211.166.133])
	by mail.lfdr.de (Postfix) with ESMTPS id 05946155DF6
	for <lists.virtualization@lfdr.de>; Fri,  7 Feb 2020 19:26:09 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by hemlock.osuosl.org (Postfix) with ESMTP id ADFD087F73;
	Fri,  7 Feb 2020 18:26:07 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from hemlock.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id Zjj+G2Zyjzxw; Fri,  7 Feb 2020 18:26:02 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by hemlock.osuosl.org (Postfix) with ESMTP id 19A0B87FC3;
	Fri,  7 Feb 2020 18:26:02 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 11478C013E;
	Fri,  7 Feb 2020 18:26:02 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 99627C1D89
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:57 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by silver.osuosl.org (Postfix) with ESMTP id 784D62264C
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:57 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id 9PLI6NIDtlXg
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:57 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by silver.osuosl.org (Postfix) with ESMTPS id D820222636
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:55 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp01.buh.bitdefender.com [10.17.80.75])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 8D800305D349; Fri,  7 Feb 2020 20:16:40 +0200 (EET)
Received: from host.bbu.bitdefender.biz (unknown [195.210.4.22])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 7A926305207B;
 Fri,  7 Feb 2020 20:16:40 +0200 (EET)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [RFC PATCH v7 43/78] KVM: introspection: add KVMI_EVENT_UNHOOK
Date: Fri,  7 Feb 2020 20:16:01 +0200
Message-Id: <20200207181636.1065-44-alazar@bitdefender.com>
In-Reply-To: <20200207181636.1065-1-alazar@bitdefender.com>
References: <20200207181636.1065-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

SW4gY2VydGFpbiBzaXR1YXRpb25zICh3aGVuIHRoZSBndWVzdCBoYXMgdG8gYmUgcGF1c2VkLCBz
dXNwZW5kZWQsCm1pZ3JhdGVkLCBldGMuKSwgdXNlcnNwYWNlIHdpbGwgdXNlIHRoZSBLVk1fSU5U
Uk9TUEVDVElPTl9QUkVVTkhPT0sKaW9jdGwgaW4gb3JkZXIgdG8gdHJpZ2dlciB0aGUgS1ZNSV9F
VkVOVF9VTkhPT0suIElmIHRoZSBldmVudCBpcyBzZW50CnN1Y2Nlc3NmdWxseSAodGhlIFZNIGhh
cyBhbiBhY3RpdmUgaW50cm9zcGVjdGlvbiBjaGFubmVsKSwgdXNlcnNwYWNlCnNob3VsZCBkZWxh
eSB0aGUgYWN0aW9uIChwYXVzZS9zdXNwZW5kLy4uLikgdG8gZ2l2ZSB0aGUgaW50cm9zcGVjdGlv
bgp0b29sIHRoZSBjaGFuY2UgdG8gcmVtb3ZlIGl0cyBob29rcyAoZWcuIGJyZWFrcG9pbnRzKSB3
aGlsZSB0aGUgZ3Vlc3QKaXMgc3RpbGwgcnVubmluZy4gT25jZSBhIHRpbWVvdXQgaXMgcmVhY2hl
ZCBvciB0aGUgaW50cm9zcGVjdGlvbiB0b29sCmhhcyBjbG9zZWQgdGhlIHNvY2tldCwgdXNlcnNw
YWNlIHNob3VsZCByZXN1bWUgdGhlIGFjdGlvbi4KClNpZ25lZC1vZmYtYnk6IEFkYWxiZXJ0IExh
esSDciA8YWxhemFyQGJpdGRlZmVuZGVyLmNvbT4KLS0tCiBEb2N1bWVudGF0aW9uL3ZpcnQva3Zt
L2FwaS50eHQgICAgICAgICAgICAgICAgfCAyMyArKysrKysrCiBEb2N1bWVudGF0aW9uL3ZpcnQv
a3ZtL2t2bWkucnN0ICAgICAgICAgICAgICAgfCA2OSArKysrKysrKysrKysrKysrKystCiBhcmNo
L3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWkuaCAgICAgICAgICAgICAgfCAyOSArKysrKysrKwog
aW5jbHVkZS9saW51eC9rdm1pX2hvc3QuaCAgICAgICAgICAgICAgICAgICAgIHwgIDMgKwogaW5j
bHVkZS91YXBpL2xpbnV4L2t2bS5oICAgICAgICAgICAgICAgICAgICAgIHwgIDIgKwogaW5jbHVk
ZS91YXBpL2xpbnV4L2t2bWkuaCAgICAgICAgICAgICAgICAgICAgIHwgMTMgKysrKwogLi4uL3Rl
c3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMgIHwgNDIgKysrKysrKysrKysK
IHZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jICAgICAgICAgICAgICAgICB8IDMwICsrKysr
KysrCiB2aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmggICAgICAgICAgICAgfCAgOCAr
Ky0KIHZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYyAgICAgICAgICAgICB8IDM0ICsr
KysrKysrKwogdmlydC9rdm0va3ZtX21haW4uYyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwg
IDMgKwogMTEgZmlsZXMgY2hhbmdlZCwgMjUyIGluc2VydGlvbnMoKyksIDQgZGVsZXRpb25zKC0p
CiBjcmVhdGUgbW9kZSAxMDA2NDQgYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKCmRp
ZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2FwaS50eHQgYi9Eb2N1bWVudGF0aW9u
L3ZpcnQva3ZtL2FwaS50eHQKaW5kZXggYzFkYTBhNjdkN2FmLi44ZmJiN2ZkMGYwYjQgMTAwNjQ0
Ci0tLSBhL0RvY3VtZW50YXRpb24vdmlydC9rdm0vYXBpLnR4dAorKysgYi9Eb2N1bWVudGF0aW9u
L3ZpcnQva3ZtL2FwaS50eHQKQEAgLTQyNjAsNiArNDI2MCwyOSBAQCB0aGUgZXZlbnQgaXMgZGlz
YWxsb3dlZC4KIFVubGVzcyBzZXQgdG8gLTEgKG1lYW5pbmcgYWxsIGV2ZW50KSwgaWQgbXVzdCBi
ZSBhIGV2ZW50IElECiAoZS5nLiBLVk1JX0VWRU5UX1VOSE9PSywgS1ZNSV9FVkVOVF9DUiwgZXRj
LikKIAorNC4xMjYgS1ZNX0lOVFJPU1BFQ1RJT05fUFJFVU5IT09LCisKK0NhcGFiaWxpdHk6IEtW
TV9DQVBfSU5UUk9TUEVDVElPTgorQXJjaGl0ZWN0dXJlczogeDg2CitUeXBlOiB2bSBpb2N0bAor
UGFyYW1ldGVyczogbm9uZQorUmV0dXJuczogMCBvbiBzdWNjZXNzLCBhIG5lZ2F0aXZlIHZhbHVl
IG9uIGVycm9yCitFcnJvcnM6CisgIEVGQVVMVDogdGhlIGludHJvc3BlY3Rpb24gaXMgbm90IGVu
YWJsZWQKKyAgICAgICAgICB0aGUgc29ja2V0IChwYXNzZWQgd2l0aCBLVk1fSU5UUk9TUEVDVElP
Tl9IT09LKSBoYWQgYW4gZXJyb3IKKyAgRU5PRU5UOiB0aGUgaW50cm9zcGVjdGlvbiB0b29sIGRp
ZG4ndCBzdWJzY3JpYmVkCisgICAgICAgICAgICB0byB0aGlzIHR5cGUgb2YgaW50cm9zcGVjdGlv
biBldmVudCAodW5ob29rKS4KKworVGhpcyBpb2N0bCBpcyB1c2VkIHRvIGluZm9ybSB0aGF0IHRo
ZSBjdXJyZW50IFZNIGlzCitwYXVzZWQvc3VzcGVuZGVkL21pZ3JhdGVkL2V0Yy4KKworS1ZNIHNo
b3VsZCBzZW5kIGFuICd1bmhvb2snIGludHJvc3BlY3Rpb24gZXZlbnQgdG8gdGhlIGludHJvc3Bl
Y3Rpb24gdG9vbC4KKworSWYgdGhpcyBpb2N0bCBpcyBzdWNjZXNzZnVsLCB0aGUgdXNlcnNwYWNl
IHNob3VsZCBnaXZlIHRoZQoraW50cm9zcGVjdGlvbiB0b29sIGEgY2hhbmNlIHRvIHVuaG9vayB0
aGUgVk0gYW5kIHRoZW4gaXQgc2hvdWxkIHVzZQorS1ZNX0lOVFJPU1BFQ1RJT05fVU5IT09LIHRv
IG1ha2Ugc3VyZSBhbGwgdGhlIGludHJvc3BlY3Rpb24gc3RydWN0dXJlcworYXJlIGZyZWVkLgor
CiA1LiBUaGUga3ZtX3J1biBzdHJ1Y3R1cmUKIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogCmRp
ZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0IGIvRG9jdW1lbnRhdGlv
bi92aXJ0L2t2bS9rdm1pLnJzdAppbmRleCAwYTcyNjZmZWQ1NjQuLjk0OWU5NDA0ODdhYiAxMDA2
NDQKLS0tIGEvRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1pLnJzdAorKysgYi9Eb2N1bWVudGF0
aW9uL3ZpcnQva3ZtL2t2bWkucnN0CkBAIC0xOTQsOSArMTk0LDEwIEBAIGJlY29tZXMgbmVjZXNz
YXJ5IHRvIHJlbW92ZSB0aGVtIGJlZm9yZSB0aGUgZ3Vlc3QgaXMgc3VzcGVuZGVkLCBtb3ZlZAog
KG1pZ3JhdGVkKSBvciBhIHNuYXBzaG90IHdpdGggbWVtb3J5IGlzIGNyZWF0ZWQuCiAKIFRoZSBh
Y3Rpb25zIGFyZSBub3JtYWxseSBwZXJmb3JtZWQgYnkgdGhlIGRldmljZSBtYW5hZ2VyLiBJbiB0
aGUgY2FzZQotb2YgUUVNVSwgaXQgd2lsbCB1c2UgYW5vdGhlciBpb2N0bCB0byBub3RpZnkgdGhl
IGludHJvc3BlY3Rpb24gdG9vbCBhbmQKLXdhaXQgZm9yIGEgbGltaXRlZCBhbW91bnQgb2YgdGlt
ZSAoYSBmZXcgc2Vjb25kcykgZm9yIGEgY29uZmlybWF0aW9udGhhdAotaXMgT0sgdG8gcHJvY2Vl
ZC4KK29mIFFFTVUsIGl0IHdpbGwgdXNlIHRoZSAqS1ZNX0lOVFJPU1BFQ1RJT05fUFJFVU5IT09L
KiBpb2N0bCB0byB0cmlnZ2VyCit0aGUgKktWTUlfRVZFTlRfVU5IT09LKiBldmVudCBhbmQgd2Fp
dCBmb3IgYSBsaW1pdGVkIGFtb3VudCBvZiB0aW1lCisoYSBmZXcgc2Vjb25kcykgZm9yIGEgY29u
ZmlybWF0aW9uIGZyb20gdGhlIGludHJvc3BlY3Rpb24gdG9vbCB0aGF0IGlzCitPSyB0byBwcm9j
ZWVkLgogCiBMaXZlIG1pZ3JhdGlvbnMKIC0tLS0tLS0tLS0tLS0tLQpAQCAtMzMxLDMgKzMzMiw2
NSBAQCBUaGlzIGNvbW1hbmQgaXMgYWx3YXlzIGFsbG93ZWQuCiAJfTsKIAogUmV0dXJucyB0aGUg
bnVtYmVyIG9mIG9ubGluZSB2Q1BVcy4KKworRXZlbnRzCis9PT09PT0KKworQWxsIGludHJvc3Bl
Y3Rpb24gZXZlbnRzIChWTSBvciB2Q1BVIHJlbGF0ZWQpIGFyZSBzZW50Cit1c2luZyB0aGUgKktW
TUlfRVZFTlQqIG1lc3NhZ2UgaWQuCisKK1RoZSAqS1ZNSV9FVkVOVF9VTkhPT0sqIGV2ZW50IGRv
ZXNuJ3QgaGF2ZSBhIHJlcGx5IGFuZCBzaGFyZSB0aGUga3ZtaV9ldmVudAorc3RydWN0dXJlLCBm
b3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgdkNQVSBldmVudHMuCisKK1RoZSBtZXNzYWdlIGRhdGEg
YmVnaW5zIHdpdGggYSBjb21tb24gc3RydWN0dXJlLCBoYXZpbmcgdGhlIHNpemUgb2YgdGhlCitz
dHJ1Y3R1cmUsIHRoZSB2Q1BVIGluZGV4IGFuZCB0aGUgZXZlbnQgaWQ6OgorCisJc3RydWN0IGt2
bWlfZXZlbnQgeworCQlfX3UxNiBzaXplOworCQlfX3UxNiB2Y3B1OworCQlfX3U4IGV2ZW50Owor
CQlfX3U4IHBhZGRpbmdbM107CisJCXN0cnVjdCBrdm1pX2V2ZW50X2FyY2ggYXJjaDsKKwl9CisK
K09uIHg4NiB0aGUgc3RydWN0dXJlIGxvb2tzIGxpa2UgdGhpczo6CisKKwlzdHJ1Y3Qga3ZtaV9l
dmVudF9hcmNoIHsKKwkJX191OCBtb2RlOworCQlfX3U4IHBhZGRpbmdbN107CisJCXN0cnVjdCBr
dm1fcmVncyByZWdzOworCQlzdHJ1Y3Qga3ZtX3NyZWdzIHNyZWdzOworCQlzdHJ1Y3QgeworCQkJ
X191NjQgc3lzZW50ZXJfY3M7CisJCQlfX3U2NCBzeXNlbnRlcl9lc3A7CisJCQlfX3U2NCBzeXNl
bnRlcl9laXA7CisJCQlfX3U2NCBlZmVyOworCQkJX191NjQgc3RhcjsKKwkJCV9fdTY0IGxzdGFy
OworCQkJX191NjQgY3N0YXI7CisJCQlfX3U2NCBwYXQ7CisJCQlfX3U2NCBzaGFkb3dfZ3M7CisJ
CX0gbXNyczsKKwl9OworCitJdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdkNQVSBz
dGF0ZSBhdCB0aGUgdGltZSBvZiB0aGUgZXZlbnQuCisKK1NwZWNpZmljIGRhdGEgY2FuIGZvbGxv
dyB0aGVzZSBjb21tb24gc3RydWN0dXJlcy4KKworMS4gS1ZNSV9FVkVOVF9VTkhPT0sKKy0tLS0t
LS0tLS0tLS0tLS0tLS0tCisKKzpBcmNoaXRlY3R1cmU6IGFsbAorOlZlcnNpb25zOiA+PSAxCis6
QWN0aW9uczogbm9uZQorOlBhcmFtZXRlcnM6CisKKzo6CisKKwlzdHJ1Y3Qga3ZtaV9ldmVudDsK
KworOlJldHVybnM6IG5vbmUKKworVGhpcyBldmVudCBpcyBzZW50IHdoZW4gdGhlIGRldmljZSBt
YW5hZ2VyIGhhcyB0byBwYXVzZS9zdG9wL21pZ3JhdGUgdGhlCitndWVzdCAoc2VlICoqVW5ob29r
aW5nKiopLiAgVGhlIGludHJvc3BlY3Rpb24gdG9vbCBoYXMgYSBjaGFuY2UgdG8gdW5ob29rCith
bmQgY2xvc2UgdGhlIEtWTUkgY2hhbm5lbCAoc2lnbmFsaW5nIHRoYXQgdGhlIG9wZXJhdGlvbiBj
YW4gcHJvY2VlZCkuCmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWku
aCBiL2FyY2gveDg2L2luY2x1ZGUvdWFwaS9hc20va3ZtaS5oCm5ldyBmaWxlIG1vZGUgMTAwNjQ0
CmluZGV4IDAwMDAwMDAwMDAwMC4uNTUxZjllZDFlZDljCi0tLSAvZGV2L251bGwKKysrIGIvYXJj
aC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKQEAgLTAsMCArMSwyOSBAQAorLyogU1BEWC1M
aWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgV0lUSCBMaW51eC1zeXNjYWxsLW5vdGUgKi8KKyNp
Zm5kZWYgX1VBUElfQVNNX1g4Nl9LVk1JX0gKKyNkZWZpbmUgX1VBUElfQVNNX1g4Nl9LVk1JX0gK
KworLyoKKyAqIEtWTSBpbnRyb3NwZWN0aW9uIC0geDg2IHNwZWNpZmljIHN0cnVjdHVyZXMgYW5k
IGRlZmluaXRpb25zCisgKi8KKworI2luY2x1ZGUgPGFzbS9rdm0uaD4KKworc3RydWN0IGt2bWlf
ZXZlbnRfYXJjaCB7CisJX191OCBtb2RlOwkJLyogMiwgNCBvciA4ICovCisJX191OCBwYWRkaW5n
WzddOworCXN0cnVjdCBrdm1fcmVncyByZWdzOworCXN0cnVjdCBrdm1fc3JlZ3Mgc3JlZ3M7CisJ
c3RydWN0IHsKKwkJX191NjQgc3lzZW50ZXJfY3M7CisJCV9fdTY0IHN5c2VudGVyX2VzcDsKKwkJ
X191NjQgc3lzZW50ZXJfZWlwOworCQlfX3U2NCBlZmVyOworCQlfX3U2NCBzdGFyOworCQlfX3U2
NCBsc3RhcjsKKwkJX191NjQgY3N0YXI7CisJCV9fdTY0IHBhdDsKKwkJX191NjQgc2hhZG93X2dz
OworCX0gbXNyczsKK307CisKKyNlbmRpZiAvKiBfVUFQSV9BU01fWDg2X0tWTUlfSCAqLwpkaWZm
IC0tZ2l0IGEvaW5jbHVkZS9saW51eC9rdm1pX2hvc3QuaCBiL2luY2x1ZGUvbGludXgva3ZtaV9o
b3N0LmgKaW5kZXggNGU3N2EwMjI3YzA4Li4xODBlMjYzMzVhOGYgMTAwNjQ0Ci0tLSBhL2luY2x1
ZGUvbGludXgva3ZtaV9ob3N0LmgKKysrIGIvaW5jbHVkZS9saW51eC9rdm1pX2hvc3QuaApAQCAt
MjEsNiArMjEsOCBAQCBzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gewogCiAJREVDTEFSRV9CSVRN
QVAoY21kX2FsbG93X21hc2ssIEtWTUlfTlVNX0NPTU1BTkRTKTsKIAlERUNMQVJFX0JJVE1BUChl
dmVudF9hbGxvd19tYXNrLCBLVk1JX05VTV9FVkVOVFMpOworCisJYXRvbWljX3QgZXZfc2VxOwog
fTsKIAogI2lmZGVmIENPTkZJR19LVk1fSU5UUk9TUEVDVElPTgpAQCAtMzQsNiArMzYsNyBAQCBp
bnQga3ZtaV9pb2N0bF9ob29rKHN0cnVjdCBrdm0gKmt2bSwgdm9pZCBfX3VzZXIgKmFyZ3ApOwog
aW50IGt2bWlfaW9jdGxfdW5ob29rKHN0cnVjdCBrdm0gKmt2bSk7CiBpbnQga3ZtaV9pb2N0bF9j
b21tYW5kKHN0cnVjdCBrdm0gKmt2bSwgdm9pZCBfX3VzZXIgKmFyZ3ApOwogaW50IGt2bWlfaW9j
dGxfZXZlbnQoc3RydWN0IGt2bSAqa3ZtLCB2b2lkIF9fdXNlciAqYXJncCk7CitpbnQga3ZtaV9p
b2N0bF9wcmV1bmhvb2soc3RydWN0IGt2bSAqa3ZtKTsKIAogI2Vsc2UKIApkaWZmIC0tZ2l0IGEv
aW5jbHVkZS91YXBpL2xpbnV4L2t2bS5oIGIvaW5jbHVkZS91YXBpL2xpbnV4L2t2bS5oCmluZGV4
IGUyZGU5ODdiNWQ4Zi4uZjc0NWEzYzYwZTAyIDEwMDY0NAotLS0gYS9pbmNsdWRlL3VhcGkvbGlu
dXgva3ZtLmgKKysrIGIvaW5jbHVkZS91YXBpL2xpbnV4L2t2bS5oCkBAIC0xNTcxLDYgKzE1NzEs
OCBAQCBzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb25fZmVhdHVyZSB7CiAjZGVmaW5lIEtWTV9JTlRS
T1NQRUNUSU9OX0NPTU1BTkQgX0lPVyhLVk1JTywgMHhjNSwgc3RydWN0IGt2bV9pbnRyb3NwZWN0
aW9uX2ZlYXR1cmUpCiAjZGVmaW5lIEtWTV9JTlRST1NQRUNUSU9OX0VWRU5UICAgX0lPVyhLVk1J
TywgMHhjNiwgc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uX2ZlYXR1cmUpCiAKKyNkZWZpbmUgS1ZN
X0lOVFJPU1BFQ1RJT05fUFJFVU5IT09LICBfSU8oS1ZNSU8sIDB4YzcpCisKICNkZWZpbmUgS1ZN
X0RFVl9BU1NJR05fRU5BQkxFX0lPTU1VCSgxIDw8IDApCiAjZGVmaW5lIEtWTV9ERVZfQVNTSUdO
X1BDSV8yXzMJCSgxIDw8IDEpCiAjZGVmaW5lIEtWTV9ERVZfQVNTSUdOX01BU0tfSU5UWAkoMSA8
PCAyKQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS91YXBpL2xpbnV4L2t2bWkuaCBiL2luY2x1ZGUvdWFw
aS9saW51eC9rdm1pLmgKaW5kZXggYjdlNDVkNDYwMWE1Li5lNzQyNDBhZmY1YjcgMTAwNjQ0Ci0t
LSBhL2luY2x1ZGUvdWFwaS9saW51eC9rdm1pLmgKKysrIGIvaW5jbHVkZS91YXBpL2xpbnV4L2t2
bWkuaApAQCAtOCwxMiArOCwxNSBAQAogCiAjaW5jbHVkZSA8bGludXgva2VybmVsLmg+CiAjaW5j
bHVkZSA8bGludXgvdHlwZXMuaD4KKyNpbmNsdWRlIDxhc20va3ZtaS5oPgogCiBlbnVtIHsKIAlL
Vk1JX1ZFUlNJT04gPSAweDAwMDAwMDAxCiB9OwogCiBlbnVtIHsKKwlLVk1JX0VWRU5UICAgICAg
ICAgICAgPSAxLAorCiAJS1ZNSV9HRVRfVkVSU0lPTiAgICAgID0gMiwKIAlLVk1JX1ZNX0NIRUNL
X0NPTU1BTkQgPSAzLAogCUtWTUlfVk1fQ0hFQ0tfRVZFTlQgICA9IDQsCkBAIC0yMyw2ICsyNiw4
IEBAIGVudW0gewogfTsKIAogZW51bSB7CisJS1ZNSV9FVkVOVF9VTkhPT0sgPSAwLAorCiAJS1ZN
SV9OVU1fRVZFTlRTCiB9OwogCkBAIC02Myw0ICs2OCwxMiBAQCBzdHJ1Y3Qga3ZtaV92bV9nZXRf
aW5mb19yZXBseSB7CiAJX191MzIgcGFkZGluZ1szXTsKIH07CiAKK3N0cnVjdCBrdm1pX2V2ZW50
IHsKKwlfX3UxNiBzaXplOworCV9fdTE2IHZjcHU7CisJX191OCBldmVudDsKKwlfX3U4IHBhZGRp
bmdbM107CisJc3RydWN0IGt2bWlfZXZlbnRfYXJjaCBhcmNoOworfTsKKwogI2VuZGlmIC8qIF9V
QVBJX19MSU5VWF9LVk1JX0ggKi8KZGlmZiAtLWdpdCBhL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3Rz
L2t2bS94ODZfNjQva3ZtaV90ZXN0LmMgYi90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2
XzY0L2t2bWlfdGVzdC5jCmluZGV4IDdlNTllYmNhMTUxNy4uZjVkNjdmZDBjZGU4IDEwMDY0NAot
LS0gYS90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jCisrKyBi
L3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKQEAgLTI2OCw2
ICsyNjgsNDcgQEAgc3RhdGljIHZvaWQgdGVzdF9jbWRfZ2V0X3ZtX2luZm8odm9pZCkKIAlERUJV
RygidmNwdSBjb3VudDogJXVcbiIsIHJwbC52Y3B1X2NvdW50KTsKIH0KIAorc3RhdGljIHZvaWQg
dHJpZ2dlcl9ldmVudF91bmhvb2tfbm90aWZpY2F0aW9uKHN0cnVjdCBrdm1fdm0gKnZtKQorewor
CWludCByOworCisJciA9IGlvY3RsKHZtLT5mZCwgS1ZNX0lOVFJPU1BFQ1RJT05fUFJFVU5IT09L
LCBOVUxMKTsKKwlURVNUX0FTU0VSVChyID09IDAsCisJCSJLVk1fSU5UUk9TUEVDVElPTl9QUkVV
TkhPT0sgZmFpbGVkLCBlcnJubyAlZCAoJXMpXG4iLAorCQllcnJubywgc3RyZXJyb3IoZXJybm8p
KTsKK30KKworc3RhdGljIHZvaWQgcmVjZWl2ZV9ldmVudChzdHJ1Y3Qga3ZtaV9tc2dfaGRyICpo
ZHIsIHN0cnVjdCBrdm1pX2V2ZW50ICpldiwKKwkJCSBzaXplX3QgZXZfc2l6ZSwgaW50IGV2ZW50
X2lkKQoreworCXJlY2VpdmVfZGF0YShoZHIsIHNpemVvZigqaGRyKSk7CisKKwlURVNUX0FTU0VS
VChoZHItPmlkID09IEtWTUlfRVZFTlQsCisJCSJVbmV4cGVjdGVkIG1lc3NhZ2VzIGlkICVkLCBl
eHBlY3RlZCAlZFxuIiwKKwkJaGRyLT5pZCwgS1ZNSV9FVkVOVCk7CisKKwlURVNUX0FTU0VSVCho
ZHItPnNpemUgPT0gZXZfc2l6ZSwKKwkJIkludmFsaWQgZXZlbnQgc2l6ZSAlZCwgZXhwZWN0ZWQg
JWQgYnl0ZXNcbiIsCisJCWhkci0+c2l6ZSwgZXZfc2l6ZSk7CisKKwlyZWNlaXZlX2RhdGEoZXYs
IGV2X3NpemUpOworCisJVEVTVF9BU1NFUlQoZXYtPmV2ZW50ID09IGV2ZW50X2lkLAorCQkiVW5l
eHBlY3RlZCBldmVudCAlZCwgZXhwZWN0ZWQgJWRcbiIsCisJCWV2LT5ldmVudCwgZXZlbnRfaWQp
OworfQorCitzdGF0aWMgdm9pZCB0ZXN0X2V2ZW50X3VuaG9vayhzdHJ1Y3Qga3ZtX3ZtICp2bSkK
K3sKKwlfX3UxNiBpZCA9IEtWTUlfRVZFTlRfVU5IT09LOworCXN0cnVjdCBrdm1pX21zZ19oZHIg
aGRyOworCXN0cnVjdCBrdm1pX2V2ZW50IGV2OworCisJdHJpZ2dlcl9ldmVudF91bmhvb2tfbm90
aWZpY2F0aW9uKHZtKTsKKworCXJlY2VpdmVfZXZlbnQoJmhkciwgJmV2LCBzaXplb2YoZXYpLCBp
ZCk7Cit9CisKIHN0YXRpYyB2b2lkIHRlc3RfaW50cm9zcGVjdGlvbihzdHJ1Y3Qga3ZtX3ZtICp2
bSkKIHsKIAlzZXR1cF9zb2NrZXQoKTsKQEAgLTI3OCw2ICszMTksNyBAQCBzdGF0aWMgdm9pZCB0
ZXN0X2ludHJvc3BlY3Rpb24oc3RydWN0IGt2bV92bSAqdm0pCiAJdGVzdF9jbWRfY2hlY2tfY29t
bWFuZCgpOwogCXRlc3RfY21kX2NoZWNrX2V2ZW50KCk7CiAJdGVzdF9jbWRfZ2V0X3ZtX2luZm8o
KTsKKwl0ZXN0X2V2ZW50X3VuaG9vayh2bSk7CiAKIAl1bmhvb2tfaW50cm9zcGVjdGlvbih2bSk7
CiB9CmRpZmYgLS1naXQgYS92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWkuYyBiL3ZpcnQva3Zt
L2ludHJvc3BlY3Rpb24va3ZtaS5jCmluZGV4IDhmOGUxODY5Njc5NC4uNzRlM2UxYWEzMjZiIDEw
MDY0NAotLS0gYS92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWkuYworKysgYi92aXJ0L2t2bS9p
bnRyb3NwZWN0aW9uL2t2bWkuYwpAQCAtODAsNiArODAsOCBAQCBhbGxvY19rdm1pKHN0cnVjdCBr
dm0gKmt2bSwgY29uc3Qgc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uX2hvb2sgKmhvb2spCiAJc2V0
X2JpdChLVk1JX1ZNX0NIRUNLX0NPTU1BTkQsIGt2bWktPmNtZF9hbGxvd19tYXNrKTsKIAlzZXRf
Yml0KEtWTUlfVk1fQ0hFQ0tfRVZFTlQsIGt2bWktPmNtZF9hbGxvd19tYXNrKTsKIAorCWF0b21p
Y19zZXQoJmt2bWktPmV2X3NlcSwgMCk7CisKIAlrdm1pLT5rdm0gPSBrdm07CiAKIAlyZXR1cm4g
a3ZtaTsKQEAgLTMyNCwzICszMjYsMzEgQEAgaW50IGt2bWlfaW9jdGxfY29tbWFuZChzdHJ1Y3Qg
a3ZtICprdm0sIHZvaWQgX191c2VyICphcmdwKQogCXJldHVybiBrdm1pX2lvY3RsX2ZlYXR1cmUo
a3ZtLCBhbGxvdywgcmVxdWVzdGVkLCBvZmZfYml0bWFwLAogCQkJCSAgS1ZNSV9OVU1fQ09NTUFO
RFMpOwogfQorCitzdGF0aWMgYm9vbCBrdm1pX3VuaG9va19ldmVudChzdHJ1Y3Qga3ZtX2ludHJv
c3BlY3Rpb24gKmt2bWkpCit7CisJaW50IGVycjsKKworCWVyciA9IGt2bWlfbXNnX3NlbmRfdW5o
b29rKGt2bWkpOworCisJcmV0dXJuICFlcnI7Cit9CisKK2ludCBrdm1pX2lvY3RsX3ByZXVuaG9v
ayhzdHJ1Y3Qga3ZtICprdm0pCit7CisJc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pOwor
CWludCBlcnIgPSAwOworCisJbXV0ZXhfbG9jaygma3ZtLT5rdm1pX2xvY2spOworCisJa3ZtaSA9
IEtWTUkoa3ZtKTsKKwlpZiAoIWt2bWkpCisJCXJldHVybiAtRUZBVUxUOworCisJaWYgKCFrdm1p
X3VuaG9va19ldmVudChrdm1pKSkKKwkJZXJyID0gLUVOT0VOVDsKKworCW11dGV4X3VubG9jaygm
a3ZtLT5rdm1pX2xvY2spOworCisJcmV0dXJuIGVycjsKK30KZGlmZiAtLWdpdCBhL3ZpcnQva3Zt
L2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaCBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9p
bnQuaAppbmRleCAzYzFhMzk3ZDA3YTEuLjNlYThlODI1MGY3ZCAxMDA2NDQKLS0tIGEvdmlydC9r
dm0vaW50cm9zcGVjdGlvbi9rdm1pX2ludC5oCisrKyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24v
a3ZtaV9pbnQuaApAQCAtMTgsNyArMTgsMTIgQEAKIAogI2RlZmluZSBLVk1JX01TR19TSVpFX0FM
TE9DIChzaXplb2Yoc3RydWN0IGt2bWlfbXNnX2hkcikgKyBLVk1JX01TR19TSVpFKQogCi0jZGVm
aW5lIEtWTUlfS05PV05fRVZFTlRTIDAKKyNkZWZpbmUgS1ZNSV9LTk9XTl9WTV9FVkVOVFMgKCBc
CisJCQkgIEJJVChLVk1JX0VWRU5UX1VOSE9PSykgXAorCQkpCisjZGVmaW5lIEtWTUlfS05PV05f
VkNQVV9FVkVOVFMgMAorCisjZGVmaW5lIEtWTUlfS05PV05fRVZFTlRTIChLVk1JX0tOT1dOX1ZN
X0VWRU5UUyB8IEtWTUlfS05PV05fVkNQVV9FVkVOVFMpCiAKICNkZWZpbmUgS1ZNSV9LTk9XTl9D
T01NQU5EUyAoIFwKIAkJCSAgQklUKEtWTUlfR0VUX1ZFUlNJT04pIFwKQEAgLTM0LDYgKzM5LDcg
QEAgYm9vbCBrdm1pX3NvY2tfZ2V0KHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSwgaW50
IGZkKTsKIHZvaWQga3ZtaV9zb2NrX3NodXRkb3duKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAq
a3ZtaSk7CiB2b2lkIGt2bWlfc29ja19wdXQoc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1p
KTsKIGJvb2wga3ZtaV9tc2dfcHJvY2VzcyhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWkp
OworaW50IGt2bWlfbXNnX3NlbmRfdW5ob29rKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3Zt
aSk7CiAKIC8qIGt2bWkuYyAqLwogdm9pZCAqa3ZtaV9tc2dfYWxsb2Modm9pZCk7CmRpZmYgLS1n
aXQgYS92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMgYi92aXJ0L2t2bS9pbnRyb3Nw
ZWN0aW9uL2t2bWlfbXNnLmMKaW5kZXggYThmNTI0ZTY3ZjFjLi5kYmMyYmE5YTEzOTkgMTAwNjQ0
Ci0tLSBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYworKysgYi92aXJ0L2t2bS9p
bnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMKQEAgLTMyOCwzICszMjgsMzcgQEAgYm9vbCBrdm1pX21z
Z19wcm9jZXNzKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSkKIAogCXJldHVybiBlcnIg
PT0gMDsKIH0KKworc3RhdGljIGlubGluZSB1MzIgbmV3X3NlcShzdHJ1Y3Qga3ZtX2ludHJvc3Bl
Y3Rpb24gKmt2bWkpCit7CisJcmV0dXJuIGF0b21pY19pbmNfcmV0dXJuKCZrdm1pLT5ldl9zZXEp
OworfQorCitzdGF0aWMgdm9pZCBrdm1pX3NldHVwX2V2ZW50X2NvbW1vbihzdHJ1Y3Qga3ZtaV9l
dmVudCAqZXYsIHUzMiBldl9pZCkKK3sKKwltZW1zZXQoZXYsIDAsIHNpemVvZigqZXYpKTsKKwor
CWV2LT5ldmVudCA9IGV2X2lkOworCWV2LT5zaXplID0gc2l6ZW9mKCpldik7Cit9CisKK2ludCBr
dm1pX21zZ19zZW5kX3VuaG9vayhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWkpCit7CisJ
c3RydWN0IGt2bWlfbXNnX2hkciBoZHI7CisJc3RydWN0IGt2bWlfZXZlbnQgY29tbW9uOworCXN0
cnVjdCBrdmVjIHZlY1tdID0geworCQl7Lmlvdl9iYXNlID0gJmhkciwJLmlvdl9sZW4gPSBzaXpl
b2YoaGRyKQkgfSwKKwkJey5pb3ZfYmFzZSA9ICZjb21tb24sCS5pb3ZfbGVuID0gc2l6ZW9mKGNv
bW1vbil9LAorCX07CisJc2l6ZV90IG1zZ19zaXplID0gc2l6ZW9mKGhkcikgKyBzaXplb2YoY29t
bW9uKTsKKwlzaXplX3QgbiA9IEFSUkFZX1NJWkUodmVjKTsKKworCW1lbXNldCgmaGRyLCAwLCBz
aXplb2YoaGRyKSk7CisJaGRyLmlkID0gS1ZNSV9FVkVOVDsKKwloZHIuc2VxID0gbmV3X3NlcShr
dm1pKTsKKwloZHIuc2l6ZSA9IG1zZ19zaXplIC0gc2l6ZW9mKGhkcik7CisKKwlrdm1pX3NldHVw
X2V2ZW50X2NvbW1vbigmY29tbW9uLCBLVk1JX0VWRU5UX1VOSE9PSyk7CisKKwlyZXR1cm4ga3Zt
aV9zb2NrX3dyaXRlKGt2bWksIHZlYywgbiwgbXNnX3NpemUpOworfQpkaWZmIC0tZ2l0IGEvdmly
dC9rdm0va3ZtX21haW4uYyBiL3ZpcnQva3ZtL2t2bV9tYWluLmMKaW5kZXggZjU2MzJhM2E3ZmIz
Li40ZjgzNzM1ZjJiNzQgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2t2bV9tYWluLmMKKysrIGIvdmly
dC9rdm0va3ZtX21haW4uYwpAQCAtMzUxMSw2ICszNTExLDkgQEAgc3RhdGljIGxvbmcga3ZtX3Zt
X2lvY3RsKHN0cnVjdCBmaWxlICpmaWxwLAogCWNhc2UgS1ZNX0lOVFJPU1BFQ1RJT05fRVZFTlQ6
CiAJCXIgPSBrdm1pX2lvY3RsX2V2ZW50KGt2bSwgYXJncCk7CiAJCWJyZWFrOworCWNhc2UgS1ZN
X0lOVFJPU1BFQ1RJT05fUFJFVU5IT09LOgorCQlyID0ga3ZtaV9pb2N0bF9wcmV1bmhvb2soa3Zt
KTsKKwkJYnJlYWs7CiAjZW5kaWYgLyogQ09ORklHX0tWTV9JTlRST1NQRUNUSU9OICovCiAJZGVm
YXVsdDoKIAkJciA9IGt2bV9hcmNoX3ZtX2lvY3RsKGZpbHAsIGlvY3RsLCBhcmcpOwpfX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpWaXJ0dWFsaXphdGlvbiBt
YWlsaW5nIGxpc3QKVmlydHVhbGl6YXRpb25AbGlzdHMubGludXgtZm91bmRhdGlvbi5vcmcKaHR0
cHM6Ly9saXN0cy5saW51eGZvdW5kYXRpb24ub3JnL21haWxtYW4vbGlzdGluZm8vdmlydHVhbGl6
YXRpb24=
