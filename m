Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from smtp2.osuosl.org (smtp2.osuosl.org [140.211.166.133])
	by mail.lfdr.de (Postfix) with ESMTPS id B075A4E54E9
	for <lists.virtualization@lfdr.de>; Wed, 23 Mar 2022 16:10:46 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by smtp2.osuosl.org (Postfix) with ESMTP id 5954140C1B;
	Wed, 23 Mar 2022 15:10:45 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from smtp2.osuosl.org ([127.0.0.1])
	by localhost (smtp2.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id fYvxLgSWaLtg; Wed, 23 Mar 2022 15:10:42 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp2.osuosl.org (Postfix) with ESMTPS id B48C840C20;
	Wed, 23 Mar 2022 15:10:41 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 250CFC000B;
	Wed, 23 Mar 2022 15:10:41 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from smtp1.osuosl.org (smtp1.osuosl.org [IPv6:2605:bc80:3010::138])
 by lists.linuxfoundation.org (Postfix) with ESMTP id DAD7CC000B
 for <virtualization@lists.linux-foundation.org>;
 Wed, 23 Mar 2022 15:10:39 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp1.osuosl.org (Postfix) with ESMTP id C00CD849F1
 for <virtualization@lists.linux-foundation.org>;
 Wed, 23 Mar 2022 15:10:39 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Authentication-Results: smtp1.osuosl.org (amavisd-new);
 dkim=pass (1024-bit key) header.d=redhat.com
Received: from smtp1.osuosl.org ([127.0.0.1])
 by localhost (smtp1.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id yZeSmw3aJ0Di
 for <virtualization@lists.linux-foundation.org>;
 Wed, 23 Mar 2022 15:10:37 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.8.0
Received: from us-smtp-delivery-124.mimecast.com
 (us-smtp-delivery-124.mimecast.com [170.10.129.124])
 by smtp1.osuosl.org (Postfix) with ESMTPS id B018E849EC
 for <virtualization@lists.linux-foundation.org>;
 Wed, 23 Mar 2022 15:10:36 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;
 s=mimecast20190719; t=1648048235;
 h=from:from:reply-to:reply-to:subject:subject:date:date:
 message-id:message-id:to:to:cc:cc:mime-version:mime-version:
 content-type:content-type:in-reply-to:in-reply-to:  references:references;
 bh=/k8CEBoNTa+CJxVVEpEYCpuLnwyEptlUqUK57jbeuMs=;
 b=Ka9mbaggkpMynxFEM1T9WRVxU21YpO0fPePvScjSSrEPV7HqxQh+KYHFrP7IatDicybjTi
 5F62idgCNSXtnLNO+CQwrpkxHlt8onMyLc07jOPJwJLSYHuN/R+xjdkv2Ta5N7GvPmy+rX
 AabCkR1mM/feUpUBCyoNn2k1ODgvnhc=
Received: from mimecast-mx02.redhat.com (mx3-rdu2.redhat.com
 [66.187.233.73]) by relay.mimecast.com with ESMTP with STARTTLS
 (version=TLSv1.2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 us-mta-219-OICCbslfOTWgRLCZXzj2aw-1; Wed, 23 Mar 2022 11:10:33 -0400
X-MC-Unique: OICCbslfOTWgRLCZXzj2aw-1
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.rdu2.redhat.com
 [10.11.54.1])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mimecast-mx02.redhat.com (Postfix) with ESMTPS id C1CD429AB44D;
 Wed, 23 Mar 2022 15:10:32 +0000 (UTC)
Received: from redhat.com (unknown [10.33.36.123])
 by smtp.corp.redhat.com (Postfix) with ESMTPS id B983F400F735;
 Wed, 23 Mar 2022 15:10:30 +0000 (UTC)
Date: Wed, 23 Mar 2022 15:10:28 +0000
From: Daniel =?utf-8?B?UC4gQmVycmFuZ8Op?= <berrange@redhat.com>
To: zhenwei pi <pizhenwei@bytedance.com>
Subject: Re: [PATCH v3 5/6] tests/crypto: Add test suite for crypto akcipher
Message-ID: <Yjs4ZG6SnXQqEehT@redhat.com>
References: <20220323024912.249789-1-pizhenwei@bytedance.com>
 <20220323024912.249789-6-pizhenwei@bytedance.com>
MIME-Version: 1.0
Content-Disposition: inline
In-Reply-To: <20220323024912.249789-6-pizhenwei@bytedance.com>
User-Agent: Mutt/2.1.5 (2021-12-30)
X-Scanned-By: MIMEDefang 2.84 on 10.11.54.1
Cc: herbert@gondor.apana.org.au, mst@redhat.com, qemu-devel@nongnu.org,
 virtualization@lists.linux-foundation.org, linux-crypto@vger.kernel.org,
 Lei He <helei.sig11@bytedance.com>
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Reply-To: Daniel =?utf-8?B?UC4gQmVycmFuZ8Op?= <berrange@redhat.com>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

On Wed, Mar 23, 2022 at 10:49:11AM +0800, zhenwei pi wrote:
> From: Lei He <helei.sig11@bytedance.com>
> 
> Add unit test and benchmark test for crypto akcipher.
> 
> Signed-off-by: lei he <helei.sig11@bytedance.com>
> Signed-off-by: zhenwei pi <pizhenwei@bytedance.com>
> ---
>  tests/bench/benchmark-crypto-akcipher.c | 163 ++++++
>  tests/bench/meson.build                 |   6 +
>  tests/bench/test_akcipher_keys.inc      | 277 +++++++++
>  tests/unit/meson.build                  |   1 +
>  tests/unit/test-crypto-akcipher.c       | 715 ++++++++++++++++++++++++
>  5 files changed, 1162 insertions(+)
>  create mode 100644 tests/bench/benchmark-crypto-akcipher.c
>  create mode 100644 tests/bench/test_akcipher_keys.inc
>  create mode 100644 tests/unit/test-crypto-akcipher.c
> 
> diff --git a/tests/bench/benchmark-crypto-akcipher.c b/tests/bench/benchmark-crypto-akcipher.c
> new file mode 100644
> index 0000000000..152fed8d73
> --- /dev/null
> +++ b/tests/bench/benchmark-crypto-akcipher.c
> @@ -0,0 +1,163 @@
> +/*
> + * QEMU Crypto cipher speed benchmark
> + *
> + * Copyright (c) 2022 Bytedance
> + *
> + * Authors:
> + *    lei he <helei.sig11@bytedance.com>
> + *
> + * This work is licensed under the terms of the GNU GPL, version 2 or
> + * (at your option) any later version.  See the COPYING file in the
> + * top-level directory.
> + */
> +
> +#include "qemu/osdep.h"
> +#include "crypto/init.h"
> +#include "crypto/akcipher.h"
> +#include "standard-headers/linux/virtio_crypto.h"
> +
> +#include "test_akcipher_keys.inc"
> +
> +static bool keep_running;
> +
> +static void alarm_handler(int sig)
> +{
> +    keep_running = false;
> +}
> +
> +static QCryptoAkcipher *create_rsa_akcipher(const uint8_t *priv_key,
> +                                            size_t keylen,
> +                                            QCryptoRsaPaddingAlgorithm padding,
> +                                            QCryptoRsaHashAlgorithm hash)
> +{
> +    QCryptoRsaOptions opt;
> +    QCryptoAkcipher *rsa;
> +    Error *err = NULL;
> +
> +    opt.padding_algo = padding;
> +    opt.hash_algo = hash;
> +    rsa = qcrypto_akcipher_new(QCRYPTO_AKCIPHER_ALG_RSA,
> +                               QCRYPTO_AKCIPHER_KEY_TYPE_PRIVATE,
> +                               priv_key, keylen, &opt, &err);
> +
> +    g_assert(rsa != NULL);
> +    return rsa;
> +}
> +
> +static void test_rsa_speed(const uint8_t *priv_key, size_t keylen,
> +                           size_t key_size)
> +{
> +#define Byte 8
> +#define SHA1_DGST_LEN 40
> +#define DURATION_SECONDS 10
> +#define padding QCRYPTO_RSA_PADDING_ALG_PKCS1
> +#define hash QCRYPTO_RSA_HASH_ALG_SHA1

'Byte' 'padding' and 'duration' are 

> +
> +    Error *err = NULL;
> +    QCryptoAkcipher *rsa;
> +    uint8_t *dgst, *signature;
> +    size_t count;
> +
> +    rsa = create_rsa_akcipher(priv_key, keylen, padding, hash);
> +
> +    dgst = g_new0(uint8_t, SHA1_DGST_LEN);
> +    memset(dgst, g_test_rand_int(), SHA1_DGST_LEN);
> +    signature = g_new0(uint8_t, key_size / Byte);
> +
> +    g_test_message("benchmark rsa%lu (%s-%s) sign in %d seconds", key_size,
> +                   QCryptoRsaPaddingAlgorithm_str(padding),
> +                   QCryptoRsaHashAlgorithm_str(hash),
> +                   DURATION_SECONDS);
> +    alarm(DURATION_SECONDS);
> +    g_test_timer_start();
> +    for (keep_running = true, count = 0; keep_running; ++count) {
> +        g_assert(qcrypto_akcipher_sign(rsa, dgst, SHA1_DGST_LEN,
> +                                       signature, key_size / Byte, &err) > 0);
> +    }
> +    g_test_timer_elapsed();



> +    g_test_message("rsa%lu (%s-%s) sign %lu times in %.2f seconds,"
> +                   " %.2f times/sec ",
> +                   key_size,  QCryptoRsaPaddingAlgorithm_str(padding),
> +                   QCryptoRsaHashAlgorithm_str(hash),
> +                   count, g_test_timer_last(),
> +                   (double)count / g_test_timer_last());
> +
> +    g_test_message("benchmark rsa%lu (%s-%s) verify in %d seconds", key_size,
> +                   QCryptoRsaPaddingAlgorithm_str(padding),
> +                   QCryptoRsaHashAlgorithm_str(hash),
> +                   DURATION_SECONDS);
> +    alarm(DURATION_SECONDS);
> +    g_test_timer_start();
> +    for (keep_running = true, count = 0; keep_running; ++count) {
> +        g_assert(qcrypto_akcipher_verify(rsa, signature, key_size / Byte,
> +                                         dgst, SHA1_DGST_LEN, &err) == 0);
> +    }
> +    g_test_timer_elapsed();
> +    g_test_message("rsa%lu (%s-%s) verify %lu times in %.2f seconds,"
> +                   " %.2f times/sec ",
> +                   key_size, QCryptoRsaPaddingAlgorithm_str(padding),
> +                   QCryptoRsaHashAlgorithm_str(hash),
> +                   count, g_test_timer_last(),
> +                   (double)count / g_test_timer_last());
> +
> +    g_assert(qcrypto_akcipher_free(rsa, &err) == 0);
> +    g_free(dgst);
> +    g_free(signature);
> +}
> +
> +static void test_rsa_1024_speed(const void *opaque)
> +{
> +    size_t key_size = (size_t)opaque;
> +    test_rsa_speed(rsa1024_priv_key, sizeof(rsa1024_priv_key), key_size);
> +}
> +
> +static void test_rsa_2048_speed(const void *opaque)
> +{
> +    size_t key_size = (size_t)opaque;
> +    test_rsa_speed(rsa2048_priv_key, sizeof(rsa2048_priv_key), key_size);
> +}
> +
> +static void test_rsa_4096_speed(const void *opaque)
> +{
> +    size_t key_size = (size_t)opaque;
> +    test_rsa_speed(rsa4096_priv_key, sizeof(rsa4096_priv_key), key_size);
> +}
> +
> +int main(int argc, char **argv)
> +{
> +    char *alg = NULL;
> +    char *size = NULL;
> +    g_test_init(&argc, &argv, NULL);
> +    g_assert(qcrypto_init(NULL) == 0);
> +    struct sigaction new_action, old_action;
> +
> +    new_action.sa_handler = alarm_handler;
> +
> +    /* Set up the structure to specify the new action. */
> +    sigemptyset(&new_action.sa_mask);
> +    new_action.sa_flags = 0;
> +    sigaction(SIGALRM, NULL, &old_action);
> +    g_assert(old_action.sa_handler != SIG_IGN);
> +    sigaction(SIGALRM, &new_action, NULL);
> +
> +#define ADD_TEST(asym_alg, keysize)                    \
> +    if ((!alg || g_str_equal(alg, #asym_alg)) &&       \
> +        (!size || g_str_equal(size, #keysize)))        \
> +        g_test_add_data_func(                          \
> +        "/crypto/akcipher/" #asym_alg "-" #keysize,    \
> +        (void *)keysize,                               \
> +        test_ ## asym_alg ## _ ## keysize ## _speed)
> +
> +    if (argc >= 2) {
> +        alg = argv[1];
> +    }
> +    if (argc >= 3) {
> +        size = argv[2];
> +    }
> +
> +    ADD_TEST(rsa, 1024);
> +    ADD_TEST(rsa, 2048);
> +    ADD_TEST(rsa, 4096);
> +
> +    return g_test_run();
> +}
> diff --git a/tests/bench/meson.build b/tests/bench/meson.build
> index 00b3c209dc..92491538f9 100644
> --- a/tests/bench/meson.build
> +++ b/tests/bench/meson.build
> @@ -23,6 +23,12 @@ if have_block
>    }
>  endif
>  
> +if nettle.found() and hogweed.found()
> +    benchs += {
> +        'benchmark-crypto-akcipher': [crypto],
> +    }
> +endif
> +
>  foreach bench_name, deps: benchs
>    exe = executable(bench_name, bench_name + '.c',
>                     dependencies: [qemuutil] + deps)
> diff --git a/tests/bench/test_akcipher_keys.inc b/tests/bench/test_akcipher_keys.inc
> new file mode 100644
> index 0000000000..6c291b9542
> --- /dev/null
> +++ b/tests/bench/test_akcipher_keys.inc
> @@ -0,0 +1,277 @@
> +/*
> + * Copyright (c) 2022 Bytedance, and/or its affiliates
> + *
> + * This work is licensed under the terms of the GNU GPL, version 2 or later.
> + * See the COPYING file in the top-level directory.
> + *
> + * Author: lei he <helei.sig11@bytedance.com>
> + */
> +
> +/* RSA test keys, generated by OpenSSL */
> +static const uint8_t rsa1024_priv_key[] = {
> +    0x30, 0x82, 0x02, 0x5c, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xe6, 0x4d, 0x76, 0x4f, 0xb2,
> +    0x97, 0x09, 0xad, 0x9d, 0x17, 0x33, 0xf2, 0x30, 0x42, 0x83, 0xa9, 0xcb, 0x49, 0xa4, 0x2e, 0x59,
> +    0x5e, 0x75, 0x51, 0xd1, 0xac, 0xc8, 0x86, 0x3e, 0xdb, 0x72, 0x2e, 0xb2, 0xf7, 0xc3, 0x5b, 0xc7,
> +    0xea, 0xed, 0x30, 0xd1, 0xf7, 0x37, 0xee, 0x9d, 0x36, 0x59, 0x6f, 0xf8, 0xce, 0xc0, 0x5c, 0x82,
> +    0x80, 0x37, 0x83, 0xd7, 0x45, 0x6a, 0xe9, 0xea, 0xc5, 0x3a, 0x59, 0x6b, 0x34, 0x31, 0x44, 0x00,
> +    0x74, 0xa7, 0x29, 0xab, 0x79, 0x4a, 0xbd, 0xe8, 0x25, 0x35, 0x01, 0x11, 0x40, 0xbf, 0x31, 0xbd,
> +    0xd3, 0xe0, 0x68, 0x1e, 0xd5, 0x5b, 0x2f, 0xe9, 0x20, 0xf2, 0x9f, 0x46, 0x35, 0x30, 0xa8, 0xf1,
> +    0xfe, 0xef, 0xd8, 0x76, 0x23, 0x46, 0x34, 0x70, 0xa1, 0xce, 0xc6, 0x65, 0x6d, 0xb0, 0x94, 0x7e,
> +    0xe5, 0x92, 0x45, 0x7b, 0xaa, 0xbb, 0x95, 0x97, 0x77, 0xcd, 0xd3, 0x02, 0x03, 0x01, 0x00, 0x01,
> +    0x02, 0x81, 0x80, 0x30, 0x6a, 0xc4, 0x9e, 0xc8, 0xba, 0xfc, 0x2b, 0xe5, 0xc4, 0xc5, 0x04, 0xfb,
> +    0xa4, 0x60, 0x2d, 0xc8, 0x31, 0x39, 0x35, 0x0d, 0x50, 0xd0, 0x75, 0x5d, 0x11, 0x68, 0x2e, 0xe0,
> +    0xf4, 0x1d, 0xb3, 0x37, 0xa8, 0xe3, 0x07, 0x5e, 0xa6, 0x43, 0x2b, 0x6a, 0x59, 0x01, 0x07, 0x47,
> +    0x41, 0xef, 0xd7, 0x9c, 0x85, 0x4a, 0xe7, 0xa7, 0xff, 0xf0, 0xab, 0xe5, 0x0c, 0x11, 0x08, 0x10,
> +    0x75, 0x5a, 0x68, 0xa0, 0x08, 0x03, 0xc9, 0x40, 0x79, 0x67, 0x1d, 0x65, 0x89, 0x2d, 0x08, 0xf9,
> +    0xb5, 0x1b, 0x7d, 0xd2, 0x41, 0x3b, 0x33, 0xf2, 0x47, 0x2f, 0x9c, 0x0b, 0xd5, 0xaf, 0xcb, 0xdb,
> +    0xbb, 0x37, 0x63, 0x03, 0xf8, 0xe7, 0x2e, 0xc7, 0x3c, 0x86, 0x9f, 0xc2, 0x9b, 0xb4, 0x70, 0x6a,
> +    0x4d, 0x7c, 0xe4, 0x1b, 0x3a, 0xa9, 0xae, 0xd7, 0xce, 0x7f, 0x56, 0xc2, 0x73, 0x5e, 0x58, 0x63,
> +    0xd5, 0x86, 0x41, 0x02, 0x41, 0x00, 0xf6, 0x56, 0x69, 0xec, 0xef, 0x65, 0x95, 0xdc, 0x25, 0x47,
> +    0xe0, 0x6f, 0xb0, 0x4f, 0x79, 0x77, 0x0a, 0x5e, 0x46, 0xcb, 0xbd, 0x0b, 0x71, 0x51, 0x2a, 0xa4,
> +    0x65, 0x29, 0x18, 0xc6, 0x30, 0xa0, 0x95, 0x4c, 0x4b, 0xbe, 0x8c, 0x40, 0xe3, 0x9c, 0x23, 0x02,
> +    0x14, 0x43, 0xe9, 0x64, 0xea, 0xe3, 0xa8, 0xe2, 0x1a, 0xd5, 0xf9, 0x5c, 0xe0, 0x36, 0x2c, 0x97,
> +    0xda, 0xd5, 0xc7, 0x46, 0xce, 0x11, 0x02, 0x41, 0x00, 0xef, 0x56, 0x08, 0xb8, 0x29, 0xa5, 0xa6,
> +    0x7c, 0xf7, 0x5f, 0xb4, 0xf5, 0x63, 0xe7, 0xeb, 0x45, 0xfd, 0x89, 0xaa, 0x94, 0xa6, 0x3d, 0x0b,
> +    0xd9, 0x04, 0x6f, 0x78, 0xe0, 0xbb, 0xa2, 0xd4, 0x29, 0x83, 0x17, 0x95, 0x6f, 0x50, 0x3d, 0x40,
> +    0x5d, 0xe5, 0x24, 0xda, 0xc2, 0x23, 0x50, 0x86, 0xa8, 0x34, 0xc8, 0x6f, 0xec, 0x7f, 0xb6, 0x45,
> +    0x3a, 0xdd, 0x78, 0x9b, 0xee, 0xa1, 0xe4, 0x09, 0xa3, 0x02, 0x40, 0x5c, 0xd6, 0x66, 0x67, 0x58,
> +    0x35, 0xc5, 0xcb, 0xc8, 0xf5, 0x14, 0xbd, 0xa3, 0x09, 0xe0, 0xb2, 0x1f, 0x63, 0x36, 0x75, 0x34,
> +    0x52, 0xea, 0xaa, 0xf7, 0x52, 0x2b, 0x99, 0xd8, 0x6f, 0x61, 0x06, 0x34, 0x1e, 0x23, 0xf1, 0xb5,
> +    0x34, 0x03, 0x53, 0xe5, 0xd1, 0xb3, 0xc7, 0x80, 0x5f, 0x7b, 0x32, 0xbf, 0x84, 0x2f, 0x2e, 0xf3,
> +    0x22, 0xb0, 0x91, 0x5a, 0x2f, 0x04, 0xd7, 0x4a, 0x9a, 0x01, 0xb1, 0x02, 0x40, 0x34, 0x0b, 0x26,
> +    0x4c, 0x3d, 0xaa, 0x2a, 0xc0, 0xe3, 0xdd, 0xe8, 0xf0, 0xaf, 0x6f, 0xe0, 0x06, 0x51, 0x32, 0x9d,
> +    0x68, 0x43, 0x99, 0xe4, 0xb8, 0xa5, 0x31, 0x44, 0x3c, 0xc2, 0x30, 0x8f, 0x28, 0x13, 0xbc, 0x8e,
> +    0x1f, 0x2d, 0x78, 0x94, 0x45, 0x96, 0xad, 0x63, 0xf0, 0x71, 0x53, 0x72, 0x64, 0xa3, 0x4d, 0xae,
> +    0xa0, 0xe3, 0xc8, 0x93, 0xd7, 0x50, 0x0f, 0x89, 0x00, 0xe4, 0x2d, 0x3d, 0x37, 0x02, 0x41, 0x00,
> +    0xbe, 0xa6, 0x08, 0xe0, 0xc8, 0x15, 0x2a, 0x47, 0xcb, 0xd5, 0xec, 0x93, 0xd3, 0xaa, 0x12, 0x82,
> +    0xaf, 0xac, 0x51, 0x5a, 0x5b, 0xa7, 0x93, 0x4b, 0xb9, 0xab, 0x00, 0xfa, 0x5a, 0xea, 0x34, 0xe4,
> +    0x80, 0xf1, 0x44, 0x6a, 0x65, 0xe4, 0x33, 0x99, 0xfb, 0x54, 0xd7, 0x89, 0x5a, 0x1b, 0xd6, 0x2b,
> +    0xcc, 0x6e, 0x4b, 0x19, 0xa0, 0x6d, 0x93, 0x9f, 0xc3, 0x91, 0x7a, 0xa5, 0xd8, 0x59, 0x0e, 0x9e,
> +};
> +
> +static const uint8_t rsa2048_priv_key[] = {
> +    0x30, 0x82, 0x04, 0xa4, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xbd, 0x9c, 0x83, 0x6b,
> +    0x0e, 0x8e, 0xcf, 0xfa, 0xaa, 0x4f, 0x6a, 0xf4, 0xe3, 0x52, 0x0f, 0xa5, 0xd0, 0xbe, 0x5e, 0x7f,
> +    0x08, 0x24, 0xba, 0x87, 0x46, 0xfb, 0x28, 0x93, 0xe5, 0xe5, 0x81, 0x42, 0xc0, 0xf9, 0x17, 0xc7,
> +    0x81, 0x01, 0xf4, 0x18, 0x6a, 0x17, 0xf5, 0x57, 0x20, 0x37, 0xcf, 0xf9, 0x74, 0x5e, 0xe1, 0x48,
> +    0x6a, 0x71, 0x0a, 0x0f, 0x79, 0x72, 0x2b, 0x46, 0x10, 0x53, 0xdc, 0x14, 0x43, 0xbd, 0xbc, 0x6d,
> +    0x15, 0x6f, 0x15, 0x4e, 0xf0, 0x0d, 0x89, 0x39, 0x02, 0xc3, 0x68, 0x5c, 0xa8, 0xfc, 0xed, 0x64,
> +    0x9d, 0x98, 0xb7, 0xcd, 0x83, 0x66, 0x93, 0xc3, 0xd9, 0x57, 0xa0, 0x21, 0x93, 0xad, 0x5c, 0x75,
> +    0x69, 0x88, 0x9e, 0x81, 0xdc, 0x7f, 0x1d, 0xd5, 0xbd, 0x1c, 0xc1, 0x30, 0x56, 0xa5, 0xda, 0x99,
> +    0x46, 0xa6, 0x6d, 0x0e, 0x6f, 0x5e, 0x51, 0x34, 0x49, 0x73, 0xc3, 0x67, 0x49, 0x7e, 0x21, 0x2a,
> +    0x20, 0xa7, 0x2b, 0x92, 0x73, 0x1d, 0xa5, 0x25, 0x2a, 0xd0, 0x3a, 0x89, 0x75, 0xb2, 0xbb, 0x19,
> +    0x37, 0x78, 0x48, 0xd2, 0xf2, 0x2a, 0x6d, 0x9e, 0xc6, 0x26, 0xca, 0x46, 0x8c, 0xf1, 0x42, 0x2a,
> +    0x31, 0xb2, 0xfc, 0xe7, 0x55, 0x51, 0xff, 0x07, 0x13, 0x5b, 0x36, 0x59, 0x2b, 0x43, 0x30, 0x4b,
> +    0x05, 0x5c, 0xd2, 0x45, 0xa0, 0xa0, 0x7c, 0x17, 0x5b, 0x07, 0xbb, 0x5d, 0x83, 0x80, 0x92, 0x6d,
> +    0x87, 0x1a, 0x43, 0xac, 0xc7, 0x6b, 0x8d, 0x11, 0x60, 0x27, 0xd2, 0xdf, 0xdb, 0x71, 0x02, 0x55,
> +    0x6e, 0xb5, 0xca, 0x4d, 0xda, 0x59, 0x0d, 0xb8, 0x8c, 0xcd, 0xd3, 0x0e, 0x55, 0xa0, 0xa4, 0x8d,
> +    0xa0, 0x14, 0x10, 0x48, 0x42, 0x35, 0x56, 0x08, 0xf7, 0x29, 0x5f, 0xa2, 0xea, 0xa4, 0x5e, 0x8e,
> +    0x99, 0x56, 0xaa, 0x5a, 0x8c, 0x23, 0x8f, 0x35, 0x22, 0x8a, 0xff, 0xed, 0x02, 0x03, 0x01, 0x00,
> +    0x01, 0x02, 0x82, 0x01, 0x00, 0x4e, 0x4a, 0xf3, 0x44, 0xe0, 0x64, 0xfd, 0xe1, 0xde, 0x33, 0x1e,
> +    0xd1, 0xf1, 0x8f, 0x6f, 0xe0, 0xa2, 0xfa, 0x08, 0x60, 0xe1, 0xc6, 0xf0, 0xb2, 0x6d, 0x0f, 0xc6,
> +    0x28, 0x93, 0xb4, 0x19, 0x94, 0xab, 0xc3, 0xef, 0x1a, 0xb4, 0xdd, 0x4e, 0xa2, 0x4a, 0x24, 0x8c,
> +    0x6c, 0xa6, 0x64, 0x05, 0x5f, 0x56, 0xba, 0xda, 0xc1, 0x21, 0x1a, 0x7d, 0xf1, 0xf7, 0xce, 0xb9,
> +    0xa9, 0x9b, 0x92, 0x54, 0xfc, 0x95, 0x20, 0x22, 0x4e, 0xd4, 0x9b, 0xe2, 0xab, 0x8e, 0x99, 0xb8,
> +    0x40, 0xaf, 0x30, 0x6a, 0xc6, 0x60, 0x0c, 0xd8, 0x25, 0x44, 0xa1, 0xcb, 0xbb, 0x73, 0x77, 0x86,
> +    0xaa, 0x46, 0xf3, 0x54, 0xae, 0xa8, 0xa0, 0xdb, 0xdd, 0xab, 0x6e, 0xfb, 0x2c, 0x5a, 0x14, 0xaf,
> +    0x08, 0x13, 0xa7, 0x6c, 0xe9, 0xfd, 0xcd, 0x4c, 0x1f, 0x20, 0x3a, 0x16, 0x2b, 0xf0, 0xb6, 0x7c,
> +    0x47, 0x5f, 0xd1, 0x0a, 0x2c, 0xc4, 0xa5, 0x68, 0xd0, 0x43, 0x75, 0x6b, 0x65, 0xaa, 0x32, 0xc6,
> +    0x99, 0x06, 0xcb, 0x8f, 0xe6, 0x8d, 0xce, 0xbf, 0x4d, 0x0d, 0x7b, 0x22, 0x2a, 0x8a, 0xcb, 0x7d,
> +    0x7f, 0x16, 0x48, 0x85, 0xf1, 0x86, 0xcb, 0x54, 0xb9, 0x39, 0xd4, 0xbc, 0xe3, 0x2d, 0x27, 0x59,
> +    0xf6, 0x81, 0x5e, 0x94, 0x45, 0xdf, 0xb9, 0x22, 0xaf, 0x64, 0x0d, 0x14, 0xec, 0x8c, 0xeb, 0x71,
> +    0xac, 0xee, 0x09, 0x4c, 0xbf, 0x34, 0xf9, 0xf4, 0x66, 0x77, 0x36, 0x3b, 0x41, 0x74, 0x01, 0x4f,
> +    0xfc, 0x56, 0x83, 0xba, 0x14, 0xb0, 0x2f, 0xdd, 0x4d, 0xb9, 0x3f, 0xdf, 0x71, 0xbe, 0x7b, 0xba,
> +    0x66, 0xc8, 0xc5, 0x42, 0xc9, 0xba, 0x18, 0x63, 0x45, 0x07, 0x2f, 0x84, 0x3e, 0xc3, 0xfb, 0x47,
> +    0xda, 0xd4, 0x1d, 0x0e, 0x9d, 0x96, 0xc0, 0xea, 0xee, 0x45, 0x2f, 0xe1, 0x62, 0x23, 0xee, 0xef,
> +    0x3d, 0x5e, 0x55, 0xa1, 0x0d, 0x02, 0x81, 0x81, 0x00, 0xeb, 0x76, 0x88, 0xd3, 0xae, 0x3f, 0x1d,
> +    0xf2, 0x49, 0xe0, 0x37, 0x49, 0x83, 0x82, 0x6c, 0xf7, 0xf1, 0x17, 0x30, 0x75, 0x2e, 0x89, 0x06,
> +    0x88, 0x56, 0x32, 0xf6, 0xfa, 0x58, 0xcb, 0x3c, 0x98, 0x67, 0xc3, 0xde, 0x10, 0x82, 0xe5, 0xfa,
> +    0xfa, 0x52, 0x47, 0x8d, 0xd7, 0x00, 0xc6, 0xcb, 0xf7, 0xf6, 0x57, 0x9b, 0x6e, 0x0c, 0xac, 0xe8,
> +    0x3b, 0xd1, 0xde, 0xb5, 0x34, 0xaf, 0x8b, 0x2a, 0xb0, 0x2d, 0x01, 0xeb, 0x7c, 0xa0, 0x42, 0x26,
> +    0xbb, 0x2b, 0x43, 0x0e, 0x1d, 0xe2, 0x4e, 0xc9, 0xc1, 0x0a, 0x67, 0x1d, 0xfc, 0x83, 0x25, 0xce,
> +    0xb2, 0x18, 0xd9, 0x0d, 0x70, 0xf5, 0xa3, 0x5a, 0x9c, 0x99, 0xdd, 0x47, 0xa1, 0x57, 0xe7, 0x20,
> +    0xde, 0xa1, 0x29, 0x8d, 0x96, 0x62, 0xf9, 0x26, 0x95, 0x51, 0xa6, 0xe7, 0x09, 0x8b, 0xba, 0x16,
> +    0x8b, 0x19, 0x5b, 0xf9, 0x27, 0x0d, 0xc5, 0xd6, 0x5f, 0x02, 0x81, 0x81, 0x00, 0xce, 0x26, 0x31,
> +    0xb5, 0x43, 0x53, 0x95, 0x39, 0xdd, 0x01, 0x98, 0x8b, 0x3d, 0x27, 0xeb, 0x0b, 0x87, 0x1c, 0x95,
> +    0xfc, 0x3e, 0x36, 0x51, 0x31, 0xb5, 0xea, 0x59, 0x56, 0xc0, 0x97, 0x62, 0xf0, 0x63, 0x2b, 0xb6,
> +    0x30, 0x9b, 0xdf, 0x19, 0x10, 0xe9, 0xa0, 0x3d, 0xea, 0x54, 0x5a, 0xe6, 0xc6, 0x9e, 0x7e, 0xb5,
> +    0xf0, 0xb0, 0x54, 0xef, 0xc3, 0xe1, 0x47, 0xa6, 0x95, 0xc7, 0xe4, 0xa3, 0x4a, 0x30, 0x68, 0x24,
> +    0x98, 0x7d, 0xc1, 0x34, 0xa9, 0xcb, 0xbc, 0x3c, 0x08, 0x9c, 0x7d, 0x0c, 0xa2, 0xb7, 0x60, 0xaa,
> +    0x38, 0x08, 0x16, 0xa6, 0x7f, 0xdb, 0xd2, 0xb1, 0x67, 0xe7, 0x93, 0x8e, 0xbb, 0x7e, 0xb9, 0xb5,
> +    0xd0, 0xd0, 0x9f, 0x7b, 0xcc, 0x46, 0xe6, 0x74, 0x78, 0x1a, 0x96, 0xd6, 0xd7, 0x74, 0x34, 0x54,
> +    0x3b, 0x54, 0x55, 0x7f, 0x89, 0x81, 0xbc, 0x40, 0x55, 0x87, 0x24, 0x95, 0x33, 0x02, 0x81, 0x81,
> +    0x00, 0xb0, 0x18, 0x5d, 0x2a, 0x1a, 0x95, 0x9f, 0x9a, 0xd5, 0x3f, 0x37, 0x79, 0xe6, 0x3d, 0x83,
> +    0xab, 0x46, 0x86, 0x36, 0x3a, 0x5d, 0x0c, 0x23, 0x73, 0x91, 0x2b, 0xda, 0x63, 0xce, 0x46, 0x68,
> +    0xd1, 0xfe, 0x40, 0x90, 0xf2, 0x3e, 0x43, 0x2b, 0x19, 0x4c, 0xb1, 0xb0, 0xd5, 0x8c, 0x02, 0x21,
> +    0x07, 0x18, 0x17, 0xda, 0xe9, 0x49, 0xd7, 0x82, 0x73, 0x42, 0x78, 0xd1, 0x82, 0x4e, 0x8a, 0xc0,
> +    0xe9, 0x33, 0x2f, 0xcd, 0x62, 0xce, 0x23, 0xca, 0xfd, 0x8d, 0xd4, 0x3f, 0x59, 0x80, 0x27, 0xb6,
> +    0x61, 0x85, 0x9b, 0x2a, 0xe4, 0xef, 0x5c, 0x36, 0x22, 0x21, 0xcd, 0x2a, 0x6d, 0x41, 0x77, 0xe2,
> +    0xcb, 0x5d, 0x93, 0x0d, 0x00, 0x10, 0x52, 0x8d, 0xd5, 0x92, 0x28, 0x16, 0x78, 0xd3, 0x1a, 0x4c,
> +    0x8d, 0xbd, 0x9c, 0x1a, 0x0b, 0x9c, 0x91, 0x16, 0x4c, 0xff, 0x31, 0x36, 0xbb, 0xcb, 0x64, 0x1a,
> +    0xf7, 0x02, 0x81, 0x80, 0x32, 0x65, 0x09, 0xdf, 0xca, 0xee, 0xa2, 0xdb, 0x3b, 0x58, 0xc9, 0x86,
> +    0xb8, 0x53, 0x8a, 0xd5, 0x0d, 0x99, 0x82, 0x5c, 0xe0, 0x84, 0x7c, 0xc2, 0xcf, 0x3a, 0xd3, 0xce,
> +    0x2e, 0x54, 0x93, 0xbe, 0x3a, 0x30, 0x14, 0x60, 0xbb, 0xaa, 0x05, 0x41, 0xaa, 0x2b, 0x1f, 0x17,
> +    0xaa, 0xb9, 0x72, 0x12, 0xf9, 0xe9, 0xf5, 0xe6, 0x39, 0xe4, 0xf9, 0x9c, 0x03, 0xf5, 0x75, 0x16,
> +    0xc6, 0x7f, 0xf1, 0x1f, 0x10, 0xc8, 0x54, 0xb1, 0xe6, 0x84, 0x15, 0xb0, 0xb0, 0x7a, 0x7a, 0x9e,
> +    0x8c, 0x4a, 0xd1, 0x8c, 0xf1, 0x91, 0x32, 0xeb, 0x71, 0xa6, 0xbf, 0xdb, 0x1f, 0xcc, 0xd8, 0xcb,
> +    0x92, 0xc3, 0xf2, 0xaf, 0x89, 0x22, 0x32, 0xfd, 0x32, 0x12, 0xda, 0xbb, 0xac, 0x55, 0x68, 0x01,
> +    0x78, 0x56, 0x89, 0x7c, 0xb0, 0x0e, 0x9e, 0xcc, 0xc6, 0x28, 0x04, 0x7e, 0x83, 0xf5, 0x96, 0x30,
> +    0x92, 0x51, 0xf2, 0x1b, 0x02, 0x81, 0x81, 0x00, 0x83, 0x6d, 0xd1, 0x98, 0x90, 0x41, 0x8c, 0xa7,
> +    0x92, 0x83, 0xac, 0x89, 0x05, 0x0c, 0x79, 0x67, 0x90, 0xb6, 0xa1, 0xf3, 0x2f, 0xca, 0xf0, 0x15,
> +    0xe0, 0x30, 0x58, 0xe9, 0x4f, 0xcb, 0x4c, 0x56, 0x56, 0x56, 0x14, 0x3f, 0x1b, 0x79, 0xb6, 0xef,
> +    0x57, 0x4b, 0x28, 0xbd, 0xb0, 0xe6, 0x0c, 0x49, 0x4b, 0xbe, 0xe1, 0x57, 0x28, 0x2a, 0x23, 0x5e,
> +    0xc4, 0xa2, 0x19, 0x4b, 0x00, 0x67, 0x78, 0xd9, 0x26, 0x6e, 0x17, 0x25, 0xce, 0xe4, 0xfd, 0xde,
> +    0x86, 0xa8, 0x5a, 0x67, 0x47, 0x6b, 0x15, 0x09, 0xe1, 0xec, 0x8e, 0x62, 0x98, 0x91, 0x6f, 0xc0,
> +    0x98, 0x0c, 0x70, 0x0e, 0x7d, 0xbe, 0x63, 0xbd, 0x12, 0x5a, 0x98, 0x1c, 0xe3, 0x0c, 0xfb, 0xc7,
> +    0xfb, 0x1b, 0xbd, 0x02, 0x87, 0xcc, 0x0c, 0xbb, 0xc2, 0xd4, 0xb6, 0xc1, 0xa1, 0x23, 0xd3, 0x1e,
> +    0x21, 0x6f, 0x48, 0xba, 0x0e, 0x2e, 0xc7, 0x42 };
> +
> +static const uint8_t rsa4096_priv_key[] = {
> +    0x30, 0x82, 0x09, 0x29, 0x02, 0x01, 0x00, 0x02, 0x82, 0x02, 0x01, 0x00, 0xcc, 0x30, 0xc6, 0x90,
> +    0x49, 0x2b, 0x86, 0xe7, 0x7a, 0xa5, 0x7a, 0x9a, 0x4f, 0xee, 0x0e, 0xa1, 0x5c, 0x43, 0x64, 0xd0,
> +    0x76, 0xe1, 0xfd, 0x0b, 0xfd, 0x43, 0x7a, 0x65, 0xe6, 0x20, 0xbd, 0xf2, 0x0e, 0xbe, 0x76, 0x54,
> +    0xae, 0x37, 0xbe, 0xa0, 0x02, 0x96, 0xae, 0x8d, 0x8a, 0xae, 0x3b, 0x88, 0xbb, 0x67, 0xce, 0x7c,
> +    0x20, 0xbf, 0x14, 0xc3, 0x71, 0x51, 0x87, 0x03, 0x34, 0xaa, 0x3c, 0x09, 0xff, 0xe9, 0xeb, 0xb7,
> +    0x85, 0x5c, 0xbb, 0x8d, 0xce, 0x8e, 0x3f, 0xd1, 0x16, 0x30, 0x00, 0x32, 0x2f, 0x25, 0x8d, 0xef,
> +    0x71, 0xd9, 0xea, 0x6b, 0x45, 0x53, 0x49, 0xc3, 0x09, 0x4f, 0xb0, 0xa8, 0xa5, 0x89, 0x76, 0x59,
> +    0x31, 0xa5, 0xf1, 0x5c, 0x42, 0x54, 0x57, 0x70, 0x57, 0xad, 0xd8, 0xeb, 0x89, 0xa6, 0x87, 0xa2,
> +    0x6c, 0x95, 0x58, 0x8f, 0xb6, 0x82, 0xc7, 0xde, 0xc2, 0x3a, 0xdc, 0x5b, 0xe8, 0x02, 0xcc, 0x26,
> +    0x4b, 0x01, 0xaa, 0xe6, 0xf3, 0x66, 0x4d, 0x90, 0x85, 0xde, 0xf4, 0x5d, 0x80, 0x98, 0xc6, 0x65,
> +    0xcf, 0x44, 0x4c, 0xde, 0xb5, 0x4a, 0xfc, 0xda, 0x0a, 0x0a, 0x10, 0x26, 0xa3, 0xcb, 0x9d, 0xe4,
> +    0x8d, 0xab, 0x2c, 0x04, 0xfd, 0xaa, 0xfc, 0x3b, 0xac, 0x4e, 0x56, 0xb8, 0x4c, 0x9f, 0x22, 0x49,
> +    0xcb, 0x76, 0x45, 0x24, 0x36, 0x2d, 0xbb, 0xe6, 0x7e, 0xa9, 0x93, 0x13, 0x96, 0x1e, 0xfc, 0x4b,
> +    0x75, 0xd4, 0x54, 0xc8, 0x8c, 0x55, 0xe6, 0x3f, 0x09, 0x5a, 0x03, 0x74, 0x7c, 0x8a, 0xc8, 0xe7,
> +    0x49, 0x0b, 0x86, 0x7c, 0x97, 0xa0, 0xf2, 0x0d, 0xf1, 0x5c, 0x0e, 0x7a, 0xc0, 0x3f, 0x78, 0x2d,
> +    0x9b, 0xe2, 0x26, 0xa0, 0x89, 0x49, 0x0c, 0xad, 0x79, 0xa6, 0x82, 0x98, 0xa6, 0xb7, 0x74, 0xb4,
> +    0x45, 0xc8, 0xed, 0xea, 0x81, 0xcd, 0xf0, 0x3b, 0x8e, 0x24, 0xfb, 0x0c, 0xd0, 0x3a, 0x14, 0xb9,
> +    0xb4, 0x3b, 0x69, 0xd9, 0xf2, 0x42, 0x6e, 0x7f, 0x6f, 0x5e, 0xb1, 0x52, 0x5b, 0xaa, 0xef, 0xae,
> +    0x1e, 0x34, 0xca, 0xed, 0x0a, 0x8d, 0x56, 0xd6, 0xdd, 0xd4, 0x2c, 0x54, 0x7a, 0x57, 0xca, 0x7e,
> +    0x4a, 0x11, 0xde, 0x48, 0xdf, 0x2b, 0x09, 0x97, 0x39, 0x24, 0xce, 0x45, 0xe0, 0x75, 0xb1, 0x19,
> +    0x42, 0xdb, 0x63, 0x40, 0x9b, 0xb9, 0x95, 0x96, 0x78, 0x91, 0xd5, 0x19, 0x12, 0xab, 0xef, 0x55,
> +    0x6f, 0x0d, 0x65, 0xc0, 0x8f, 0x62, 0x99, 0x78, 0xc0, 0xe0, 0xe1, 0x33, 0xc7, 0x68, 0xff, 0x29,
> +    0x66, 0x22, 0x3a, 0x6f, 0xa0, 0xf8, 0x5c, 0x68, 0x9b, 0xa9, 0x05, 0xad, 0x6b, 0x1d, 0xae, 0xc1,
> +    0x30, 0xbb, 0xfe, 0xb7, 0x31, 0x85, 0x0d, 0xd1, 0xd5, 0xfc, 0x43, 0x1e, 0xb3, 0x61, 0x6f, 0xc4,
> +    0x75, 0xed, 0x76, 0x9d, 0x13, 0xb3, 0x61, 0x57, 0xc8, 0x33, 0x0d, 0x77, 0x84, 0xf0, 0xc7, 0x62,
> +    0xb9, 0x9e, 0xd5, 0x01, 0xfa, 0x87, 0x4a, 0xf5, 0xd7, 0x4f, 0x5d, 0xae, 0xe7, 0x08, 0xd2, 0x5a,
> +    0x65, 0x30, 0xc9, 0xf0, 0x0a, 0x11, 0xf1, 0x2a, 0xd3, 0x43, 0x43, 0xca, 0x05, 0x90, 0x85, 0xf4,
> +    0xbc, 0x37, 0x49, 0x40, 0x45, 0x35, 0xd3, 0x56, 0x06, 0x4c, 0x63, 0x93, 0x07, 0x14, 0x8b, 0xd3,
> +    0x12, 0xd0, 0xe5, 0x00, 0x48, 0x76, 0xd2, 0xdf, 0x7c, 0xea, 0xc7, 0xff, 0xf0, 0x88, 0xd5, 0xa4,
> +    0x61, 0x7d, 0x79, 0xc2, 0xda, 0x53, 0x24, 0xdc, 0x20, 0xae, 0xe6, 0x08, 0x65, 0xef, 0xc9, 0x0d,
> +    0x7d, 0x66, 0x6d, 0x1b, 0x1c, 0x5d, 0x46, 0xe1, 0x26, 0x8a, 0x29, 0x77, 0x76, 0x19, 0xe5, 0x19,
> +    0x2a, 0x75, 0x21, 0xf1, 0x92, 0x8a, 0x9c, 0x7b, 0xe8, 0x0b, 0x38, 0xc1, 0xbf, 0x76, 0x22, 0x45,
> +    0x4a, 0xd3, 0x43, 0xc3, 0x8c, 0x74, 0xd8, 0xd8, 0xec, 0x3e, 0x14, 0xdf, 0x02, 0x03, 0x01, 0x00,
> +    0x01, 0x02, 0x82, 0x02, 0x01, 0x00, 0x9e, 0x13, 0x64, 0xa5, 0x6e, 0xff, 0xf3, 0x80, 0x60, 0xc2,
> +    0x9b, 0x17, 0xbb, 0xa9, 0x60, 0x4a, 0x2b, 0x53, 0x41, 0x48, 0xe1, 0xc0, 0x32, 0x56, 0x85, 0xcb,
> +    0x27, 0x86, 0x9b, 0x91, 0xdd, 0x7a, 0xf7, 0x4f, 0x1b, 0xec, 0x92, 0xb3, 0x35, 0x30, 0x4a, 0xd0,
> +    0xbc, 0x71, 0x77, 0x5b, 0x4b, 0x5b, 0x9f, 0x39, 0xcd, 0xf0, 0xea, 0xa9, 0x03, 0x3a, 0x0b, 0x10,
> +    0x42, 0xa5, 0x88, 0xb0, 0x01, 0xaa, 0xfc, 0x23, 0xec, 0x08, 0x37, 0x86, 0x82, 0xec, 0x55, 0x6c,
> +    0x6a, 0x9b, 0x43, 0xc2, 0x05, 0x64, 0xd4, 0x7b, 0x0e, 0x56, 0xc0, 0x9d, 0x23, 0x8d, 0xc8, 0x2d,
> +    0xa2, 0x7d, 0x0b, 0x48, 0x56, 0x4b, 0x39, 0x5c, 0x21, 0xf3, 0x0b, 0x2c, 0x9c, 0x9d, 0xff, 0xfb,
> +    0xab, 0x75, 0x9d, 0x6b, 0x48, 0xf3, 0x8f, 0xad, 0x0c, 0x74, 0x01, 0xfb, 0xdc, 0x83, 0xe5, 0x97,
> +    0x79, 0x84, 0x4a, 0x79, 0xa6, 0xfe, 0xbf, 0xae, 0xea, 0xbc, 0xfa, 0x74, 0x60, 0x0a, 0x4b, 0x84,
> +    0x77, 0xa7, 0xda, 0xfb, 0xaf, 0xd2, 0x73, 0x2b, 0xd2, 0xec, 0x1e, 0x79, 0x91, 0xc9, 0x18, 0x30,
> +    0xe5, 0x6f, 0x27, 0x36, 0x83, 0x2a, 0x66, 0xc3, 0xcb, 0x88, 0x94, 0xe4, 0x5f, 0x3f, 0xbd, 0xe2,
> +    0x11, 0x43, 0x61, 0x31, 0x84, 0x91, 0x49, 0x40, 0x29, 0x1b, 0x58, 0x18, 0x47, 0x8e, 0xb1, 0x22,
> +    0xd6, 0xc4, 0xaa, 0x6a, 0x3d, 0x22, 0x7c, 0xa5, 0xa0, 0x4c, 0x0a, 0xfc, 0x46, 0x66, 0xbb, 0xbe,
> +    0x04, 0x71, 0xe8, 0x9b, 0x76, 0xf1, 0x47, 0x39, 0x6a, 0x2f, 0x23, 0xad, 0x78, 0x80, 0x1c, 0x22,
> +    0xcd, 0x41, 0x5e, 0x09, 0x16, 0x6c, 0x91, 0x48, 0x91, 0x91, 0x3d, 0x8c, 0xe6, 0xba, 0x81, 0x8d,
> +    0xbb, 0xf2, 0xd0, 0xaa, 0xc7, 0x8f, 0xc6, 0x01, 0x60, 0xa7, 0xef, 0x1e, 0x8e, 0x91, 0x6d, 0xcc,
> +    0x30, 0x9e, 0xea, 0x7c, 0x56, 0x9d, 0x42, 0xcf, 0x44, 0x85, 0x52, 0xa8, 0xf2, 0x36, 0x9c, 0x46,
> +    0xfa, 0x9d, 0xd3, 0x4e, 0x13, 0x46, 0x81, 0xce, 0x99, 0xc9, 0x58, 0x47, 0xe4, 0xeb, 0x27, 0x56,
> +    0x29, 0x61, 0x0f, 0xb5, 0xcb, 0xf3, 0x48, 0x58, 0x8f, 0xbc, 0xaf, 0x0a, 0xbf, 0x40, 0xd1, 0xf6,
> +    0x4f, 0xd2, 0x89, 0x4a, 0xff, 0x6f, 0x54, 0x70, 0x49, 0x42, 0xf6, 0xf8, 0x0e, 0x4f, 0xa5, 0xf6,
> +    0x8b, 0x49, 0x80, 0xd4, 0xf5, 0x03, 0xf8, 0x65, 0xe7, 0x1f, 0x0a, 0xc0, 0x8f, 0xd3, 0x7a, 0x70,
> +    0xca, 0x67, 0xaf, 0x71, 0xfd, 0x4b, 0xe1, 0x17, 0x76, 0x74, 0x2e, 0x12, 0x7b, 0xad, 0x4b, 0xbb,
> +    0xd2, 0x64, 0xd0, 0xa9, 0xf9, 0x79, 0xa9, 0xa6, 0x03, 0xd2, 0xc2, 0x8f, 0x47, 0x59, 0x1b, 0x7c,
> +    0xe3, 0xce, 0x92, 0xb2, 0xac, 0x3e, 0xee, 0x12, 0x43, 0x5f, 0x23, 0xec, 0xf1, 0xd3, 0xf2, 0x21,
> +    0x22, 0xe8, 0x7e, 0x7f, 0xa4, 0x93, 0x8e, 0x78, 0x69, 0x69, 0xa0, 0xc9, 0xce, 0x86, 0x36, 0x13,
> +    0x10, 0x21, 0xc4, 0x7a, 0x52, 0xcf, 0x53, 0xd9, 0x9b, 0x58, 0xe6, 0x2d, 0xeb, 0x60, 0xe3, 0x75,
> +    0x1a, 0x22, 0xf6, 0x3c, 0x54, 0x6b, 0xfa, 0xa1, 0x5d, 0xf6, 0x38, 0xf0, 0xd4, 0x26, 0x2d, 0x7d,
> +    0x74, 0x99, 0x6a, 0x13, 0x8a, 0x07, 0x9f, 0x07, 0xc5, 0xf4, 0xa8, 0x20, 0x11, 0xa9, 0x76, 0x11,
> +    0xe4, 0x48, 0xae, 0xa4, 0x8a, 0xa1, 0xbf, 0x1f, 0xba, 0x37, 0x50, 0x53, 0x43, 0x91, 0x45, 0x88,
> +    0x03, 0x52, 0xba, 0xac, 0xc8, 0xe3, 0xe1, 0xba, 0x63, 0x24, 0x72, 0xbe, 0x1d, 0x01, 0x1f, 0x6c,
> +    0x34, 0x10, 0xb8, 0x56, 0x4a, 0x67, 0x28, 0x4b, 0x7a, 0x2b, 0x31, 0x29, 0x47, 0xda, 0xdf, 0x53,
> +    0x88, 0x79, 0x22, 0x31, 0x15, 0x56, 0xe3, 0xa0, 0x79, 0x75, 0x94, 0x90, 0xb2, 0xe8, 0x4b, 0xca,
> +    0x82, 0x6d, 0x3c, 0x69, 0x43, 0x01, 0x02, 0x82, 0x01, 0x01, 0x00, 0xe7, 0x8b, 0xd6, 0x1a, 0xe8,
> +    0x00, 0xed, 0x9d, 0x7c, 0x5a, 0x32, 0x10, 0xc1, 0x53, 0x50, 0xbe, 0x27, 0x1d, 0xef, 0x69, 0x73,
> +    0xa2, 0x8f, 0x95, 0x96, 0x86, 0xfe, 0xfb, 0x82, 0xdb, 0xea, 0x7d, 0x73, 0x5a, 0x2b, 0xe7, 0x4b,
> +    0xd5, 0x8f, 0x4f, 0xaf, 0x85, 0x1d, 0x15, 0x1a, 0x58, 0x5f, 0x41, 0x79, 0x70, 0x5c, 0x8f, 0xa9,
> +    0x8e, 0x23, 0x31, 0xa7, 0x6d, 0x99, 0x0c, 0xf0, 0x51, 0xbf, 0xbb, 0xd3, 0xe3, 0xa3, 0x34, 0xf0,
> +    0x1d, 0x7f, 0x4a, 0xb7, 0x8f, 0xf6, 0x0a, 0x49, 0x65, 0xaf, 0x35, 0x7b, 0x02, 0x2e, 0x69, 0x49,
> +    0x95, 0xb5, 0x20, 0x70, 0xb2, 0x98, 0x54, 0x9b, 0x8e, 0x4f, 0x48, 0xa8, 0xfa, 0x7e, 0xc7, 0x0a,
> +    0xae, 0x84, 0xe1, 0xba, 0x85, 0x98, 0x96, 0x8a, 0x7c, 0xdd, 0xcc, 0xcd, 0xd8, 0x5b, 0x50, 0x60,
> +    0x88, 0x2d, 0xb6, 0x3e, 0xb8, 0xc2, 0xae, 0xa5, 0x62, 0x10, 0xcd, 0xdc, 0xae, 0x86, 0xfe, 0x31,
> +    0x8b, 0xf7, 0xee, 0x1a, 0x35, 0x46, 0x83, 0xee, 0x5f, 0x55, 0x9a, 0xc2, 0xca, 0x53, 0xb7, 0x2c,
> +    0xbf, 0x03, 0x8a, 0x78, 0xcc, 0x1d, 0x96, 0x7b, 0xac, 0x00, 0x62, 0x1e, 0xbd, 0x6f, 0x0b, 0xa5,
> +    0xec, 0xf3, 0x02, 0x47, 0x47, 0x1e, 0x3d, 0xf6, 0x78, 0x42, 0xe4, 0xcd, 0xf8, 0x14, 0xa3, 0x7d,
> +    0xd5, 0x2f, 0x6e, 0xcc, 0x1a, 0x9e, 0xe7, 0xcf, 0x48, 0xb9, 0x80, 0xb8, 0xba, 0xaa, 0x7b, 0xae,
> +    0x65, 0x74, 0x09, 0x7b, 0x43, 0x26, 0x31, 0xa2, 0x95, 0x43, 0x69, 0xd0, 0xb7, 0x95, 0xe4, 0x76,
> +    0x2c, 0x42, 0x19, 0x47, 0x4f, 0x63, 0x35, 0x9c, 0xa2, 0x1a, 0xce, 0x28, 0xdf, 0x76, 0x98, 0x1d,
> +    0xd4, 0x2e, 0xf6, 0x3a, 0xc8, 0x3e, 0xc7, 0xaf, 0xf7, 0x38, 0x3f, 0x83, 0x3a, 0xcb, 0xae, 0x41,
> +    0x75, 0x46, 0x63, 0xaa, 0x45, 0xb1, 0x2c, 0xd9, 0x9f, 0x17, 0x37, 0x02, 0x82, 0x01, 0x01, 0x00,
> +    0xe1, 0xc1, 0x57, 0x4d, 0x0f, 0xa5, 0xea, 0x1d, 0x39, 0x9c, 0xe0, 0xf0, 0x6d, 0x13, 0x7f, 0x79,
> +    0xdc, 0x72, 0x61, 0xc0, 0x7f, 0x88, 0xf6, 0x38, 0x4f, 0x49, 0x06, 0x1e, 0xb8, 0x6c, 0x21, 0x04,
> +    0x60, 0x76, 0x5a, 0x6d, 0x04, 0xd1, 0x6d, 0xac, 0x7c, 0x25, 0x4f, 0x32, 0xcb, 0xbc, 0xf8, 0x4a,
> +    0x22, 0x8f, 0xf5, 0x41, 0xfd, 0x1c, 0x76, 0x30, 0xc2, 0x5f, 0x99, 0x13, 0x5c, 0x57, 0x0f, 0xfd,
> +    0xac, 0x0b, 0x10, 0x9a, 0x4f, 0x78, 0x0a, 0x86, 0xe8, 0x07, 0x40, 0x40, 0x13, 0xba, 0x96, 0x07,
> +    0xd5, 0x39, 0x91, 0x51, 0x3e, 0x80, 0xd8, 0xa0, 0x1f, 0xff, 0xdc, 0x9e, 0x09, 0x3b, 0xae, 0x38,
> +    0xa9, 0xc2, 0x14, 0x7b, 0xee, 0xd2, 0x69, 0x3d, 0xd6, 0x26, 0x74, 0x72, 0x7b, 0x86, 0xd4, 0x13,
> +    0x5b, 0xb8, 0x76, 0x4b, 0x08, 0xfb, 0x93, 0xfa, 0x44, 0xaf, 0x98, 0x3b, 0xfa, 0xd0, 0x2a, 0x04,
> +    0x8b, 0xb3, 0x3c, 0x6d, 0x32, 0xf7, 0x18, 0x6a, 0x51, 0x0e, 0x40, 0x90, 0xce, 0x8e, 0xdf, 0xe8,
> +    0x07, 0x4c, 0x0f, 0xc7, 0xc8, 0xc2, 0x18, 0x58, 0x6a, 0x01, 0xc8, 0x27, 0xd6, 0x43, 0x2a, 0xfb,
> +    0xa5, 0x34, 0x01, 0x3c, 0x72, 0xb1, 0x48, 0xce, 0x2b, 0x9b, 0xb4, 0x69, 0xd9, 0x82, 0xf8, 0xbe,
> +    0x29, 0x88, 0x75, 0x96, 0xd8, 0xef, 0x78, 0x2a, 0x07, 0x90, 0xa0, 0x56, 0x33, 0x42, 0x05, 0x19,
> +    0xb0, 0x69, 0x34, 0xf9, 0x03, 0xc5, 0xa8, 0x0d, 0x72, 0xa2, 0x27, 0xb4, 0x45, 0x6d, 0xd2, 0x01,
> +    0x6c, 0xf1, 0x74, 0x51, 0x0a, 0x9a, 0xe2, 0xc1, 0x96, 0x80, 0x30, 0x0e, 0xc6, 0xa9, 0x79, 0xf7,
> +    0x6f, 0xaf, 0xf6, 0xe8, 0x2a, 0xcc, 0xbd, 0xad, 0x8f, 0xe0, 0x32, 0x87, 0x85, 0x49, 0x68, 0x88,
> +    0x15, 0x5c, 0xdb, 0x48, 0x40, 0xa2, 0xfa, 0x42, 0xe8, 0x4e, 0x3e, 0xe2, 0x3f, 0xe0, 0xf3, 0x99,
> +    0x02, 0x82, 0x01, 0x00, 0x08, 0x39, 0x97, 0x69, 0x6d, 0x44, 0x5b, 0x2c, 0x74, 0xf6, 0x5f, 0x40,
> +    0xe9, 0x1d, 0x24, 0x89, 0x1c, 0xaa, 0x9b, 0x8e, 0x8b, 0x65, 0x02, 0xe4, 0xb5, 0x6c, 0x26, 0x32,
> +    0x98, 0xfb, 0x66, 0xe0, 0xfd, 0xef, 0xfe, 0x0f, 0x41, 0x4a, 0x5c, 0xc4, 0xdf, 0xdf, 0x42, 0xa1,
> +    0x35, 0x46, 0x5e, 0x5b, 0xdd, 0x0c, 0x78, 0xbd, 0x41, 0xb0, 0xa2, 0xdf, 0x68, 0xab, 0x23, 0xfc,
> +    0xa9, 0xac, 0xbd, 0xba, 0xd6, 0x54, 0x07, 0xc0, 0x21, 0xa7, 0x6a, 0x96, 0x24, 0xdf, 0x20, 0x46,
> +    0x4d, 0x45, 0x27, 0x6c, 0x26, 0xea, 0x74, 0xeb, 0x98, 0x89, 0x90, 0xdd, 0x8e, 0x23, 0x49, 0xf5,
> +    0xf7, 0x70, 0x9e, 0xb0, 0x5e, 0x10, 0x47, 0xe0, 0x9a, 0x28, 0x88, 0xdf, 0xdb, 0xd8, 0x53, 0x0b,
> +    0x45, 0xf0, 0x19, 0x90, 0xe4, 0xdf, 0x02, 0x9f, 0x60, 0x4e, 0x76, 0x11, 0x3b, 0x39, 0x24, 0xf1,
> +    0x3f, 0x3e, 0xb4, 0x8a, 0x1b, 0x84, 0xb7, 0x96, 0xdf, 0xfb, 0xb0, 0xda, 0xec, 0x63, 0x68, 0x15,
> +    0xd7, 0xa9, 0xdb, 0x48, 0x9c, 0x12, 0xc3, 0xd6, 0x85, 0xe8, 0x63, 0x1f, 0xd0, 0x1a, 0xb0, 0x12,
> +    0x60, 0x62, 0x43, 0xc1, 0x38, 0x86, 0x52, 0x23, 0x7f, 0xc9, 0x62, 0xf8, 0x79, 0xbf, 0xb4, 0xfb,
> +    0x4e, 0x7e, 0x07, 0x22, 0x49, 0x8e, 0xbe, 0x6c, 0xf0, 0x53, 0x5a, 0x53, 0xfd, 0x3c, 0x14, 0xd8,
> +    0xf7, 0x2c, 0x06, 0x2a, 0xe4, 0x64, 0xfd, 0x19, 0x57, 0xa0, 0x92, 0xf6, 0xa3, 0x42, 0x47, 0x61,
> +    0x0b, 0xfd, 0x71, 0x5f, 0x98, 0xe2, 0x6c, 0x98, 0xa8, 0xf9, 0xf9, 0x7f, 0x1c, 0x61, 0x5d, 0x8c,
> +    0xd1, 0xfb, 0x90, 0x28, 0x32, 0x9b, 0x7d, 0x82, 0xf9, 0xcc, 0x47, 0xbe, 0xc7, 0x67, 0xc5, 0x93,
> +    0x22, 0x55, 0x0d, 0xd2, 0x73, 0xbe, 0xea, 0xed, 0x4d, 0xb5, 0xf4, 0xc2, 0x25, 0x92, 0x44, 0x30,
> +    0xeb, 0xaa, 0x13, 0x11, 0x02, 0x82, 0x01, 0x01, 0x00, 0x82, 0x42, 0x02, 0x53, 0x4e, 0x72, 0x16,
> +    0xf1, 0x21, 0xea, 0xe8, 0xc7, 0x10, 0xc8, 0xad, 0x46, 0xec, 0xf1, 0x7a, 0x81, 0x8d, 0x94, 0xc3,
> +    0x2c, 0x9e, 0x62, 0xae, 0x0b, 0x4f, 0xb1, 0xe4, 0x23, 0x18, 0x5d, 0x71, 0xb3, 0x71, 0x92, 0x3d,
> +    0x4b, 0xc6, 0x9d, 0xe8, 0x62, 0x90, 0xb7, 0xca, 0x33, 0x4c, 0x59, 0xef, 0xd3, 0x51, 0x6d, 0xf8,
> +    0xac, 0x0d, 0x9b, 0x07, 0x41, 0xea, 0x87, 0xb9, 0x8c, 0x4e, 0x96, 0x5b, 0xd0, 0x0d, 0x86, 0x5f,
> +    0xdc, 0x93, 0x48, 0x8b, 0xc3, 0xed, 0x1e, 0x3d, 0xae, 0xeb, 0x52, 0xba, 0x0c, 0x3c, 0x9a, 0x2f,
> +    0x63, 0xc4, 0xd2, 0xe6, 0xc2, 0xb0, 0xe5, 0x24, 0x93, 0x41, 0x2f, 0xe0, 0x8d, 0xd9, 0xb0, 0xc2,
> +    0x54, 0x91, 0x99, 0xc2, 0x9a, 0xc3, 0xb7, 0x79, 0xea, 0x69, 0x83, 0xb7, 0x8d, 0x77, 0xf3, 0x60,
> +    0xe0, 0x88, 0x7d, 0x20, 0xc3, 0x8a, 0xe6, 0x4d, 0x38, 0x2e, 0x3b, 0x0e, 0xe4, 0x9b, 0x01, 0x83,
> +    0xae, 0xe4, 0x71, 0xea, 0xc3, 0x22, 0xcb, 0xc1, 0x59, 0xa9, 0xcc, 0x33, 0x56, 0xbc, 0xf9, 0x70,
> +    0xfe, 0xa2, 0xbb, 0xc0, 0x77, 0x6b, 0xe3, 0x79, 0x8b, 0x95, 0x38, 0xba, 0x75, 0xdc, 0x5f, 0x7a,
> +    0x78, 0xab, 0x24, 0xbe, 0x26, 0x4d, 0x00, 0x8a, 0xf1, 0x7e, 0x19, 0x64, 0x6f, 0xd3, 0x5f, 0xe8,
> +    0xdf, 0xa7, 0x59, 0xc5, 0x89, 0xb7, 0x2d, 0xa2, 0xaf, 0xbd, 0xe0, 0x16, 0x56, 0x8f, 0xdc, 0x9e,
> +    0x28, 0x94, 0x3a, 0x07, 0xda, 0xb6, 0x2c, 0xb5, 0x7d, 0x69, 0x14, 0xb0, 0x5e, 0x8a, 0x55, 0xef,
> +    0xfc, 0x6f, 0x10, 0x2b, 0xaa, 0x7a, 0xea, 0x12, 0x9b, 0xb8, 0x6f, 0xb9, 0x71, 0x20, 0x30, 0xde,
> +    0x48, 0xa4, 0xb9, 0x61, 0xae, 0x5c, 0x33, 0x8d, 0x02, 0xe8, 0x00, 0x99, 0xed, 0xc8, 0x8d, 0xc1,
> +    0x04, 0x95, 0xf1, 0x7f, 0xcb, 0x1f, 0xbc, 0x76, 0x11, 0x02, 0x82, 0x01, 0x00, 0x2d, 0x0c, 0xa9,
> +    0x8f, 0x11, 0xc2, 0xf3, 0x02, 0xc8, 0xf2, 0x55, 0xc5, 0x6d, 0x25, 0x88, 0xba, 0x59, 0xf6, 0xd1,
> +    0xdb, 0x94, 0x2f, 0x0b, 0x65, 0x2c, 0xad, 0x54, 0xe0, 0x2b, 0xe6, 0xa3, 0x49, 0xa2, 0xb3, 0xca,
> +    0xd7, 0xec, 0x27, 0x32, 0xbb, 0xa4, 0x16, 0x90, 0xbb, 0x67, 0xad, 0x1b, 0xb9, 0x0f, 0x78, 0xcb,
> +    0xad, 0x5c, 0xc3, 0x66, 0xd6, 0xbb, 0x97, 0x28, 0x01, 0x31, 0xf9, 0x0f, 0x71, 0x2a, 0xb9, 0x5b,
> +    0xea, 0x34, 0x49, 0x9c, 0x6b, 0x13, 0x40, 0x65, 0xbd, 0x18, 0x0a, 0x14, 0xf9, 0x33, 0x47, 0xe8,
> +    0x9f, 0x64, 0x0e, 0x24, 0xf6, 0xbb, 0x90, 0x23, 0x66, 0x01, 0xa6, 0xa4, 0xa9, 0x7f, 0x64, 0x51,
> +    0xa3, 0x8a, 0x73, 0xc1, 0x80, 0xaf, 0x7a, 0x49, 0x75, 0x5d, 0x56, 0x1c, 0xaa, 0x3f, 0x64, 0xa9,
> +    0x96, 0xfd, 0xb0, 0x90, 0xc5, 0xe0, 0x3d, 0x36, 0x05, 0xad, 0xad, 0x84, 0x93, 0x84, 0xab, 0x1b,
> +    0x34, 0x57, 0x39, 0xae, 0x0e, 0x80, 0x0f, 0x4a, 0x9b, 0x32, 0x56, 0xbd, 0x30, 0xeb, 0xd1, 0xc8,
> +    0xc4, 0x9f, 0x9c, 0x07, 0xb6, 0x05, 0xb1, 0x21, 0x7f, 0x69, 0x92, 0x9f, 0xb7, 0x68, 0xe7, 0xde,
> +    0xb7, 0xbc, 0xb4, 0x89, 0x5b, 0x1c, 0x1b, 0x48, 0xd1, 0x44, 0x6e, 0xd7, 0x6b, 0xe2, 0xa1, 0xf4,
> +    0xbf, 0x17, 0xb4, 0x43, 0x70, 0x26, 0xd4, 0xb9, 0xf5, 0x19, 0x09, 0x08, 0xe9, 0xa3, 0x49, 0x7d,
> +    0x2f, 0xdc, 0xe8, 0x75, 0x79, 0xa1, 0xc1, 0x70, 0x1b, 0x60, 0x97, 0xaf, 0x0c, 0x56, 0x68, 0xac,
> +    0x0e, 0x53, 0xbe, 0x56, 0xf4, 0xc3, 0xb1, 0xfb, 0xfb, 0xff, 0x73, 0x5b, 0xa7, 0xf6, 0x99, 0x0e,
> +    0x14, 0x5a, 0x5f, 0x9d, 0xbd, 0x8e, 0x94, 0xec, 0x8b, 0x38, 0x72, 0xbc, 0x8b, 0xca, 0x32, 0xa8,
> +    0x39, 0x43, 0xb1, 0x1d, 0x43, 0x29, 0xbe, 0x60, 0xdb, 0x91, 0x6c, 0x9c, 0x06,
> +};
> diff --git a/tests/unit/meson.build b/tests/unit/meson.build
> index 96b295263e..4ff2fef30f 100644
> --- a/tests/unit/meson.build
> +++ b/tests/unit/meson.build
> @@ -77,6 +77,7 @@ if have_block
>      'test-crypto-hash': [crypto],
>      'test-crypto-hmac': [crypto],
>      'test-crypto-cipher': [crypto],
> +    'test-crypto-akcipher': [crypto],
>      'test-crypto-secret': [crypto, keyutils],
>      'test-authz-simple': [authz],
>      'test-authz-list': [authz],
> diff --git a/tests/unit/test-crypto-akcipher.c b/tests/unit/test-crypto-akcipher.c
> new file mode 100644
> index 0000000000..5efb71f61f
> --- /dev/null
> +++ b/tests/unit/test-crypto-akcipher.c
> @@ -0,0 +1,715 @@

> +
> +typedef struct QCryptoAkcipherTestData QCryptoAkcipherTestData;
> +struct QCryptoAkcipherTestData {
> +    const char *path;
> +    QCryptoAkcipherAlgorithm alg;
> +
> +    const uint8_t *priv_key;
> +    size_t priv_key_len;
> +    const uint8_t *pub_key;
> +    size_t pub_key_len;
> +
> +    const uint8_t *plaintext;
> +    size_t plen;
> +    const uint8_t *ciphertext;
> +    size_t clen;
> +    const uint8_t *dgst;
> +    size_t dlen;
> +    const uint8_t *signature;
> +    size_t slen;
> +
> +    union {
> +        QCryptoRsaOptions rsa;
> +        QCryptoEcdsaOptions ecdsa;
> +    } opt;
> +};
> +
> +#define Byte 8
> +static QCryptoAkcipherTestData test_data[] = {
> +    /* rsa1024 with raw padding */
> +    {
> +        .path = "/crypto/akcipher/rsa1024-raw",
> +        .pub_key = rsa1024_public_key,
> +        .pub_key_len = sizeof(rsa1024_public_key),
> +        .priv_key = rsa1024_private_key,
> +        .priv_key_len = sizeof(rsa1024_private_key),
> +
> +        .plaintext = test_plaintext,
> +        .plen = 1024 / Byte,

I'm not sure this is adding value over just using

   .plen = 128

same for following cases.

> +        .ciphertext = exp_ciphertext_rsa1024_raw,
> +        .clen = sizeof(exp_ciphertext_rsa1024_raw),
> +
> +        .opt = {
> +            .rsa = {
> +                .padding_algo = QCRYPTO_RSA_PADDING_ALG_RAW,
> +            },
> +        }
> +    },
> +
> +    /* rsa1024 with pkcs1 padding */
> +    {
> +        .path = "/crypto/akcipher/rsa1024-pkcs1",
> +        .pub_key = rsa1024_public_key,
> +        .pub_key_len = sizeof(rsa1024_public_key),
> +        .priv_key = rsa1024_private_key,
> +        .priv_key_len = sizeof(rsa1024_private_key),
> +
> +        .plaintext = test_plaintext,
> +        .plen = 1024 / Byte / 2,
> +        .ciphertext = exp_ciphertext_rsa1024_pkcs1,
> +        .clen = sizeof(exp_ciphertext_rsa1024_pkcs1),
> +        .dgst = test_sha1_dgst,
> +        .dlen = sizeof(test_sha1_dgst),
> +        .signature = exp_signature_rsa1024_pkcs1,
> +        .slen = sizeof(exp_signature_rsa1024_pkcs1),
> +
> +        .opt = {
> +            .rsa = {
> +                .padding_algo = QCRYPTO_RSA_PADDING_ALG_PKCS1,
> +                .hash_algo = QCRYPTO_RSA_HASH_ALG_SHA1,
> +            },
> +        }
> +    },
> +
> +    /* rsa2048 with raw padding */
> +    {
> +        .path = "/crypto/akcipher/rsa2048-raw",
> +        .pub_key = rsa2048_public_key,
> +        .pub_key_len = sizeof(rsa2048_public_key),
> +        .priv_key = rsa2048_private_key,
> +        .priv_key_len = sizeof(rsa2048_private_key),
> +
> +        .plaintext = test_plaintext,
> +        .plen = 2048 / Byte,
> +        .ciphertext = exp_ciphertext_rsa2048_raw,
> +        .clen = sizeof(exp_ciphertext_rsa2048_raw),
> +
> +        .opt = {
> +            .rsa = {
> +                .padding_algo = QCRYPTO_RSA_PADDING_ALG_RAW,
> +            },
> +        }
> +    },
> +
> +    /* rsa2048 with pkcs1 padding */
> +    {
> +        .path = "/crypto/akcipher/rsa2048-pkcs1",
> +        .pub_key = rsa2048_public_key,
> +        .pub_key_len = sizeof(rsa2048_public_key),
> +        .priv_key = rsa2048_private_key,
> +        .priv_key_len = sizeof(rsa2048_private_key),
> +
> +        .plaintext = test_plaintext,
> +        .plen = 2048 / Byte / 2,
> +        .ciphertext = exp_ciphertext_rsa2048_pkcs1,
> +        .clen = sizeof(exp_ciphertext_rsa2048_pkcs1),
> +        .dgst = test_sha1_dgst,
> +        .dlen = sizeof(test_sha1_dgst),
> +        .signature = exp_signature_rsa2048_pkcs1,
> +        .slen = sizeof(exp_signature_rsa2048_pkcs1),
> +
> +        .opt = {
> +            .rsa = {
> +                .padding_algo = QCRYPTO_RSA_PADDING_ALG_PKCS1,
> +                .hash_algo = QCRYPTO_RSA_HASH_ALG_SHA1,
> +            },
> +        }
> +    },
> +
> +};
> +
> +static void test_akcipher(const void *opaque)
> +{
> +    const QCryptoAkcipherTestData *data = opaque;
> +    Error *err = NULL;
> +    uint8_t *plaintext = NULL, *ciphertext = NULL, *signature = NULL;

Declare each of these separately and mark with 'g_autofree'

> +    QCryptoAkcipher *pub_key, *priv_key;
> +
> +    pub_key = qcrypto_akcipher_new(data->alg,
> +                                   QCRYPTO_AKCIPHER_KEY_TYPE_PUBLIC,
> +                                   data->pub_key, data->pub_key_len,
> +                                   (void *)&data->opt, &err);
> +    g_assert(pub_key != NULL);
> +    priv_key = qcrypto_akcipher_new(data->alg,
> +                                    QCRYPTO_AKCIPHER_KEY_TYPE_PRIVATE,
> +                                    data->priv_key, data->priv_key_len,
> +                                    (void *)&data->opt, &err);
> +    g_assert(priv_key != NULL);
> +
> +    if (data->plaintext != NULL) {
> +
> +        ciphertext = g_new0(uint8_t, data->clen);
> +        g_assert(qcrypto_akcipher_encrypt(pub_key, data->plaintext, data->plen,
> +                                          ciphertext, data->clen, &err) > 0);
> +        g_assert(err == NULL);
> +
> +        /**
> +         * In the asymmetric encryption algorithms, the ciphertext generated
> +         * each time may be different, here only compare the decrypted
> +         * plaintext
> +         */
> +        plaintext = g_new0(uint8_t, data->clen);
> +        g_assert(qcrypto_akcipher_decrypt(priv_key, ciphertext,
> +                                          data->clen, plaintext,
> +                                          data->plen, &err) == data->plen);
> +        g_assert(err == NULL);
> +        g_assert(!memcmp(plaintext, data->plaintext, data->plen));
> +    }
> +
> +    if (data->signature != NULL) {
> +        signature = g_new(uint8_t, data->slen);
> +        g_assert(qcrypto_akcipher_sign(priv_key, data->dgst, data->dlen,
> +                                       signature, data->slen, &err) > 0);
> +        /**
> +         * The signature generated each time may be different, here only check
> +         * the verification.
> +         */
> +        g_assert(err == NULL);
> +
> +        g_assert(qcrypto_akcipher_verify(pub_key, signature, data->slen,
> +                                         data->dgst, data->dlen, &err) == 0);
> +        g_assert(err == NULL);
> +        ++signature[0];
> +        /* Here error should be ignored */
> +        g_assert(qcrypto_akcipher_verify(pub_key, signature, data->slen,
> +                                         data->dgst, data->dlen, NULL) != 0);
> +    }
> +
> +    g_free(plaintext);
> +    g_free(ciphertext);
> +    g_free(signature);

No need for this with 'g_autofree' at time of declaration.

> +    g_assert(qcrypto_akcipher_free(pub_key, &err) == 0);
> +    g_assert(err == NULL);
> +    g_assert(qcrypto_akcipher_free(priv_key, &err) == 0);
> +    g_assert(err == NULL);

In every call above that passes '&err' you can instead pass
in '&error_abort' and skip the assert.


> +}
> +
> +int main(int argc, char **argv)
> +{
> +    size_t i;
> +    g_test_init(&argc, &argv, NULL);
> +    g_assert(qcrypto_init(NULL) == 0);
> +
> +    for (i = 0; i < G_N_ELEMENTS(test_data); i++) {
> +        g_test_add_data_func(test_data[i].path, &test_data[i], test_akcipher);
> +    }

There's no test here that the akcipher APIs are actually implemenmted.
If it runs with a gcrypt build I suspec this test will fail.

I suspect we need an equivalent of 'qcrypto_cipher_supports' and to
query that before registering the test cases.


> +
> +    return g_test_run();
> +}
> -- 
> 2.25.1
> 
> 

With regards,
Daniel
-- 
|: https://berrange.com      -o-    https://www.flickr.com/photos/dberrange :|
|: https://libvirt.org         -o-            https://fstop138.berrange.com :|
|: https://entangle-photo.org    -o-    https://www.instagram.com/dberrange :|


_______________________________________________
Virtualization mailing list
Virtualization@lists.linux-foundation.org
https://lists.linuxfoundation.org/mailman/listinfo/virtualization

