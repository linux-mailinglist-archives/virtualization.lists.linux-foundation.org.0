Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from whitealder.osuosl.org (smtp1.osuosl.org [140.211.166.138])
	by mail.lfdr.de (Postfix) with ESMTPS id F10F2228B98
	for <lists.virtualization@lfdr.de>; Tue, 21 Jul 2020 23:46:01 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by whitealder.osuosl.org (Postfix) with ESMTP id 7CE9A882B7;
	Tue, 21 Jul 2020 21:46:00 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from whitealder.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id CD5JabC0PRNT; Tue, 21 Jul 2020 21:45:57 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by whitealder.osuosl.org (Postfix) with ESMTP id B3519882AC;
	Tue, 21 Jul 2020 21:45:56 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 76113C016F;
	Tue, 21 Jul 2020 21:45:56 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from whitealder.osuosl.org (smtp1.osuosl.org [140.211.166.138])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 144F5C016F
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:45:55 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by whitealder.osuosl.org (Postfix) with ESMTP id 0D4648803B
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:45:55 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from whitealder.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id qFhHhDVMnckf
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:45:53 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by whitealder.osuosl.org (Postfix) with ESMTPS id E7CD984EB9
 for <virtualization@lists.linux-foundation.org>;
 Tue, 21 Jul 2020 21:45:52 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp02.buh.bitdefender.net [10.17.80.76])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 B2153305D4EF; Wed, 22 Jul 2020 00:09:27 +0300 (EEST)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 93428304FA13;
 Wed, 22 Jul 2020 00:09:27 +0300 (EEST)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v9 55/84] KVM: introspection: add KVMI_VCPU_CONTROL_EVENTS
Date: Wed, 22 Jul 2020 00:08:53 +0300
Message-Id: <20200721210922.7646-56-alazar@bitdefender.com>
In-Reply-To: <20200721210922.7646-1-alazar@bitdefender.com>
References: <20200721210922.7646-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 =?UTF-8?q?Mihai=20Don=C8=9Bu?= <mdontu@bitdefender.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

RnJvbTogTWloYWkgRG9uyJt1IDxtZG9udHVAYml0ZGVmZW5kZXIuY29tPgoKQnkgZGVmYXVsdCwg
YWxsIGludHJvc3BlY3Rpb24gdkNQVSBldmVudHMgYXJlIGRpc2FibGVkLiBUaGUgaW50cm9zcGVj
dGlvbgp0b29sIG11c3QgZXhwbGljaXRseSBlbmFibGUgdGhlIHZDUFUgZXZlbnRzIGl0IHdhbnRz
IHRvIHJlY2VpdmUuIFdpdGgKdGhpcyBjb21tYW5kIChLVk1JX1ZDUFVfQ09OVFJPTF9FVkVOVFMp
IGl0IGNhbiBlbmFibGUvZGlzYWJsZSBhbnkgdkNQVQpldmVudCBpZiBhbGxvd2VkIGJ5IHRoZSBk
ZXZpY2UgbWFuYWdlci4KClNvbWUgdkNQVSBldmVudHMgZG9lc24ndCBoYXZlIHRvIGJlIGV4cGxp
Y2l0bHkgZW5hYmxlZCAoYW5kIGNhbid0IGJlCmRpc2FibGVkKSB3aXRoIHRoaXMgY29tbWFuZCBi
ZWNhdXNlIHRoZXkgYXJlIGltcGxpY2l0bHkgZW5hYmxlZC9yZXF1ZXN0ZWQKYnkgdGhlIHVzZSBv
ZiBjZXJ0YWluIGNvbW1hbmRzLiBGb3IgZXhhbXBsZSwgaWYgdGhlIGludHJvc3BlY3Rpb24KdG9v
bCB1c2VzIHRoZSBLVk1JX1ZDUFVfUEFVU0UgY29tbWFuZCwgaXQgd2FudHMgdG8gcmVjZWl2ZSBh
bgpLVk1JX0VWRU5UX1BBVVNFX1ZDUFUgZXZlbnQuCgpTaWduZWQtb2ZmLWJ5OiBNaWhhaSBEb27I
m3UgPG1kb250dUBiaXRkZWZlbmRlci5jb20+CkNvLWRldmVsb3BlZC1ieTogQWRhbGJlcnQgTGF6
xINyIDxhbGF6YXJAYml0ZGVmZW5kZXIuY29tPgpTaWduZWQtb2ZmLWJ5OiBBZGFsYmVydCBMYXrE
g3IgPGFsYXphckBiaXRkZWZlbmRlci5jb20+Ci0tLQogRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9r
dm1pLnJzdCAgICAgICAgICAgICAgIHwgNTEgKysrKysrKysrKysrKysrKystCiBpbmNsdWRlL2xp
bnV4L2t2bWlfaG9zdC5oICAgICAgICAgICAgICAgICAgICAgfCAgMiArCiBpbmNsdWRlL3VhcGkv
bGludXgva3ZtaS5oICAgICAgICAgICAgICAgICAgICAgfCAxMiArKysrLQogLi4uL3Rlc3Rpbmcv
c2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMgIHwgNTQgKysrKysrKysrKysrKysrKysr
KwogdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMgICAgICAgICAgICAgICAgIHwgMjYgKysr
KysrKysrCiB2aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmggICAgICAgICAgICAgfCAg
MyArKwogdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jICAgICAgICAgICAgIHwgMjYg
KysrKysrKystCiA3IGZpbGVzIGNoYW5nZWQsIDE2OSBpbnNlcnRpb25zKCspLCA1IGRlbGV0aW9u
cygtKQoKZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QgYi9Eb2N1
bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CmluZGV4IDA2YzFjYjM0MjA5ZS4uNDM5M2NlODli
MmZhIDEwMDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CisrKyBiL0Rv
Y3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QKQEAgLTM3Nyw2ICszNzcsOSBAQCB0aGUgZm9s
bG93aW5nIGV2ZW50czo6CiAKIAlLVk1JX0VWRU5UX1VOSE9PSwogCitUaGUgdkNQVSBldmVudHMg
KGUuZy4gKktWTUlfRVZFTlRfUEFVU0VfVkNQVSopIGFyZSBjb250cm9sbGVkIHdpdGgKK3RoZSAq
S1ZNSV9WQ1BVX0NPTlRST0xfRVZFTlRTKiBjb21tYW5kLgorCiA6RXJyb3JzOgogCiAqIC1LVk1f
RUlOVkFMIC0gdGhlIHBhZGRpbmcgaXMgbm90IHplcm8KQEAgLTUyMCwxMiArNTIzLDU4IEBAIGNv
bW1hbmQpIGJlZm9yZSByZXR1cm5pbmcgdG8gZ3Vlc3QuCiAgICAgICAgICAgICAgICAgKktWTUlf
RVZFTlRfUEFVU0VfVkNQVSogZXZlbnRzCiAqIC1LVk1fRVBFUk0gIC0gdGhlICpLVk1JX0VWRU5U
X1BBVVNFX1ZDUFUqIGV2ZW50IGlzIGRpc2FsbG93ZWQKIAorMTAuIEtWTUlfVkNQVV9DT05UUk9M
X0VWRU5UUworLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQorCis6QXJjaGl0ZWN0dXJlczog
YWxsCis6VmVyc2lvbnM6ID49IDEKKzpQYXJhbWV0ZXJzOgorCis6OgorCisJc3RydWN0IGt2bWlf
dmNwdV9oZHI7CisJc3RydWN0IGt2bWlfdmNwdV9jb250cm9sX2V2ZW50cyB7CisJCV9fdTE2IGV2
ZW50X2lkOworCQlfX3U4IGVuYWJsZTsKKwkJX191OCBwYWRkaW5nMTsKKwkJX191MzIgcGFkZGlu
ZzI7CisJfTsKKworOlJldHVybnM6CisKKzo6CisKKwlzdHJ1Y3Qga3ZtaV9lcnJvcl9jb2RlCisK
K0VuYWJsZXMvZGlzYWJsZXMgdkNQVSBpbnRyb3NwZWN0aW9uIGV2ZW50cy4KKworV2hlbiBhbiBl
dmVudCBpcyBlbmFibGVkLCB0aGUgaW50cm9zcGVjdGlvbiB0b29sIGlzIG5vdGlmaWVkIGFuZAor
bXVzdCByZXBseSB3aXRoOiBjb250aW51ZSwgcmV0cnksIGNyYXNoLCBldGMuIChzZWUgKipFdmVu
dHMqKiBiZWxvdykuCisKK1RoZSBmb2xsb3dpbmcgdkNQVSBldmVudHMgZG9lc24ndCBoYXZlIHRv
IGJlIGVuYWJsZWQgYW5kIGNhbid0IGJlIGRpc2FibGVkLAorYmVjYXVzZSB0aGVzZSBhcmUgc2Vu
dCBhcyBhIHJlc3VsdCBvZiBjZXJ0YWluIGNvbW1hbmRzIChidXQgdGhleSBjYW4gYmUKK2Rpc2Fs
bG93ZWQgYnkgdGhlIGRldmljZSBtYW5hZ2VyKSA6OgorCisJS1ZNSV9FVkVOVF9QQVVTRV9WQ1BV
CisKK1RoZSBWTSBldmVudHMgKGUuZy4gKktWTUlfRVZFTlRfVU5IT09LKikgYXJlIGNvbnRyb2xs
ZWQgd2l0aAordGhlICpLVk1JX1ZNX0NPTlRST0xfRVZFTlRTKiBjb21tYW5kLgorCis6RXJyb3Jz
OgorCisqIC1LVk1fRUlOVkFMIC0gdGhlIHBhZGRpbmcgaXMgbm90IHplcm8KKyogLUtWTV9FSU5W
QUwgLSB0aGUgc2VsZWN0ZWQgdkNQVSBpcyBpbnZhbGlkCisqIC1LVk1fRUlOVkFMIC0gdGhlIGV2
ZW50IElEIGlzIHVua25vd24gKHVzZSAqS1ZNSV9WTV9DSEVDS19FVkVOVCogZmlyc3QpCisqIC1L
Vk1fRVBFUk0gLSB0aGUgYWNjZXNzIGlzIGRpc2FsbG93ZWQgKHVzZSAqS1ZNSV9WTV9DSEVDS19F
VkVOVCogZmlyc3QpCisqIC1LVk1fRUFHQUlOIC0gdGhlIHNlbGVjdGVkIHZDUFUgY2FuJ3QgYmUg
aW50cm9zcGVjdGVkIHlldAorCiBFdmVudHMKID09PT09PQogCiBBbGwgaW50cm9zcGVjdGlvbiBl
dmVudHMgKFZNIG9yIHZDUFUgcmVsYXRlZCkgYXJlIHNlbnQKIHVzaW5nIHRoZSAqS1ZNSV9FVkVO
VCogbWVzc2FnZSBpZC4gTm8gZXZlbnQgd2lsbCBiZSBzZW50IHVubGVzcwotaXQgaXMgZXhwbGlj
aXRseSBlbmFibGVkIG9yIHJlcXVlc3RlZCAoZWcuICpLVk1JX0VWRU5UX1BBVVNFX1ZDUFUqKS4K
K2l0IGlzIGV4cGxpY2l0bHkgZW5hYmxlZCAoc2VlICpLVk1JX1ZNX0NPTlRST0xfRVZFTlRTKgor
YW5kICpLVk1JX1ZDUFVfQ09OVFJPTF9FVkVOVFMqKSBvciByZXF1ZXN0ZWQgKGVnLiAqS1ZNSV9F
VkVOVF9QQVVTRV9WQ1BVKikuCiAKIFRoZSAqS1ZNSV9FVkVOVF9VTkhPT0sqIGV2ZW50IGRvZXNu
J3QgaGF2ZSBhIHJlcGx5IGFuZCBzaGFyZSB0aGUga3ZtaV9ldmVudAogc3RydWN0dXJlLCBmb3Ig
Y29uc2lzdGVuY3kgd2l0aCB0aGUgdkNQVSBldmVudHMuCmRpZmYgLS1naXQgYS9pbmNsdWRlL2xp
bnV4L2t2bWlfaG9zdC5oIGIvaW5jbHVkZS9saW51eC9rdm1pX2hvc3QuaAppbmRleCBhODdmMDMy
MmM1ODQuLjk2MjVjOGYxOTM3OSAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9rdm1pX2hvc3Qu
aAorKysgYi9pbmNsdWRlL2xpbnV4L2t2bWlfaG9zdC5oCkBAIC0zMSw2ICszMSw4IEBAIHN0cnVj
dCBrdm1fdmNwdV9pbnRyb3NwZWN0aW9uIHsKIAogCXN0cnVjdCBrdm1pX3ZjcHVfcmVwbHkgcmVw
bHk7CiAJYm9vbCB3YWl0aW5nX2Zvcl9yZXBseTsKKworCXVuc2lnbmVkIGxvbmcgKmV2X2VuYWJs
ZV9tYXNrOwogfTsKIAogc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uIHsKZGlmZiAtLWdpdCBhL2lu
Y2x1ZGUvdWFwaS9saW51eC9rdm1pLmggYi9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCmluZGV4
IDVhNWIwMWRmN2UzZS4uOWViZjE3ZmE5NTY0IDEwMDY0NAotLS0gYS9pbmNsdWRlL3VhcGkvbGlu
dXgva3ZtaS5oCisrKyBiL2luY2x1ZGUvdWFwaS9saW51eC9rdm1pLmgKQEAgLTI1LDggKzI1LDkg
QEAgZW51bSB7CiAJS1ZNSV9WTV9SRUFEX1BIWVNJQ0FMICA9IDYsCiAJS1ZNSV9WTV9XUklURV9Q
SFlTSUNBTCA9IDcsCiAKLQlLVk1JX1ZDUFVfR0VUX0lORk8gICAgID0gOCwKLQlLVk1JX1ZDUFVf
UEFVU0UgICAgICAgID0gOSwKKwlLVk1JX1ZDUFVfR0VUX0lORk8gICAgICAgPSA4LAorCUtWTUlf
VkNQVV9QQVVTRSAgICAgICAgICA9IDksCisJS1ZNSV9WQ1BVX0NPTlRST0xfRVZFTlRTID0gMTAs
CiAKIAlLVk1JX05VTV9NRVNTQUdFUwogfTsKQEAgLTEyMiw2ICsxMjMsMTMgQEAgc3RydWN0IGt2
bWlfdmNwdV9wYXVzZSB7CiAJX191MzIgcGFkZGluZzM7CiB9OwogCitzdHJ1Y3Qga3ZtaV92Y3B1
X2NvbnRyb2xfZXZlbnRzIHsKKwlfX3UxNiBldmVudF9pZDsKKwlfX3U4IGVuYWJsZTsKKwlfX3U4
IHBhZGRpbmcxOworCV9fdTMyIHBhZGRpbmcyOworfTsKKwogc3RydWN0IGt2bWlfZXZlbnQgewog
CV9fdTE2IHNpemU7CiAJX191MTYgdmNwdTsKZGlmZiAtLWdpdCBhL3Rvb2xzL3Rlc3Rpbmcvc2Vs
ZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMgYi90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9r
dm0veDg2XzY0L2t2bWlfdGVzdC5jCmluZGV4IDVjNWM1MDE4ODMyZC4uZGE2YTA2ZmEwYmFhIDEw
MDY0NAotLS0gYS90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5j
CisrKyBiL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKQEAg
LTgzNCw2ICs4MzQsNTkgQEAgc3RhdGljIHZvaWQgdGVzdF9wYXVzZShzdHJ1Y3Qga3ZtX3ZtICp2
bSkKIAlhbGxvd19ldmVudCh2bSwgS1ZNSV9FVkVOVF9QQVVTRV9WQ1BVKTsKIH0KIAorc3RhdGlj
IHZvaWQgY21kX3ZjcHVfY29udHJvbF9ldmVudChzdHJ1Y3Qga3ZtX3ZtICp2bSwgX191MTYgZXZl
bnRfaWQsCisJCQkJICAgX191OCBlbmFibGUsIF9fdTE2IHBhZGRpbmcsCisJCQkJICAgaW50IGV4
cGVjdGVkX2VycikKK3sKKwlzdHJ1Y3QgeworCQlzdHJ1Y3Qga3ZtaV9tc2dfaGRyIGhkcjsKKwkJ
c3RydWN0IGt2bWlfdmNwdV9oZHIgdmNwdV9oZHI7CisJCXN0cnVjdCBrdm1pX3ZjcHVfY29udHJv
bF9ldmVudHMgY21kOworCX0gcmVxID0ge307CisJaW50IHI7CisKKwlyZXEuY21kLmV2ZW50X2lk
ID0gZXZlbnRfaWQ7CisJcmVxLmNtZC5lbmFibGUgPSBlbmFibGU7CisJcmVxLmNtZC5wYWRkaW5n
MSA9IHBhZGRpbmc7CisJcmVxLmNtZC5wYWRkaW5nMiA9IHBhZGRpbmc7CisKKwlyID0gZG9fdmNw
dTBfY29tbWFuZCh2bSwgS1ZNSV9WQ1BVX0NPTlRST0xfRVZFTlRTLAorCQkJICAgICAmcmVxLmhk
ciwgc2l6ZW9mKHJlcSksIE5VTEwsIDApOworCVRFU1RfQVNTRVJUKHIgPT0gZXhwZWN0ZWRfZXJy
LAorCQkiS1ZNSV9WQ1BVX0NPTlRST0xfRVZFTlRTIGZhaWxlZCB0byBlbmFibGUgdkNQVSBldmVu
dCAlZCwgZXJyb3IgJWQgKCVzKSwgZXhwZWN0ZWQgZXJyb3IgJWRcbiIsCisJCWV2ZW50X2lkLCAt
ciwga3ZtX3N0cmVycm9yKC1yKSwgZXhwZWN0ZWRfZXJyKTsKK30KKworCitzdGF0aWMgdm9pZCBl
bmFibGVfdmNwdV9ldmVudChzdHJ1Y3Qga3ZtX3ZtICp2bSwgX191MTYgZXZlbnRfaWQpCit7CisJ
Y21kX3ZjcHVfY29udHJvbF9ldmVudCh2bSwgZXZlbnRfaWQsIDEsIDAsIDApOworfQorCitzdGF0
aWMgdm9pZCBkaXNhYmxlX3ZjcHVfZXZlbnQoc3RydWN0IGt2bV92bSAqdm0sIF9fdTE2IGV2ZW50
X2lkKQoreworCWNtZF92Y3B1X2NvbnRyb2xfZXZlbnQodm0sIGV2ZW50X2lkLCAwLCAwLCAwKTsK
K30KKworc3RhdGljIHZvaWQgdGVzdF9jbWRfdmNwdV9jb250cm9sX2V2ZW50cyhzdHJ1Y3Qga3Zt
X3ZtICp2bSkKK3sKKwlfX3UxNiBpZCA9IEtWTUlfRVZFTlRfUEFVU0VfVkNQVSwgaW52YWxpZF9p
ZCA9IDB4ZmZmZjsKKwlfX3UxNiBwYWRkaW5nID0gMSwgbm9fcGFkZGluZyA9IDA7CisJX191OCBl
bmFibGUgPSAxLCBlbmFibGVfaW52YWwgPSAyOworCisJZW5hYmxlX3ZjcHVfZXZlbnQodm0sIGlk
KTsKKwlkaXNhYmxlX3ZjcHVfZXZlbnQodm0sIGlkKTsKKworCWNtZF92Y3B1X2NvbnRyb2xfZXZl
bnQodm0sIGlkLCBlbmFibGUsIHBhZGRpbmcsIC1LVk1fRUlOVkFMKTsKKwljbWRfdmNwdV9jb250
cm9sX2V2ZW50KHZtLCBpZCwgZW5hYmxlX2ludmFsLCBub19wYWRkaW5nLCAtS1ZNX0VJTlZBTCk7
CisJY21kX3ZjcHVfY29udHJvbF9ldmVudCh2bSwgaW52YWxpZF9pZCwgZW5hYmxlLCBub19wYWRk
aW5nLCAtS1ZNX0VJTlZBTCk7CisKKwlkaXNhbGxvd19ldmVudCh2bSwgaWQpOworCWNtZF92Y3B1
X2NvbnRyb2xfZXZlbnQodm0sIGlkLCBlbmFibGUsIG5vX3BhZGRpbmcsIC1LVk1fRVBFUk0pOwor
CWFsbG93X2V2ZW50KHZtLCBpZCk7CisKK30KKwogc3RhdGljIHZvaWQgdGVzdF9pbnRyb3NwZWN0
aW9uKHN0cnVjdCBrdm1fdm0gKnZtKQogewogCXNyYW5kb20odGltZSgwKSk7CkBAIC04NTAsNiAr
OTAzLDcgQEAgc3RhdGljIHZvaWQgdGVzdF9pbnRyb3NwZWN0aW9uKHN0cnVjdCBrdm1fdm0gKnZt
KQogCXRlc3RfbWVtb3J5X2FjY2Vzcyh2bSk7CiAJdGVzdF9jbWRfdmNwdV9nZXRfaW5mbyh2bSk7
CiAJdGVzdF9wYXVzZSh2bSk7CisJdGVzdF9jbWRfdmNwdV9jb250cm9sX2V2ZW50cyh2bSk7CiAK
IAl1bmhvb2tfaW50cm9zcGVjdGlvbih2bSk7CiB9CmRpZmYgLS1naXQgYS92aXJ0L2t2bS9pbnRy
b3NwZWN0aW9uL2t2bWkuYyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jCmluZGV4IDll
MDAxNGJiZjlhNi4uMjg2YTgxZTU1ZDlkIDEwMDY0NAotLS0gYS92aXJ0L2t2bS9pbnRyb3NwZWN0
aW9uL2t2bWkuYworKysgYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWkuYwpAQCAtNzMsNiAr
NzMsMTEgQEAgYm9vbCBrdm1pX2lzX2tub3duX3ZtX2V2ZW50KHU4IGlkKQogCXJldHVybiBpZCA8
IEtWTUlfTlVNX0VWRU5UUyAmJiB0ZXN0X2JpdChpZCwgS3ZtaV9rbm93bl92bV9ldmVudHMpOwog
fQogCitib29sIGt2bWlfaXNfa25vd25fdmNwdV9ldmVudCh1OCBpZCkKK3sKKwlyZXR1cm4gaWQg
PCBLVk1JX05VTV9FVkVOVFMgJiYgdGVzdF9iaXQoaWQsIEt2bWlfa25vd25fdmNwdV9ldmVudHMp
OworfQorCiBzdGF0aWMgYm9vbCBpc192bV9ldmVudF9lbmFibGVkKHN0cnVjdCBrdm1faW50cm9z
cGVjdGlvbiAqa3ZtaSwgaW50IGV2ZW50KQogewogCXJldHVybiB0ZXN0X2JpdChldmVudCwga3Zt
aS0+dm1fZXZlbnRfZW5hYmxlX21hc2spOwpAQCAtMTc5LDYgKzE4NCwxMiBAQCBzdGF0aWMgYm9v
bCBhbGxvY192Y3B1aShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUpCiAJaWYgKCF2Y3B1aSkKIAkJcmV0
dXJuIGZhbHNlOwogCisJdmNwdWktPmV2X2VuYWJsZV9tYXNrID0gYml0bWFwX3phbGxvYyhLVk1J
X05VTV9FVkVOVFMsIEdGUF9LRVJORUwpOworCWlmICghdmNwdWktPmV2X2VuYWJsZV9tYXNrKSB7
CisJCWtmcmVlKHZjcHUpOworCQlyZXR1cm4gZmFsc2U7CisJfQorCiAJSU5JVF9MSVNUX0hFQUQo
JnZjcHVpLT5qb2JfbGlzdCk7CiAJc3Bpbl9sb2NrX2luaXQoJnZjcHVpLT5qb2JfbG9jayk7CiAK
QEAgLTIxNCw2ICsyMjUsOCBAQCBzdGF0aWMgdm9pZCBmcmVlX3ZjcHVpKHN0cnVjdCBrdm1fdmNw
dSAqdmNwdSkKIAogCWZyZWVfdmNwdV9qb2JzKHZjcHVpKTsKIAorCWJpdG1hcF9mcmVlKHZjcHVp
LT5ldl9lbmFibGVfbWFzayk7CisKIAlrZnJlZSh2Y3B1aSk7CiAJdmNwdS0+a3ZtaSA9IE5VTEw7
CiB9CkBAIC02MTMsNiArNjI2LDE5IEBAIGludCBrdm1pX2NtZF92bV9jb250cm9sX2V2ZW50cyhz
dHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWksCiAJcmV0dXJuIDA7CiB9CiAKK2ludCBrdm1p
X2NtZF92Y3B1X2NvbnRyb2xfZXZlbnRzKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKKwkJCQkgdW5z
aWduZWQgaW50IGV2ZW50X2lkLCBib29sIGVuYWJsZSkKK3sKKwlzdHJ1Y3Qga3ZtX3ZjcHVfaW50
cm9zcGVjdGlvbiAqdmNwdWkgPSBWQ1BVSSh2Y3B1KTsKKworCWlmIChlbmFibGUpCisJCXNldF9i
aXQoZXZlbnRfaWQsIHZjcHVpLT5ldl9lbmFibGVfbWFzayk7CisJZWxzZQorCQljbGVhcl9iaXQo
ZXZlbnRfaWQsIHZjcHVpLT5ldl9lbmFibGVfbWFzayk7CisKKwlyZXR1cm4gMDsKK30KKwogc3Rh
dGljIHVuc2lnbmVkIGxvbmcgZ2ZuX3RvX2h2YV9zYWZlKHN0cnVjdCBrdm0gKmt2bSwgZ2ZuX3Qg
Z2ZuKQogewogCXVuc2lnbmVkIGxvbmcgaHZhOwpkaWZmIC0tZ2l0IGEvdmlydC9rdm0vaW50cm9z
cGVjdGlvbi9rdm1pX2ludC5oIGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX2ludC5oCmlu
ZGV4IGY3MzU5NjAzMjg4My4uNTdhNjJlYmFkZDk0IDEwMDY0NAotLS0gYS92aXJ0L2t2bS9pbnRy
b3NwZWN0aW9uL2t2bWlfaW50LmgKKysrIGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX2lu
dC5oCkBAIC0zNSwxMiArMzUsMTUgQEAgdm9pZCBrdm1pX21zZ19mcmVlKHZvaWQgKmFkZHIpOwog
Ym9vbCBrdm1pX2lzX2NvbW1hbmRfYWxsb3dlZChzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2
bWksIHUxNiBpZCk7CiBib29sIGt2bWlfaXNfa25vd25fZXZlbnQodTggaWQpOwogYm9vbCBrdm1p
X2lzX2tub3duX3ZtX2V2ZW50KHU4IGlkKTsKK2Jvb2wga3ZtaV9pc19rbm93bl92Y3B1X2V2ZW50
KHU4IGlkKTsKIGludCBrdm1pX2FkZF9qb2Ioc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAogCQkgdm9p
ZCAoKmZjdCkoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCB2b2lkICpjdHgpLAogCQkgdm9pZCAqY3R4
LCB2b2lkICgqZnJlZV9mY3QpKHZvaWQgKmN0eCkpOwogdm9pZCBrdm1pX3J1bl9qb2JzKHN0cnVj
dCBrdm1fdmNwdSAqdmNwdSk7CiBpbnQga3ZtaV9jbWRfdm1fY29udHJvbF9ldmVudHMoc3RydWN0
IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pLAogCQkJCXVuc2lnbmVkIGludCBldmVudF9pZCwgYm9v
bCBlbmFibGUpOworaW50IGt2bWlfY21kX3ZjcHVfY29udHJvbF9ldmVudHMoc3RydWN0IGt2bV92
Y3B1ICp2Y3B1LAorCQkJCSB1bnNpZ25lZCBpbnQgZXZlbnRfaWQsIGJvb2wgZW5hYmxlKTsKIGlu
dCBrdm1pX2NtZF9yZWFkX3BoeXNpY2FsKHN0cnVjdCBrdm0gKmt2bSwgdTY0IGdwYSwgc2l6ZV90
IHNpemUsCiAJCQkgICBpbnQgKCpzZW5kKShzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKiwKIAkJ
CQkJY29uc3Qgc3RydWN0IGt2bWlfbXNnX2hkciosCmRpZmYgLS1naXQgYS92aXJ0L2t2bS9pbnRy
b3NwZWN0aW9uL2t2bWlfbXNnLmMgYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMK
aW5kZXggMWRjZDNkYjc1ZmYxLi4yMGVmNGE0NGQzYTIgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2lu
dHJvc3BlY3Rpb24va3ZtaV9tc2cuYworKysgYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlf
bXNnLmMKQEAgLTM5Nyw2ICszOTcsMjcgQEAgc3RhdGljIGludCBoYW5kbGVfdmNwdV9ldmVudF9y
ZXBseShjb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X21zZ19qb2IgKmpvYiwKIAlyZXR1cm4gZXhwZWN0
ZWQtPmVycm9yOwogfQogCitzdGF0aWMgaW50IGhhbmRsZV92Y3B1X2NvbnRyb2xfZXZlbnRzKGNv
bnN0IHN0cnVjdCBrdm1pX3ZjcHVfbXNnX2pvYiAqam9iLAorCQkJCSAgICAgIGNvbnN0IHN0cnVj
dCBrdm1pX21zZ19oZHIgKm1zZywKKwkJCQkgICAgICBjb25zdCB2b2lkICpfcmVxKQoreworCXN0
cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSA9IEtWTUkoam9iLT52Y3B1LT5rdm0pOworCWNv
bnN0IHN0cnVjdCBrdm1pX3ZjcHVfY29udHJvbF9ldmVudHMgKnJlcSA9IF9yZXE7CisJaW50IGVj
OworCisJaWYgKHJlcS0+cGFkZGluZzEgfHwgcmVxLT5wYWRkaW5nMiB8fCByZXEtPmVuYWJsZSA+
IDEpCisJCWVjID0gLUtWTV9FSU5WQUw7CisJZWxzZSBpZiAoIWt2bWlfaXNfa25vd25fdmNwdV9l
dmVudChyZXEtPmV2ZW50X2lkKSkKKwkJZWMgPSAtS1ZNX0VJTlZBTDsKKwllbHNlIGlmICghaXNf
ZXZlbnRfYWxsb3dlZChrdm1pLCByZXEtPmV2ZW50X2lkKSkKKwkJZWMgPSAtS1ZNX0VQRVJNOwor
CWVsc2UKKwkJZWMgPSBrdm1pX2NtZF92Y3B1X2NvbnRyb2xfZXZlbnRzKGpvYi0+dmNwdSwgcmVx
LT5ldmVudF9pZCwKKwkJCQkJCSAgcmVxLT5lbmFibGUgPT0gMSk7CisKKwlyZXR1cm4ga3ZtaV9t
c2dfdmNwdV9yZXBseShqb2IsIG1zZywgZWMsIE5VTEwsIDApOworfQorCiAvKgogICogVGhlc2Ug
ZnVuY3Rpb25zIGFyZSBleGVjdXRlZCBmcm9tIHRoZSB2Q1BVIHRocmVhZC4gVGhlIHJlY2Vpdmlu
ZyB0aHJlYWQKICAqIHBhc3NlcyB0aGUgbWVzc2FnZXMgdXNpbmcgYSBuZXdseSBhbGxvY2F0ZWQg
J3N0cnVjdCBrdm1pX3ZjcHVfbXNnX2pvYicKQEAgLTQwNSw4ICs0MjYsOSBAQCBzdGF0aWMgaW50
IGhhbmRsZV92Y3B1X2V2ZW50X3JlcGx5KGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfbXNnX2pvYiAq
am9iLAogICovCiBzdGF0aWMgaW50KCpjb25zdCBtc2dfdmNwdVtdKShjb25zdCBzdHJ1Y3Qga3Zt
aV92Y3B1X21zZ19qb2IgKiwKIAkJCSAgICAgIGNvbnN0IHN0cnVjdCBrdm1pX21zZ19oZHIgKiwg
Y29uc3Qgdm9pZCAqKSA9IHsKLQlbS1ZNSV9FVkVOVF0gICAgICAgICA9IGhhbmRsZV92Y3B1X2V2
ZW50X3JlcGx5LAotCVtLVk1JX1ZDUFVfR0VUX0lORk9dID0gaGFuZGxlX3ZjcHVfZ2V0X2luZm8s
CisJW0tWTUlfRVZFTlRdICAgICAgICAgICAgICAgPSBoYW5kbGVfdmNwdV9ldmVudF9yZXBseSwK
KwlbS1ZNSV9WQ1BVX0NPTlRST0xfRVZFTlRTXSA9IGhhbmRsZV92Y3B1X2NvbnRyb2xfZXZlbnRz
LAorCVtLVk1JX1ZDUFVfR0VUX0lORk9dICAgICAgID0gaGFuZGxlX3ZjcHVfZ2V0X2luZm8sCiB9
OwogCiBzdGF0aWMgYm9vbCBpc192Y3B1X2NvbW1hbmQodTE2IGlkKQpfX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpWaXJ0dWFsaXphdGlvbiBtYWlsaW5nIGxp
c3QKVmlydHVhbGl6YXRpb25AbGlzdHMubGludXgtZm91bmRhdGlvbi5vcmcKaHR0cHM6Ly9saXN0
cy5saW51eGZvdW5kYXRpb24ub3JnL21haWxtYW4vbGlzdGluZm8vdmlydHVhbGl6YXRpb24=
