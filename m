Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from hemlock.osuosl.org (smtp2.osuosl.org [140.211.166.133])
	by mail.lfdr.de (Postfix) with ESMTPS id 8C1162C511A
	for <lists.virtualization@lfdr.de>; Thu, 26 Nov 2020 10:26:55 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by hemlock.osuosl.org (Postfix) with ESMTP id 3091C87814;
	Thu, 26 Nov 2020 09:26:54 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from hemlock.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id EpokW-emPwl5; Thu, 26 Nov 2020 09:26:51 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by hemlock.osuosl.org (Postfix) with ESMTP id 93FCF87815;
	Thu, 26 Nov 2020 09:26:51 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 81DD5C0052;
	Thu, 26 Nov 2020 09:26:51 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from whitealder.osuosl.org (smtp1.osuosl.org [140.211.166.138])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 7BBA0C0052
 for <virtualization@lists.linux-foundation.org>;
 Thu, 26 Nov 2020 09:26:50 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by whitealder.osuosl.org (Postfix) with ESMTP id 56E8D8769D
 for <virtualization@lists.linux-foundation.org>;
 Thu, 26 Nov 2020 09:26:50 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from whitealder.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id OK3W52dtumB4
 for <virtualization@lists.linux-foundation.org>;
 Thu, 26 Nov 2020 09:26:47 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from us-smtp-delivery-124.mimecast.com
 (us-smtp-delivery-124.mimecast.com [216.205.24.124])
 by whitealder.osuosl.org (Postfix) with ESMTPS id 78ED08769C
 for <virtualization@lists.linux-foundation.org>;
 Thu, 26 Nov 2020 09:26:47 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;
 s=mimecast20190719; t=1606382806;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:cc:mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=Luz+rpKIozTILX7xIUt5rWb6lv38obLQtKAgNcWu3Dw=;
 b=arBOGNwGv8bZ8Y43WRt6fCAL7pGhO5gu+928Xb5OBOgbYflgfoyULiqRDNHBn2AyhFH4i+
 fUmY63MX7Z/A764u2ni42wVOGB3j+fh//ISX8kPMPhJHJ9kkeIoeuR4mtOV/FLSfjmE6qC
 II3pBHpsfpdHFXYcIKiLxEXFw7Qefy4=
Received: from mimecast-mx01.redhat.com (mimecast-mx01.redhat.com
 [209.132.183.4]) (Using TLS) by relay.mimecast.com with ESMTP id
 us-mta-371-nfocoi0MPVqPCUGG_0USvg-1; Thu, 26 Nov 2020 04:26:43 -0500
X-MC-Unique: nfocoi0MPVqPCUGG_0USvg-1
Received: from smtp.corp.redhat.com (int-mx08.intmail.prod.int.phx2.redhat.com
 [10.5.11.23])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mimecast-mx01.redhat.com (Postfix) with ESMTPS id 5C5A0807344;
 Thu, 26 Nov 2020 09:26:42 +0000 (UTC)
Received: from jason-ThinkPad-X1-Carbon-6th.redhat.com
 (ovpn-13-213.pek2.redhat.com [10.72.13.213])
 by smtp.corp.redhat.com (Postfix) with ESMTP id 7AC8F19C71;
 Thu, 26 Nov 2020 09:26:40 +0000 (UTC)
From: Jason Wang <jasowang@redhat.com>
To: mst@redhat.com, jasowang@redhat.com,
 virtualization@lists.linux-foundation.org, linux-kernel@vger.kernel.org
Subject: [PATCH V2 11/14] virtio-pci: introduce modern device module
Date: Thu, 26 Nov 2020 17:26:01 +0800
Message-Id: <20201126092604.208033-12-jasowang@redhat.com>
In-Reply-To: <20201126092604.208033-1-jasowang@redhat.com>
References: <20201126092604.208033-1-jasowang@redhat.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.84 on 10.5.11.23
Cc: shahafs@mellanox.com
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

VGhpcyBwYXRjaCBpbnRyb2R1Y2UgYW4gc2VwYXJhdGUgbW9kdWxlIHRoYXQgaW1wbGVtZW50IHRo
ZSBsb3cgbGV2ZWwKZGV2aWNlIHByb2JlIGFuZCBhY2Nlc3MgbG9naWMgZm9yIG1vZGVybiBkZXZp
Y2UuIFRoZSBnb2FsIGlzIGxldCB0aGUKbW9kdWxlIHRvIGJlIHJldXNlZCBieSBvdGhlciBkcml2
ZXIgKGUuZyB2RFBBIGRyaXZlciB0aGF0IHdpbGwgYmUKaW50cm9kdWNlZCBzb29uKS4KCk5vdGUg
dGhhdCwgdGhlIHNoYXJlZCBtZW1vcnkgY2FwIGlzIG5vdCBjb252ZXJ0ZWQgc2luY2UgdGhlcmUn
cyBubwp1c2VyIGN1cnJlbnRseS4gV2UgY2FuIGRvIHRoYXQgaW4gdGhlIGZ1dHVyZSBpZiBuZWNl
c3NhcnkuCgpTaWduZWQtb2ZmLWJ5OiBKYXNvbiBXYW5nIDxqYXNvd2FuZ0ByZWRoYXQuY29tPgot
LS0KIGRyaXZlcnMvdmlydGlvL0tjb25maWcgICAgICAgICAgICAgICAgIHwgIDEwICstCiBkcml2
ZXJzL3ZpcnRpby9NYWtlZmlsZSAgICAgICAgICAgICAgICB8ICAgMSArCiBkcml2ZXJzL3ZpcnRp
by92aXJ0aW9fcGNpX2NvbW1vbi5oICAgICB8ICAyOCArLQogZHJpdmVycy92aXJ0aW8vdmlydGlv
X3BjaV9tb2Rlcm4uYyAgICAgfCA0NjIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogZHJpdmVy
cy92aXJ0aW8vdmlydGlvX3BjaV9tb2Rlcm5fZGV2LmMgfCA0NjIgKysrKysrKysrKysrKysrKysr
KysrKysrKwogaW5jbHVkZS9saW51eC92aXJ0aW9fcGNpX21vZGVybi5oICAgICAgfCAxMDcgKysr
KysrCiA2IGZpbGVzIGNoYW5nZWQsIDU4MCBpbnNlcnRpb25zKCspLCA0OTAgZGVsZXRpb25zKC0p
CiBjcmVhdGUgbW9kZSAxMDA2NDQgZHJpdmVycy92aXJ0aW8vdmlydGlvX3BjaV9tb2Rlcm5fZGV2
LmMKIGNyZWF0ZSBtb2RlIDEwMDY0NCBpbmNsdWRlL2xpbnV4L3ZpcnRpb19wY2lfbW9kZXJuLmgK
CmRpZmYgLS1naXQgYS9kcml2ZXJzL3ZpcnRpby9LY29uZmlnIGIvZHJpdmVycy92aXJ0aW8vS2Nv
bmZpZwppbmRleCBlNzZlOWI5YmE5M2MuLjI2NDkxYjZlN2UxMCAxMDA2NDQKLS0tIGEvZHJpdmVy
cy92aXJ0aW8vS2NvbmZpZworKysgYi9kcml2ZXJzL3ZpcnRpby9LY29uZmlnCkBAIC02LDYgKzYs
MTQgQEAgY29uZmlnIFZJUlRJTwogCSAgYnVzLCBzdWNoIGFzIENPTkZJR19WSVJUSU9fUENJLCBD
T05GSUdfVklSVElPX01NSU8sIENPTkZJR19SUE1TRwogCSAgb3IgQ09ORklHX1MzOTBfR1VFU1Qu
CiAKK2NvbmZpZyBWSVJUSU9fUENJX01PREVSTgorCXRyaXN0YXRlICJNb2Rlcm4gVmlydGlvIFBD
SSBEZXZpY2UiCisJZGVwZW5kcyBvbiBQQ0kKKwloZWxwCisJICBNb2Rlcm4gUENJIGRldmljZSBp
bXBsZW1lbnRhdGlvbi4gVGhpcyBtb2R1bGUgaW1wbGVtZW50IHRoZQorCSAgYmFzaWMgcHJvYmUg
YW5kIGNvbnRyb2wgZm9yIGRldmljZXMgd2hpY2ggaXMgYmFzZWQgb24gbW9kZXJuCisJICBQQ0kg
ZGV2aWNlIHdpdGggcG9zc2libGUgdmVuZG9yIHNwZWNpZmljIGV4dGVuc2lvbnMuCisKIG1lbnVj
b25maWcgVklSVElPX01FTlUKIAlib29sICJWaXJ0aW8gZHJpdmVycyIKIAlkZWZhdWx0IHkKQEAg
LTE0LDcgKzIyLDcgQEAgaWYgVklSVElPX01FTlUKIAogY29uZmlnIFZJUlRJT19QQ0kKIAl0cmlz
dGF0ZSAiUENJIGRyaXZlciBmb3IgdmlydGlvIGRldmljZXMiCi0JZGVwZW5kcyBvbiBQQ0kKKwlk
ZXBlbmRzIG9uIFBDSSAmJiBWSVJUSU9fUENJX01PREVSTgogCXNlbGVjdCBWSVJUSU8KIAloZWxw
CiAJICBUaGlzIGRyaXZlciBwcm92aWRlcyBzdXBwb3J0IGZvciB2aXJ0aW8gYmFzZWQgcGFyYXZp
cnR1YWwgZGV2aWNlCmRpZmYgLS1naXQgYS9kcml2ZXJzL3ZpcnRpby9NYWtlZmlsZSBiL2RyaXZl
cnMvdmlydGlvL01ha2VmaWxlCmluZGV4IDU5MWU2ZjcyYWE1NC4uZjA5NzU3OGFhYThmIDEwMDY0
NAotLS0gYS9kcml2ZXJzL3ZpcnRpby9NYWtlZmlsZQorKysgYi9kcml2ZXJzL3ZpcnRpby9NYWtl
ZmlsZQpAQCAtMSw1ICsxLDYgQEAKICMgU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAK
IG9iai0kKENPTkZJR19WSVJUSU8pICs9IHZpcnRpby5vIHZpcnRpb19yaW5nLm8KK29iai0kKENP
TkZJR19WSVJUSU9fUENJX01PREVSTikgKz0gdmlydGlvX3BjaV9tb2Rlcm5fZGV2Lm8KIG9iai0k
KENPTkZJR19WSVJUSU9fTU1JTykgKz0gdmlydGlvX21taW8ubwogb2JqLSQoQ09ORklHX1ZJUlRJ
T19QQ0kpICs9IHZpcnRpb19wY2kubwogdmlydGlvX3BjaS15IDo9IHZpcnRpb19wY2lfbW9kZXJu
Lm8gdmlydGlvX3BjaV9jb21tb24ubwpkaWZmIC0tZ2l0IGEvZHJpdmVycy92aXJ0aW8vdmlydGlv
X3BjaV9jb21tb24uaCBiL2RyaXZlcnMvdmlydGlvL3ZpcnRpb19wY2lfY29tbW9uLmgKaW5kZXgg
ZDMyYWY4ZmY1NmY5Li40MDI1Yjk0MGY3NGUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdmlydGlvL3Zp
cnRpb19wY2lfY29tbW9uLmgKKysrIGIvZHJpdmVycy92aXJ0aW8vdmlydGlvX3BjaV9jb21tb24u
aApAQCAtMjUsNiArMjUsNyBAQAogI2luY2x1ZGUgPGxpbnV4L3ZpcnRpb19jb25maWcuaD4KICNp
bmNsdWRlIDxsaW51eC92aXJ0aW9fcmluZy5oPgogI2luY2x1ZGUgPGxpbnV4L3ZpcnRpb19wY2ku
aD4KKyNpbmNsdWRlIDxsaW51eC92aXJ0aW9fcGNpX21vZGVybi5oPgogI2luY2x1ZGUgPGxpbnV4
L2hpZ2htZW0uaD4KICNpbmNsdWRlIDxsaW51eC9zcGlubG9jay5oPgogCkBAIC0zOSwzMyArNDAs
NiBAQCBzdHJ1Y3QgdmlydGlvX3BjaV92cV9pbmZvIHsKIAl1bnNpZ25lZCBtc2l4X3ZlY3RvcjsK
IH07CiAKLXN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgewotCXN0cnVjdCBwY2lfZGV2
ICpwY2lfZGV2OwotCi0JLyogVGhlIElPIG1hcHBpbmcgZm9yIHRoZSBQQ0kgQkFScyAqLwotCXZv
aWQgX19pb21lbSAqIGNvbnN0ICpiYXNlOwotCi0JLyogVGhlIElPIG1hcHBpbmcgZm9yIHRoZSBQ
Q0kgY29uZmlnIHNwYWNlICovCi0Jc3RydWN0IHZpcnRpb19wY2lfY29tbW9uX2NmZyBfX2lvbWVt
ICpjb21tb247Ci0JLyogRGV2aWNlLXNwZWNpZmljIGRhdGEgKG5vbi1sZWdhY3kgbW9kZSkgICov
Ci0Jdm9pZCBfX2lvbWVtICpkZXZpY2U7Ci0JLyogQmFzZSBvZiB2cSBub3RpZmljYXRpb25zIChu
b24tbGVnYWN5IG1vZGUpLiAqLwotCXZvaWQgX19pb21lbSAqbm90aWZ5X2Jhc2U7Ci0JLyogV2hl
cmUgdG8gcmVhZCBhbmQgY2xlYXIgaW50ZXJydXB0ICovCi0JdTggX19pb21lbSAqaXNyOwotCi0J
LyogU28gd2UgY2FuIHNhbml0eS1jaGVjayBhY2Nlc3Nlcy4gKi8KLQlzaXplX3Qgbm90aWZ5X2xl
bjsKLQlzaXplX3QgZGV2aWNlX2xlbjsKLQotCS8qIE11bHRpcGx5IHF1ZXVlX25vdGlmeV9vZmYg
YnkgdGhpcyB2YWx1ZS4gKG5vbi1sZWdhY3kgbW9kZSkuICovCi0JdTMyIG5vdGlmeV9vZmZzZXRf
bXVsdGlwbGllcjsKLQotCWludCBtb2Rlcm5fYmFyczsKLQotCXN0cnVjdCB2aXJ0aW9fZGV2aWNl
X2lkIGlkOwotfTsKLQogLyogT3VyIGRldmljZSBzdHJ1Y3R1cmUgKi8KIHN0cnVjdCB2aXJ0aW9f
cGNpX2RldmljZSB7CiAJc3RydWN0IHZpcnRpb19kZXZpY2UgdmRldjsKZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvdmlydGlvL3ZpcnRpb19wY2lfbW9kZXJuLmMgYi9kcml2ZXJzL3ZpcnRpby92aXJ0aW9f
cGNpX21vZGVybi5jCmluZGV4IDhmMWYyNzQ3MjRiZS4uOGRmZGMzYjU3NTAyIDEwMDY0NAotLS0g
YS9kcml2ZXJzL3ZpcnRpby92aXJ0aW9fcGNpX21vZGVybi5jCisrKyBiL2RyaXZlcnMvdmlydGlv
L3ZpcnRpb19wY2lfbW9kZXJuLmMKQEAgLTE5LDExMyArMTksNiBAQAogI2RlZmluZSBWSVJUSU9f
UklOR19OT19MRUdBQ1kKICNpbmNsdWRlICJ2aXJ0aW9fcGNpX2NvbW1vbi5oIgogCi0vKgotICog
VHlwZS1zYWZlIHdyYXBwZXJzIGZvciBpbyBhY2Nlc3Nlcy4KLSAqIFVzZSB0aGVzZSB0byBlbmZv
cmNlIGF0IGNvbXBpbGUgdGltZSB0aGUgZm9sbG93aW5nIHNwZWMgcmVxdWlyZW1lbnQ6Ci0gKgot
ICogVGhlIGRyaXZlciBNVVNUIGFjY2VzcyBlYWNoIGZpZWxkIHVzaW5nIHRoZSDigJxuYXR1cmFs
4oCdIGFjY2VzcwotICogbWV0aG9kLCBpLmUuIDMyLWJpdCBhY2Nlc3NlcyBmb3IgMzItYml0IGZp
ZWxkcywgMTYtYml0IGFjY2Vzc2VzCi0gKiBmb3IgMTYtYml0IGZpZWxkcyBhbmQgOC1iaXQgYWNj
ZXNzZXMgZm9yIDgtYml0IGZpZWxkcy4KLSAqLwotc3RhdGljIGlubGluZSB1OCB2cF9pb3JlYWQ4
KGNvbnN0IHU4IF9faW9tZW0gKmFkZHIpCi17Ci0JcmV0dXJuIGlvcmVhZDgoYWRkcik7Ci19Ci1z
dGF0aWMgaW5saW5lIHUxNiB2cF9pb3JlYWQxNiAoY29uc3QgX19sZTE2IF9faW9tZW0gKmFkZHIp
Ci17Ci0JcmV0dXJuIGlvcmVhZDE2KGFkZHIpOwotfQotCi1zdGF0aWMgaW5saW5lIHUzMiB2cF9p
b3JlYWQzMihjb25zdCBfX2xlMzIgX19pb21lbSAqYWRkcikKLXsKLQlyZXR1cm4gaW9yZWFkMzIo
YWRkcik7Ci19Ci0KLXN0YXRpYyBpbmxpbmUgdm9pZCB2cF9pb3dyaXRlOCh1OCB2YWx1ZSwgdTgg
X19pb21lbSAqYWRkcikKLXsKLQlpb3dyaXRlOCh2YWx1ZSwgYWRkcik7Ci19Ci0KLXN0YXRpYyBp
bmxpbmUgdm9pZCB2cF9pb3dyaXRlMTYodTE2IHZhbHVlLCBfX2xlMTYgX19pb21lbSAqYWRkcikK
LXsKLQlpb3dyaXRlMTYodmFsdWUsIGFkZHIpOwotfQotCi1zdGF0aWMgaW5saW5lIHZvaWQgdnBf
aW93cml0ZTMyKHUzMiB2YWx1ZSwgX19sZTMyIF9faW9tZW0gKmFkZHIpCi17Ci0JaW93cml0ZTMy
KHZhbHVlLCBhZGRyKTsKLX0KLQotc3RhdGljIHZvaWQgdnBfaW93cml0ZTY0X3R3b3BhcnQodTY0
IHZhbCwKLQkJCQkgX19sZTMyIF9faW9tZW0gKmxvLCBfX2xlMzIgX19pb21lbSAqaGkpCi17Ci0J
dnBfaW93cml0ZTMyKCh1MzIpdmFsLCBsbyk7Ci0JdnBfaW93cml0ZTMyKHZhbCA+PiAzMiwgaGkp
OwotfQotCi1zdGF0aWMgdm9pZCBfX2lvbWVtICptYXBfY2FwYWJpbGl0eShzdHJ1Y3QgdmlydGlv
X3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAotCQkJCSAgICBpbnQgb2ZmLCBzaXplX3QgbWlubGVu
LCB1MzIgYWxpZ24sCi0JCQkJICAgIHUzMiBzaXplLCBzaXplX3QgKmxlbikKLXsKLQlzdHJ1Y3Qg
cGNpX2RldiAqZGV2ID0gbWRldi0+cGNpX2RldjsKLQl1OCBiYXI7Ci0JdTMyIG9mZnNldCwgbGVu
Z3RoOwotCi0JcGNpX3JlYWRfY29uZmlnX2J5dGUoZGV2LCBvZmYgKyBvZmZzZXRvZihzdHJ1Y3Qg
dmlydGlvX3BjaV9jYXAsCi0JCQkJCQkgYmFyKSwKLQkJCSAgICAgJmJhcik7Ci0JcGNpX3JlYWRf
Y29uZmlnX2R3b3JkKGRldiwgb2ZmICsgb2Zmc2V0b2Yoc3RydWN0IHZpcnRpb19wY2lfY2FwLCBv
ZmZzZXQpLAotCQkJICAgICAmb2Zmc2V0KTsKLQlwY2lfcmVhZF9jb25maWdfZHdvcmQoZGV2LCBv
ZmYgKyBvZmZzZXRvZihzdHJ1Y3QgdmlydGlvX3BjaV9jYXAsIGxlbmd0aCksCi0JCQkgICAgICAm
bGVuZ3RoKTsKLQotCWlmIChsZW5ndGggPCBtaW5sZW4pIHsKLQkJZGV2X2VycigmZGV2LT5kZXYs
Ci0JCQkidmlydGlvX3BjaTogYmFkIGNhcGFiaWxpdHkgbGVuICV1ICg+PSV6dSBleHBlY3RlZClc
biIsCi0JCQlsZW5ndGgsIG1pbmxlbik7Ci0JCXJldHVybiBOVUxMOwotCX0KLQotCWlmIChvZmZz
ZXQgJiAoYWxpZ24gLSAxKSkgewotCQlkZXZfZXJyKCZkZXYtPmRldiwKLQkJCSJ2aXJ0aW9fcGNp
OiBvZmZzZXQgJXUgbm90IGFsaWduZWQgdG8gJXVcbiIsCi0JCQlvZmZzZXQsIGFsaWduKTsKLQkJ
cmV0dXJuIE5VTEw7Ci0JfQotCi0JaWYgKGxlbmd0aCA+IHNpemUpCi0JCWxlbmd0aCA9IHNpemU7
Ci0KLQlpZiAobGVuKQotCQkqbGVuID0gbGVuZ3RoOwotCi0JaWYgKG1pbmxlbiArIG9mZnNldCA8
IG1pbmxlbiB8fAotCSAgICBtaW5sZW4gKyBvZmZzZXQgPiBwY2lfcmVzb3VyY2VfbGVuKGRldiwg
YmFyKSkgewotCQlkZXZfZXJyKCZkZXYtPmRldiwKLQkJCSJ2aXJ0aW9fcGNpOiBtYXAgdmlydGlv
ICV6dUAldSAiCi0JCQkib3V0IG9mIHJhbmdlIG9uIGJhciAlaSBsZW5ndGggJWx1XG4iLAotCQkJ
bWlubGVuLCBvZmZzZXQsCi0JCQliYXIsICh1bnNpZ25lZCBsb25nKXBjaV9yZXNvdXJjZV9sZW4o
ZGV2LCBiYXIpKTsKLQkJcmV0dXJuIE5VTEw7Ci0JfQotCi0JcmV0dXJuIG1kZXYtPmJhc2VbYmFy
XSArIG9mZnNldDsKLX0KLQotc3RhdGljIHU2NCB2cF9tb2Rlcm5fZ2V0X2ZlYXR1cmVzKHN0cnVj
dCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYpCi17Ci0Jc3RydWN0IHZpcnRpb19wY2lf
Y29tbW9uX2NmZyBfX2lvbWVtICpjZmcgPSBtZGV2LT5jb21tb247Ci0KLQl1NjQgZmVhdHVyZXM7
Ci0KLQl2cF9pb3dyaXRlMzIoMCwgJmNmZy0+ZGV2aWNlX2ZlYXR1cmVfc2VsZWN0KTsKLQlmZWF0
dXJlcyA9IHZwX2lvcmVhZDMyKCZjZmctPmRldmljZV9mZWF0dXJlKTsKLQl2cF9pb3dyaXRlMzIo
MSwgJmNmZy0+ZGV2aWNlX2ZlYXR1cmVfc2VsZWN0KTsKLQlmZWF0dXJlcyB8PSAoKHU2NCl2cF9p
b3JlYWQzMigmY2ZnLT5kZXZpY2VfZmVhdHVyZSkgPDwgMzIpOwotCi0JcmV0dXJuIGZlYXR1cmVz
OwotfQotCiAvKiB2aXJ0aW8gY29uZmlnLT5nZXRfZmVhdHVyZXMoKSBpbXBsZW1lbnRhdGlvbiAq
Lwogc3RhdGljIHU2NCB2cF9nZXRfZmVhdHVyZXMoc3RydWN0IHZpcnRpb19kZXZpY2UgKnZkZXYp
CiB7CkBAIC0xNDQsMTQ0ICszNyw2IEBAIHN0YXRpYyB2b2lkIHZwX3RyYW5zcG9ydF9mZWF0dXJl
cyhzdHJ1Y3QgdmlydGlvX2RldmljZSAqdmRldiwgdTY0IGZlYXR1cmVzKQogCQlfX3ZpcnRpb19z
ZXRfYml0KHZkZXYsIFZJUlRJT19GX1NSX0lPVik7CiB9CiAKLXN0YXRpYyB2b2lkIHZwX21vZGVy
bl9zZXRfZmVhdHVyZXMoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2RldmljZSAqbWRldiwKLQkJ
CQkgICB1NjQgZmVhdHVyZXMpCi17Ci0Jc3RydWN0IHZpcnRpb19wY2lfY29tbW9uX2NmZyBfX2lv
bWVtICpjZmcgPSBtZGV2LT5jb21tb247Ci0KLQl2cF9pb3dyaXRlMzIoMCwgJmNmZy0+Z3Vlc3Rf
ZmVhdHVyZV9zZWxlY3QpOwotCXZwX2lvd3JpdGUzMigodTMyKWZlYXR1cmVzLCAmY2ZnLT5ndWVz
dF9mZWF0dXJlKTsKLQl2cF9pb3dyaXRlMzIoMSwgJmNmZy0+Z3Vlc3RfZmVhdHVyZV9zZWxlY3Qp
OwotCXZwX2lvd3JpdGUzMihmZWF0dXJlcyA+PiAzMiwgJmNmZy0+Z3Vlc3RfZmVhdHVyZSk7Ci19
Ci0KLS8qCi0gKiB2cF9tb2Rlcm5fcXVldWVfdmVjdG9yIC0gc2V0IHRoZSBNU0lYIHZlY3RvciBm
b3IgYSBzcGVjaWZpYyB2aXJ0cXVldWUKLSAqIEBtZGV2OiB0aGUgbW9kZXJuIHZpcnRpby1wY2kg
ZGV2aWNlCi0gKiBAaW5kZXg6IHF1ZXVlIGluZGV4Ci0gKiBAdmVjdG9yOiB0aGUgY29uZmlnIHZl
Y3RvcgotICoKLSAqIFJldHVybnMgdGhlIGNvbmZpZyB2ZWN0b3IgcmVhZCBmcm9tIHRoZSBkZXZp
Y2UKLSAqLwotc3RhdGljIHUxNiB2cF9tb2Rlcm5fcXVldWVfdmVjdG9yKHN0cnVjdCB2aXJ0aW9f
cGNpX21vZGVybl9kZXZpY2UgKm1kZXYsCi0JCQkJICB1MTYgaW5kZXgsIHUxNiB2ZWN0b3IpCi17
Ci0Jc3RydWN0IHZpcnRpb19wY2lfY29tbW9uX2NmZyBfX2lvbWVtICpjZmcgPSBtZGV2LT5jb21t
b247Ci0KLQl2cF9pb3dyaXRlMTYoaW5kZXgsICZjZmctPnF1ZXVlX3NlbGVjdCk7Ci0JdnBfaW93
cml0ZTE2KHZlY3RvciwgJmNmZy0+cXVldWVfbXNpeF92ZWN0b3IpOwotCS8qIEZsdXNoIHRoZSB3
cml0ZSBvdXQgdG8gZGV2aWNlICovCi0JcmV0dXJuIHZwX2lvcmVhZDE2KCZjZmctPnF1ZXVlX21z
aXhfdmVjdG9yKTsKLX0KLQotLyoKLSAqIHZwX21vZGVybl9xdWV1ZV9hZGRyZXNzIC0gc2V0IHRo
ZSB2aXJ0cXVldWUgYWRkcmVzcwotICogQG1kZXY6IHRoZSBtb2Rlcm4gdmlydGlvLXBjaSBkZXZp
Y2UKLSAqIEBpbmRleDogdGhlIHF1ZXVlIGluZGV4Ci0gKiBAZGVzY19hZGRyOiBhZGRyZXNzIG9m
IHRoZSBkZXNjcmlwdG9yIGFyZWEKLSAqIEBkcml2ZXJfYWRkcjogYWRkcmVzcyBvZiB0aGUgZHJp
dmVyIGFyZWEKLSAqIEBkZXZpY2VfYWRkcjogYWRkcmVzcyBvZiB0aGUgZGV2aWNlIGFyZWEKLSAq
Lwotc3RhdGljIHZvaWQgdnBfbW9kZXJuX3F1ZXVlX2FkZHJlc3Moc3RydWN0IHZpcnRpb19wY2lf
bW9kZXJuX2RldmljZSAqbWRldiwKLQkJCQkgICAgdTE2IGluZGV4LCB1NjQgZGVzY19hZGRyLCB1
NjQgZHJpdmVyX2FkZHIsCi0JCQkJICAgIHU2NCBkZXZpY2VfYWRkcikKLXsKLQlzdHJ1Y3Qgdmly
dGlvX3BjaV9jb21tb25fY2ZnIF9faW9tZW0gKmNmZyA9IG1kZXYtPmNvbW1vbjsKLQotCXZwX2lv
d3JpdGUxNihpbmRleCwgJmNmZy0+cXVldWVfc2VsZWN0KTsKLQotCXZwX2lvd3JpdGU2NF90d29w
YXJ0KGRlc2NfYWRkciwgJmNmZy0+cXVldWVfZGVzY19sbywKLQkJCSAgICAgJmNmZy0+cXVldWVf
ZGVzY19oaSk7Ci0JdnBfaW93cml0ZTY0X3R3b3BhcnQoZHJpdmVyX2FkZHIsICZjZmctPnF1ZXVl
X2F2YWlsX2xvLAotCQkJICAgICAmY2ZnLT5xdWV1ZV9hdmFpbF9oaSk7Ci0JdnBfaW93cml0ZTY0
X3R3b3BhcnQoZGV2aWNlX2FkZHIsICZjZmctPnF1ZXVlX3VzZWRfbG8sCi0JCQkgICAgICZjZmct
PnF1ZXVlX3VzZWRfaGkpOwotfQotCi0vKgotICogdnBfbW9kZXJuX3NldF9xdWV1ZV9lbmFibGUg
LSBlbmFibGUgYSB2aXJ0cXVldWUKLSAqIEBtZGV2OiB0aGUgbW9kZXJuIHZpcnRpby1wY2kgZGV2
aWNlCi0gKiBAaW5kZXg6IHRoZSBxdWV1ZSBpbmRleAotICogQGVuYWJsZTogd2hldGhlciB0aGUg
dmlydHF1ZXVlIGlzIGVuYWJsZSBvciBub3QKLSAqLwotc3RhdGljIHZvaWQgdnBfbW9kZXJuX3Nl
dF9xdWV1ZV9lbmFibGUoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2RldmljZSAqbWRldiwKLQkJ
CQkgICAgICAgdTE2IGluZGV4LCBib29sIGVuYWJsZSkKLXsKLQl2cF9pb3dyaXRlMTYoaW5kZXgs
ICZtZGV2LT5jb21tb24tPnF1ZXVlX3NlbGVjdCk7Ci0JdnBfaW93cml0ZTE2KGVuYWJsZSwgJm1k
ZXYtPmNvbW1vbi0+cXVldWVfZW5hYmxlKTsKLX0KLQotLyoKLSAqIHZwX21vZGVybl9nZXRfcXVl
dWVfZW5hYmxlIC0gZW5hYmxlIGEgdmlydHF1ZXVlCi0gKiBAbWRldjogdGhlIG1vZGVybiB2aXJ0
aW8tcGNpIGRldmljZQotICogQGluZGV4OiB0aGUgcXVldWUgaW5kZXgKLSAqCi0gKiBSZXR1cm5z
IHdoZXRoZXIgYSB2aXJ0cXVldWUgaXMgZW5hYmxlZCBvciBub3QKLSAqLwotc3RhdGljIGJvb2wg
dnBfbW9kZXJuX2dldF9xdWV1ZV9lbmFibGUoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2Rldmlj
ZSAqbWRldiwKLQkJCQkgICAgICAgdTE2IGluZGV4KQotewotCXZwX2lvd3JpdGUxNihpbmRleCwg
Jm1kZXYtPmNvbW1vbi0+cXVldWVfc2VsZWN0KTsKLQotCXJldHVybiB2cF9pb3JlYWQxNigmbWRl
di0+Y29tbW9uLT5xdWV1ZV9lbmFibGUpOwotfQotCi0vKgotICogdnBfbW9kZXJuX3NldF9xdWV1
ZV9zaXplIC0gc2V0IHNpemUgZm9yIGEgdmlydHF1ZXVlCi0gKiBAbWRldjogdGhlIG1vZGVybiB2
aXJ0aW8tcGNpIGRldmljZQotICogQGluZGV4OiB0aGUgcXVldWUgaW5kZXgKLSAqIEBzaXplOiB0
aGUgc2l6ZSBvZiB0aGUgdmlydHF1ZXVlCi0gKi8KLXN0YXRpYyB2b2lkIHZwX21vZGVybl9zZXRf
cXVldWVfc2l6ZShzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAotCQkJCSAg
ICAgdTE2IGluZGV4LCB1MTYgc2l6ZSkKLXsKLQl2cF9pb3dyaXRlMTYoaW5kZXgsICZtZGV2LT5j
b21tb24tPnF1ZXVlX3NlbGVjdCk7Ci0JdnBfaW93cml0ZTE2KHNpemUsICZtZGV2LT5jb21tb24t
PnF1ZXVlX3NpemUpOwotCi19Ci0KLS8qCi0gKiB2cF9tb2Rlcm5fZ2V0X3F1ZXVlX3NpemUgLSBn
ZXQgc2l6ZSBmb3IgYSB2aXJ0cXVldWUKLSAqIEBtZGV2OiB0aGUgbW9kZXJuIHZpcnRpby1wY2kg
ZGV2aWNlCi0gKiBAaW5kZXg6IHRoZSBxdWV1ZSBpbmRleAotICoKLSAqIFJldHVybnMgdGhlIHNp
emUgb2YgdGhlIHZpcnRxdWV1ZQotICovCi1zdGF0aWMgdTE2IHZwX21vZGVybl9nZXRfcXVldWVf
c2l6ZShzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAotCQkJCSAgICB1MTYg
aW5kZXgpCi17Ci0JdnBfaW93cml0ZTE2KGluZGV4LCAmbWRldi0+Y29tbW9uLT5xdWV1ZV9zZWxl
Y3QpOwotCi0JcmV0dXJuIHZwX2lvcmVhZDE2KCZtZGV2LT5jb21tb24tPnF1ZXVlX3NpemUpOwot
Ci19Ci0KLS8qCi0gKiB2cF9tb2Rlcm5fZ2V0X251bV9xdWV1ZXMgLSBnZXQgdGhlIG51bWJlciBv
ZiB2aXJ0cXVldWVzCi0gKiBAbWRldjogdGhlIG1vZGVybiB2aXJ0aW8tcGNpIGRldmljZQotICoK
LSAqIFJldHVybnMgdGhlIG51bWJlciBvZiB2aXJ0cXVldWVzCi0gKi8KLXN0YXRpYyB1MTYgdnBf
bW9kZXJuX2dldF9udW1fcXVldWVzKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1k
ZXYpCi17Ci0JcmV0dXJuIHZwX2lvcmVhZDE2KCZtZGV2LT5jb21tb24tPm51bV9xdWV1ZXMpOwot
fQotCi0vKgotICogdnBfbW9kZXJuX2dldF9xdWV1ZV9ub3RpZnlfb2ZmIC0gZ2V0IG5vdGlmaWNh
dGlvbiBvZmZzZXQgZm9yIGEgdmlydHF1ZXVlCi0gKiBAbWRldjogdGhlIG1vZGVybiB2aXJ0aW8t
cGNpIGRldmljZQotICogQGluZGV4OiB0aGUgcXVldWUgaW5kZXgKLSAqCi0gKiBSZXR1cm5zIHRo
ZSBub3RpZmljYXRpb24gb2Zmc2V0IGZvciBhIHZpcnRxdWV1ZQotICovCi1zdGF0aWMgdTE2IHZw
X21vZGVybl9nZXRfcXVldWVfbm90aWZ5X29mZihzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2
aWNlICptZGV2LAotCQkJCQkgIHUxNiBpbmRleCkKLXsKLQl2cF9pb3dyaXRlMTYoaW5kZXgsICZt
ZGV2LT5jb21tb24tPnF1ZXVlX3NlbGVjdCk7Ci0KLQlyZXR1cm4gdnBfaW9yZWFkMTYoJm1kZXYt
PmNvbW1vbi0+cXVldWVfbm90aWZ5X29mZik7Ci19Ci0KIC8qIHZpcnRpbyBjb25maWctPmZpbmFs
aXplX2ZlYXR1cmVzKCkgaW1wbGVtZW50YXRpb24gKi8KIHN0YXRpYyBpbnQgdnBfZmluYWxpemVf
ZmVhdHVyZXMoc3RydWN0IHZpcnRpb19kZXZpY2UgKnZkZXYpCiB7CkBAIC0zODAsMTMgKzEzNSw2
IEBAIHN0YXRpYyB2b2lkIHZwX3NldChzdHJ1Y3QgdmlydGlvX2RldmljZSAqdmRldiwgdW5zaWdu
ZWQgb2Zmc2V0LAogCX0KIH0KIAotc3RhdGljIHUzMiB2cF9tb2Rlcm5fZ2VuZXJhdGlvbihzdHJ1
Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2KQotewotCXN0cnVjdCB2aXJ0aW9fcGNp
X2NvbW1vbl9jZmcgX19pb21lbSAqY2ZnID0gbWRldi0+Y29tbW9uOwotCi0JcmV0dXJuIHZwX2lv
cmVhZDgoJmNmZy0+Y29uZmlnX2dlbmVyYXRpb24pOwotfQotCiBzdGF0aWMgdTMyIHZwX2dlbmVy
YXRpb24oc3RydWN0IHZpcnRpb19kZXZpY2UgKnZkZXYpCiB7CiAJc3RydWN0IHZpcnRpb19wY2lf
ZGV2aWNlICp2cF9kZXYgPSB0b192cF9kZXZpY2UodmRldik7CkBAIC0zOTQsMTQgKzE0Miw2IEBA
IHN0YXRpYyB1MzIgdnBfZ2VuZXJhdGlvbihzdHJ1Y3QgdmlydGlvX2RldmljZSAqdmRldikKIAly
ZXR1cm4gdnBfbW9kZXJuX2dlbmVyYXRpb24oJnZwX2Rldi0+bWRldik7CiB9CiAKLS8qIGNvbmZp
Zy0+e2dldCxzZXR9X3N0YXR1cygpIGltcGxlbWVudGF0aW9ucyAqLwotc3RhdGljIHU4IHZwX21v
ZGVybl9nZXRfc3RhdHVzKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYpCi17
Ci0Jc3RydWN0IHZpcnRpb19wY2lfY29tbW9uX2NmZyBfX2lvbWVtICpjZmcgPSBtZGV2LT5jb21t
b247Ci0KLQlyZXR1cm4gdnBfaW9yZWFkOCgmY2ZnLT5kZXZpY2Vfc3RhdHVzKTsKLX0KLQogc3Rh
dGljIHU4IHZwX2dldF9zdGF0dXMoc3RydWN0IHZpcnRpb19kZXZpY2UgKnZkZXYpCiB7CiAJc3Ry
dWN0IHZpcnRpb19wY2lfZGV2aWNlICp2cF9kZXYgPSB0b192cF9kZXZpY2UodmRldik7CkBAIC00
MDksMTQgKzE0OSw2IEBAIHN0YXRpYyB1OCB2cF9nZXRfc3RhdHVzKHN0cnVjdCB2aXJ0aW9fZGV2
aWNlICp2ZGV2KQogCXJldHVybiB2cF9tb2Rlcm5fZ2V0X3N0YXR1cygmdnBfZGV2LT5tZGV2KTsK
IH0KIAotc3RhdGljIHZvaWQgdnBfbW9kZXJuX3NldF9zdGF0dXMoc3RydWN0IHZpcnRpb19wY2lf
bW9kZXJuX2RldmljZSAqbWRldiwKLQkJCQkgdTggc3RhdHVzKQotewotCXN0cnVjdCB2aXJ0aW9f
cGNpX2NvbW1vbl9jZmcgX19pb21lbSAqY2ZnID0gbWRldi0+Y29tbW9uOwotCi0JdnBfaW93cml0
ZTgoc3RhdHVzLCAmY2ZnLT5kZXZpY2Vfc3RhdHVzKTsKLX0KLQogc3RhdGljIHZvaWQgdnBfc2V0
X3N0YXR1cyhzdHJ1Y3QgdmlydGlvX2RldmljZSAqdmRldiwgdTggc3RhdHVzKQogewogCXN0cnVj
dCB2aXJ0aW9fcGNpX2RldmljZSAqdnBfZGV2ID0gdG9fdnBfZGV2aWNlKHZkZXYpOwpAQCAtNDQx
LDE4ICsxNzMsNiBAQCBzdGF0aWMgdm9pZCB2cF9yZXNldChzdHJ1Y3QgdmlydGlvX2RldmljZSAq
dmRldikKIAl2cF9zeW5jaHJvbml6ZV92ZWN0b3JzKHZkZXYpOwogfQogCi1zdGF0aWMgdTE2IHZw
X21vZGVybl9jb25maWdfdmVjdG9yKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1k
ZXYsCi0JCQkJICAgdTE2IHZlY3RvcikKLXsKLQlzdHJ1Y3QgdmlydGlvX3BjaV9jb21tb25fY2Zn
IF9faW9tZW0gKmNmZyA9IG1kZXYtPmNvbW1vbjsKLQotCS8qIFNldHVwIHRoZSB2ZWN0b3IgdXNl
ZCBmb3IgY29uZmlndXJhdGlvbiBldmVudHMgKi8KLQl2cF9pb3dyaXRlMTYodmVjdG9yLCAmY2Zn
LT5tc2l4X2NvbmZpZyk7Ci0JLyogVmVyaWZ5IHdlIGhhZCBlbm91Z2ggcmVzb3VyY2VzIHRvIGFz
c2lnbiB0aGUgdmVjdG9yICovCi0JLyogV2lsbCBhbHNvIGZsdXNoIHRoZSB3cml0ZSBvdXQgdG8g
ZGV2aWNlICovCi0JcmV0dXJuIHZwX2lvcmVhZDE2KCZjZmctPm1zaXhfY29uZmlnKTsKLX0KLQog
c3RhdGljIHUxNiB2cF9jb25maWdfdmVjdG9yKHN0cnVjdCB2aXJ0aW9fcGNpX2RldmljZSAqdnBf
ZGV2LCB1MTYgdmVjdG9yKQogewogCXJldHVybiB2cF9tb2Rlcm5fY29uZmlnX3ZlY3RvcigmdnBf
ZGV2LT5tZGV2LCB2ZWN0b3IpOwpAQCAtNjg5LDQ2ICs0MDksNiBAQCBzdGF0aWMgY29uc3Qgc3Ry
dWN0IHZpcnRpb19jb25maWdfb3BzIHZpcnRpb19wY2lfY29uZmlnX29wcyA9IHsKIAkuZ2V0X3No
bV9yZWdpb24gID0gdnBfZ2V0X3NobV9yZWdpb24sCiB9OwogCi0vKioKLSAqIHZpcnRpb19wY2lf
ZmluZF9jYXBhYmlsaXR5IC0gd2FsayBjYXBhYmlsaXRpZXMgdG8gZmluZCBkZXZpY2UgaW5mby4K
LSAqIEBkZXY6IHRoZSBwY2kgZGV2aWNlCi0gKiBAY2ZnX3R5cGU6IHRoZSBWSVJUSU9fUENJX0NB
UF8qIHZhbHVlIHdlIHNlZWsKLSAqIEBpb3Jlc291cmNlX3R5cGVzOiBJT1JFU09VUkNFX01FTSBh
bmQvb3IgSU9SRVNPVVJDRV9JTy4KLSAqIEBiYXJzOiB0aGUgYml0bWFzayBvZiBCQVJzCi0gKgot
ICogUmV0dXJucyBvZmZzZXQgb2YgdGhlIGNhcGFiaWxpdHksIG9yIDAuCi0gKi8KLXN0YXRpYyBp
bmxpbmUgaW50IHZpcnRpb19wY2lfZmluZF9jYXBhYmlsaXR5KHN0cnVjdCBwY2lfZGV2ICpkZXYs
IHU4IGNmZ190eXBlLAotCQkJCQkgICAgIHUzMiBpb3Jlc291cmNlX3R5cGVzLCBpbnQgKmJhcnMp
Ci17Ci0JaW50IHBvczsKLQotCWZvciAocG9zID0gcGNpX2ZpbmRfY2FwYWJpbGl0eShkZXYsIFBD
SV9DQVBfSURfVk5EUik7Ci0JICAgICBwb3MgPiAwOwotCSAgICAgcG9zID0gcGNpX2ZpbmRfbmV4
dF9jYXBhYmlsaXR5KGRldiwgcG9zLCBQQ0lfQ0FQX0lEX1ZORFIpKSB7Ci0JCXU4IHR5cGUsIGJh
cjsKLQkJcGNpX3JlYWRfY29uZmlnX2J5dGUoZGV2LCBwb3MgKyBvZmZzZXRvZihzdHJ1Y3Qgdmly
dGlvX3BjaV9jYXAsCi0JCQkJCQkJIGNmZ190eXBlKSwKLQkJCQkgICAgICZ0eXBlKTsKLQkJcGNp
X3JlYWRfY29uZmlnX2J5dGUoZGV2LCBwb3MgKyBvZmZzZXRvZihzdHJ1Y3QgdmlydGlvX3BjaV9j
YXAsCi0JCQkJCQkJIGJhciksCi0JCQkJICAgICAmYmFyKTsKLQotCQkvKiBJZ25vcmUgc3RydWN0
dXJlcyB3aXRoIHJlc2VydmVkIEJBUiB2YWx1ZXMgKi8KLQkJaWYgKGJhciA+IDB4NSkKLQkJCWNv
bnRpbnVlOwotCi0JCWlmICh0eXBlID09IGNmZ190eXBlKSB7Ci0JCQlpZiAocGNpX3Jlc291cmNl
X2xlbihkZXYsIGJhcikgJiYKLQkJCSAgICBwY2lfcmVzb3VyY2VfZmxhZ3MoZGV2LCBiYXIpICYg
aW9yZXNvdXJjZV90eXBlcykgewotCQkJCSpiYXJzIHw9ICgxIDw8IGJhcik7Ci0JCQkJcmV0dXJu
IHBvczsKLQkJCX0KLQkJfQotCX0KLQlyZXR1cm4gMDsKLX0KLQogLyogVGhpcyBpcyBwYXJ0IG9m
IHRoZSBBQkkuICBEb24ndCBzY3JldyB3aXRoIGl0LiAqLwogc3RhdGljIGlubGluZSB2b2lkIGNo
ZWNrX29mZnNldHModm9pZCkKIHsKQEAgLTc5MiwxNDggKzQ3Miw2IEBAIHN0YXRpYyBpbmxpbmUg
dm9pZCBjaGVja19vZmZzZXRzKHZvaWQpCiAJCSAgICAgb2Zmc2V0b2Yoc3RydWN0IHZpcnRpb19w
Y2lfY29tbW9uX2NmZywgcXVldWVfdXNlZF9oaSkpOwogfQogCi1zdGF0aWMgaW50IHZwX21vZGVy
bl9wcm9iZShzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2KQotewotCXN0cnVj
dCBwY2lfZGV2ICpwY2lfZGV2ID0gbWRldi0+cGNpX2RldjsKLQlpbnQgZXJyLCBjb21tb24sIGlz
ciwgbm90aWZ5LCBkZXZpY2UsIGk7Ci0JdW5zaWduZWQgaW50IG51bV9xdWV1ZXM7Ci0JdTMyIG5v
dGlmeV9sZW5ndGg7Ci0JdTMyIG5vdGlmeV9vZmZzZXQ7Ci0JdTE2IG9mZjsKLQotCS8qIFdlIG9u
bHkgb3duIGRldmljZXMgPj0gMHgxMDAwIGFuZCA8PSAweDEwN2Y6IGxlYXZlIHRoZSByZXN0LiAq
LwotCWlmIChwY2lfZGV2LT5kZXZpY2UgPCAweDEwMDAgfHwgcGNpX2Rldi0+ZGV2aWNlID4gMHgx
MDdmKQotCQlyZXR1cm4gLUVOT0RFVjsKLQotCWlmIChwY2lfZGV2LT5kZXZpY2UgPCAweDEwNDAp
IHsKLQkJLyogVHJhbnNpdGlvbmFsIGRldmljZXM6IHVzZSB0aGUgUENJIHN1YnN5c3RlbSBkZXZp
Y2UgaWQgYXMKLQkJICogdmlydGlvIGRldmljZSBpZCwgc2FtZSBhcyBsZWdhY3kgZHJpdmVyIGFs
d2F5cyBkaWQuCi0JCSAqLwotCQltZGV2LT5pZC5kZXZpY2UgPSBwY2lfZGV2LT5zdWJzeXN0ZW1f
ZGV2aWNlOwotCX0gZWxzZSB7Ci0JCS8qIE1vZGVybiBkZXZpY2VzOiBzaW1wbHkgdXNlIFBDSSBk
ZXZpY2UgaWQsIGJ1dCBzdGFydCBmcm9tIDB4MTA0MC4gKi8KLQkJbWRldi0+aWQuZGV2aWNlID0g
cGNpX2Rldi0+ZGV2aWNlIC0gMHgxMDQwOwotCX0KLQltZGV2LT5pZC52ZW5kb3IgPSBwY2lfZGV2
LT5zdWJzeXN0ZW1fdmVuZG9yOwotCi0JZXJyID0gcGNpbV9lbmFibGVfZGV2aWNlKHBjaV9kZXYp
OwotCWlmIChlcnIpCi0JCXJldHVybiBlcnI7Ci0KLQkvKiBjaGVjayBmb3IgYSBjb21tb24gY29u
ZmlnOiBpZiBub3QsIHVzZSBsZWdhY3kgbW9kZSAoYmFyIDApLiAqLwotCWNvbW1vbiA9IHZpcnRp
b19wY2lfZmluZF9jYXBhYmlsaXR5KHBjaV9kZXYsIFZJUlRJT19QQ0lfQ0FQX0NPTU1PTl9DRkcs
Ci0JCQkJCSAgICBJT1JFU09VUkNFX0lPIHwgSU9SRVNPVVJDRV9NRU0sCi0JCQkJCSAgICAmbWRl
di0+bW9kZXJuX2JhcnMpOwotCWlmICghY29tbW9uKSB7Ci0JCWRldl9pbmZvKCZwY2lfZGV2LT5k
ZXYsCi0JCQkgInZpcnRpb19wY2k6IGxlYXZpbmcgZm9yIGxlZ2FjeSBkcml2ZXJcbiIpOwotCQly
ZXR1cm4gLUVOT0RFVjsKLQl9Ci0KLQkvKiBJZiBjb21tb24gaXMgdGhlcmUsIHRoZXNlIHNob3Vs
ZCBiZSB0b28uLi4gKi8KLQlpc3IgPSB2aXJ0aW9fcGNpX2ZpbmRfY2FwYWJpbGl0eShwY2lfZGV2
LCBWSVJUSU9fUENJX0NBUF9JU1JfQ0ZHLAotCQkJCQkgSU9SRVNPVVJDRV9JTyB8IElPUkVTT1VS
Q0VfTUVNLAotCQkJCQkgJm1kZXYtPm1vZGVybl9iYXJzKTsKLQlub3RpZnkgPSB2aXJ0aW9fcGNp
X2ZpbmRfY2FwYWJpbGl0eShwY2lfZGV2LCBWSVJUSU9fUENJX0NBUF9OT1RJRllfQ0ZHLAotCQkJ
CQkgICAgSU9SRVNPVVJDRV9JTyB8IElPUkVTT1VSQ0VfTUVNLAotCQkJCQkgICAgJm1kZXYtPm1v
ZGVybl9iYXJzKTsKLQlpZiAoIWlzciB8fCAhbm90aWZ5KSB7Ci0JCWRldl9lcnIoJnBjaV9kZXYt
PmRldiwKLQkJCSJ2aXJ0aW9fcGNpOiBtaXNzaW5nIGNhcGFiaWxpdGllcyAlaS8laS8laVxuIiwK
LQkJCWNvbW1vbiwgaXNyLCBub3RpZnkpOwotCQlyZXR1cm4gLUVJTlZBTDsKLQl9Ci0KLQllcnIg
PSBkbWFfc2V0X21hc2tfYW5kX2NvaGVyZW50KCZwY2lfZGV2LT5kZXYsIERNQV9CSVRfTUFTSyg2
NCkpOwotCWlmIChlcnIpCi0JCWVyciA9IGRtYV9zZXRfbWFza19hbmRfY29oZXJlbnQoJnBjaV9k
ZXYtPmRldiwKLQkJCQkJCURNQV9CSVRfTUFTSygzMikpOwotCWlmIChlcnIpCi0JCWRldl93YXJu
KCZwY2lfZGV2LT5kZXYsICJGYWlsZWQgdG8gZW5hYmxlIDY0LWJpdCBvciAzMi1iaXQgRE1BLiAg
VHJ5aW5nIHRvIGNvbnRpbnVlLCBidXQgdGhpcyBtaWdodCBub3Qgd29yay5cbiIpOwotCi0JLyog
RGV2aWNlIGNhcGFiaWxpdHkgaXMgb25seSBtYW5kYXRvcnkgZm9yIGRldmljZXMgdGhhdCBoYXZl
Ci0JICogZGV2aWNlLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24uCi0JICovCi0JZGV2aWNlID0gdmly
dGlvX3BjaV9maW5kX2NhcGFiaWxpdHkocGNpX2RldiwgVklSVElPX1BDSV9DQVBfREVWSUNFX0NG
RywKLQkJCQkJICAgIElPUkVTT1VSQ0VfSU8gfCBJT1JFU09VUkNFX01FTSwKLQkJCQkJICAgICZt
ZGV2LT5tb2Rlcm5fYmFycyk7Ci0KLQllcnIgPSBwY2ltX2lvbWFwX3JlZ2lvbnMocGNpX2Rldiwg
bWRldi0+bW9kZXJuX2JhcnMsCi0JCQkJICJ2aXJ0aW8tcGNpLW1vZGVybiIpOwotCWlmIChlcnIp
Ci0JCXJldHVybiBlcnI7Ci0KLQltZGV2LT5iYXNlID0gcGNpbV9pb21hcF90YWJsZShwY2lfZGV2
KTsKLQotCWVyciA9IC1FSU5WQUw7Ci0JbWRldi0+Y29tbW9uID0gbWFwX2NhcGFiaWxpdHkobWRl
diwgY29tbW9uLAotCQkJCSAgICAgIHNpemVvZihzdHJ1Y3QgdmlydGlvX3BjaV9jb21tb25fY2Zn
KSwgNCwKLQkJCQkgICAgICBzaXplb2Yoc3RydWN0IHZpcnRpb19wY2lfY29tbW9uX2NmZyksCi0J
CQkJICAgICAgTlVMTCk7Ci0JaWYgKCFtZGV2LT5jb21tb24pCi0JCWdvdG8gZXJyOwotCW1kZXYt
PmlzciA9IG1hcF9jYXBhYmlsaXR5KG1kZXYsIGlzciwgc2l6ZW9mKHU4KSwgMSwgMSwgTlVMTCk7
Ci0JaWYgKCFtZGV2LT5pc3IpCi0JCWdvdG8gZXJyOwotCi0JLyogUmVhZCBub3RpZnlfb2ZmX211
bHRpcGxpZXIgZnJvbSBjb25maWcgc3BhY2UuICovCi0JcGNpX3JlYWRfY29uZmlnX2R3b3JkKHBj
aV9kZXYsCi0JCQkgICAgICBub3RpZnkgKyBvZmZzZXRvZihzdHJ1Y3QgdmlydGlvX3BjaV9ub3Rp
ZnlfY2FwLAotCQkJCQkJbm90aWZ5X29mZl9tdWx0aXBsaWVyKSwKLQkJCSAgICAgICZtZGV2LT5u
b3RpZnlfb2Zmc2V0X211bHRpcGxpZXIpOwotCS8qIFJlYWQgbm90aWZ5IGxlbmd0aCBhbmQgb2Zm
c2V0IGZyb20gY29uZmlnIHNwYWNlLiAqLwotCXBjaV9yZWFkX2NvbmZpZ19kd29yZChwY2lfZGV2
LAotCQkJICAgICAgbm90aWZ5ICsgb2Zmc2V0b2Yoc3RydWN0IHZpcnRpb19wY2lfbm90aWZ5X2Nh
cCwKLQkJCQkJCWNhcC5sZW5ndGgpLAotCQkJICAgICAgJm5vdGlmeV9sZW5ndGgpOwotCi0JcGNp
X3JlYWRfY29uZmlnX2R3b3JkKHBjaV9kZXYsCi0JCQkgICAgICBub3RpZnkgKyBvZmZzZXRvZihz
dHJ1Y3QgdmlydGlvX3BjaV9ub3RpZnlfY2FwLAotCQkJCQkJY2FwLm9mZnNldCksCi0JCQkgICAg
ICAmbm90aWZ5X29mZnNldCk7Ci0KLQltZGV2LT5ub3RpZnlfYmFzZSA9IG1hcF9jYXBhYmlsaXR5
KG1kZXYsIG5vdGlmeSwgMiwgMiwKLQkJCQkJICAgbm90aWZ5X2xlbmd0aCwKLQkJCQkJICAgJm1k
ZXYtPm5vdGlmeV9sZW4pOwotCWlmICghbWRldi0+bm90aWZ5X2Jhc2UpCi0JCWdvdG8gZXJyOwot
Ci0JbnVtX3F1ZXVlcyA9IHZwX2lvcmVhZDE2KCZtZGV2LT5jb21tb24tPm51bV9xdWV1ZXMpOwot
Ci0JLyogb2Zmc2V0IHNob3VsZCBub3Qgd3JhcCAqLwotCWZvciAoaSA9IDA7IGkgPCBudW1fcXVl
dWVzOyBpKyspIHsKLQkJdnBfaW93cml0ZTE2KGksICZtZGV2LT5jb21tb24tPnF1ZXVlX3NlbGVj
dCk7Ci0JCW9mZiA9IHZwX2lvcmVhZDE2KCZtZGV2LT5jb21tb24tPnF1ZXVlX25vdGlmeV9vZmYp
OwotCi0JCWlmICgodTY0KW9mZiAqIG1kZXYtPm5vdGlmeV9vZmZzZXRfbXVsdGlwbGllciArIDIK
LQkJCT4gbWRldi0+bm90aWZ5X2xlbikgewotCQkJZGV2X3dhcm4oJnBjaV9kZXYtPmRldiwKLQkJ
CSAiYmFkIG5vdGlmaWNhdGlvbiBvZmZzZXQgJXUgKHggJXUpICIKLQkJCSAiZm9yIHF1ZXVlICV1
ID4gJXpkIiwKLQkJCSBvZmYsIG1kZXYtPm5vdGlmeV9vZmZzZXRfbXVsdGlwbGllciwKLQkJCSBp
LCBtZGV2LT5ub3RpZnlfbGVuKTsKLQkJCWVyciA9IC1FSU5WQUw7Ci0JCQlnb3RvIGVycjsKLQkJ
fQotCX0KLQotCS8qIFdlIGRvbid0IGtub3cgaG93IG11Y2ggd2Ugc2hvdWxkIG1hcCwgYnV0IFBB
R0VfU0laRQotCSAqIGlzIG1vcmUgdGhhbiBlbm91Z2ggZm9yIGFsbCBleGlzdGluZyBkZXZpY2Vz
LgotCSAqLwotCWlmIChkZXZpY2UpIHsKLQkJbWRldi0+ZGV2aWNlID0gbWFwX2NhcGFiaWxpdHko
bWRldiwgZGV2aWNlLCAwLCA0LAotCQkJCQkgICAgICBQQUdFX1NJWkUsCi0JCQkJCSAgICAgICZt
ZGV2LT5kZXZpY2VfbGVuKTsKLQkJaWYgKCFtZGV2LT5kZXZpY2UpCi0JCQlnb3RvIGVycjsKLQl9
Ci0KLQlyZXR1cm4gMDsKLQotZXJyOgotCXJldHVybiBlcnI7Ci19Ci0KIC8qIHRoZSBQQ0kgcHJv
YmluZyBmdW5jdGlvbiAqLwogaW50IHZpcnRpb19wY2lfbW9kZXJuX3Byb2JlKHN0cnVjdCB2aXJ0
aW9fcGNpX2RldmljZSAqdnBfZGV2KQogewpkaWZmIC0tZ2l0IGEvZHJpdmVycy92aXJ0aW8vdmly
dGlvX3BjaV9tb2Rlcm5fZGV2LmMgYi9kcml2ZXJzL3ZpcnRpby92aXJ0aW9fcGNpX21vZGVybl9k
ZXYuYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLjkwMjE1ZjI1ZDkz
NgotLS0gL2Rldi9udWxsCisrKyBiL2RyaXZlcnMvdmlydGlvL3ZpcnRpb19wY2lfbW9kZXJuX2Rl
di5jCkBAIC0wLDAgKzEsNDYyIEBACisvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIu
MC1vci1sYXRlcgorCisjaW5jbHVkZSA8bGludXgvdmlydGlvX3BjaV9tb2Rlcm4uaD4KKyNpbmNs
dWRlIDxsaW51eC9tb2R1bGUuaD4KKyNpbmNsdWRlIDxsaW51eC9wY2kuaD4KKworc3RhdGljIHZv
aWQgX19pb21lbSAqbWFwX2NhcGFiaWxpdHkoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2Rldmlj
ZSAqbWRldiwKKwkJCQkgICAgaW50IG9mZiwgc2l6ZV90IG1pbmxlbiwgdTMyIGFsaWduLAorCQkJ
CSAgICB1MzIgc2l6ZSwgc2l6ZV90ICpsZW4pCit7CisJc3RydWN0IHBjaV9kZXYgKmRldiA9IG1k
ZXYtPnBjaV9kZXY7CisJdTggYmFyOworCXUzMiBvZmZzZXQsIGxlbmd0aDsKKworCXBjaV9yZWFk
X2NvbmZpZ19ieXRlKGRldiwgb2ZmICsgb2Zmc2V0b2Yoc3RydWN0IHZpcnRpb19wY2lfY2FwLAor
CQkJCQkJIGJhciksCisJCQkgICAgICZiYXIpOworCXBjaV9yZWFkX2NvbmZpZ19kd29yZChkZXYs
IG9mZiArIG9mZnNldG9mKHN0cnVjdCB2aXJ0aW9fcGNpX2NhcCwgb2Zmc2V0KSwKKwkJCSAgICAg
Jm9mZnNldCk7CisJcGNpX3JlYWRfY29uZmlnX2R3b3JkKGRldiwgb2ZmICsgb2Zmc2V0b2Yoc3Ry
dWN0IHZpcnRpb19wY2lfY2FwLCBsZW5ndGgpLAorCQkJICAgICAgJmxlbmd0aCk7CisKKwlpZiAo
bGVuZ3RoIDwgbWlubGVuKSB7CisJCWRldl9lcnIoJmRldi0+ZGV2LAorCQkJInZpcnRpb19wY2k6
IGJhZCBjYXBhYmlsaXR5IGxlbiAldSAoPj0lenUgZXhwZWN0ZWQpXG4iLAorCQkJbGVuZ3RoLCBt
aW5sZW4pOworCQlyZXR1cm4gTlVMTDsKKwl9CisKKwlpZiAob2Zmc2V0ICYgKGFsaWduIC0gMSkp
IHsKKwkJZGV2X2VycigmZGV2LT5kZXYsCisJCQkidmlydGlvX3BjaTogb2Zmc2V0ICV1IG5vdCBh
bGlnbmVkIHRvICV1XG4iLAorCQkJb2Zmc2V0LCBhbGlnbik7CisJCXJldHVybiBOVUxMOworCX0K
KworCWlmIChsZW5ndGggPiBzaXplKQorCQlsZW5ndGggPSBzaXplOworCisJaWYgKGxlbikKKwkJ
KmxlbiA9IGxlbmd0aDsKKworCWlmIChtaW5sZW4gKyBvZmZzZXQgPCBtaW5sZW4gfHwKKwkgICAg
bWlubGVuICsgb2Zmc2V0ID4gcGNpX3Jlc291cmNlX2xlbihkZXYsIGJhcikpIHsKKwkJZGV2X2Vy
cigmZGV2LT5kZXYsCisJCQkidmlydGlvX3BjaTogbWFwIHZpcnRpbyAlenVAJXUgIgorCQkJIm91
dCBvZiByYW5nZSBvbiBiYXIgJWkgbGVuZ3RoICVsdVxuIiwKKwkJCW1pbmxlbiwgb2Zmc2V0LAor
CQkJYmFyLCAodW5zaWduZWQgbG9uZylwY2lfcmVzb3VyY2VfbGVuKGRldiwgYmFyKSk7CisJCXJl
dHVybiBOVUxMOworCX0KKworCXJldHVybiBtZGV2LT5iYXNlW2Jhcl0gKyBvZmZzZXQ7Cit9CisK
Ky8qKgorICogdmlydGlvX3BjaV9maW5kX2NhcGFiaWxpdHkgLSB3YWxrIGNhcGFiaWxpdGllcyB0
byBmaW5kIGRldmljZSBpbmZvLgorICogQGRldjogdGhlIHBjaSBkZXZpY2UKKyAqIEBjZmdfdHlw
ZTogdGhlIFZJUlRJT19QQ0lfQ0FQXyogdmFsdWUgd2Ugc2VlaworICogQGlvcmVzb3VyY2VfdHlw
ZXM6IElPUkVTT1VSQ0VfTUVNIGFuZC9vciBJT1JFU09VUkNFX0lPLgorICogQGJhcnM6IHRoZSBi
aXRtYXNrIG9mIEJBUnMKKyAqCisgKiBSZXR1cm5zIG9mZnNldCBvZiB0aGUgY2FwYWJpbGl0eSwg
b3IgMC4KKyAqLworc3RhdGljIGlubGluZSBpbnQgdmlydGlvX3BjaV9maW5kX2NhcGFiaWxpdHko
c3RydWN0IHBjaV9kZXYgKmRldiwgdTggY2ZnX3R5cGUsCisJCQkJCSAgICAgdTMyIGlvcmVzb3Vy
Y2VfdHlwZXMsIGludCAqYmFycykKK3sKKwlpbnQgcG9zOworCisJZm9yIChwb3MgPSBwY2lfZmlu
ZF9jYXBhYmlsaXR5KGRldiwgUENJX0NBUF9JRF9WTkRSKTsKKwkgICAgIHBvcyA+IDA7CisJICAg
ICBwb3MgPSBwY2lfZmluZF9uZXh0X2NhcGFiaWxpdHkoZGV2LCBwb3MsIFBDSV9DQVBfSURfVk5E
UikpIHsKKwkJdTggdHlwZSwgYmFyOworCQlwY2lfcmVhZF9jb25maWdfYnl0ZShkZXYsIHBvcyAr
IG9mZnNldG9mKHN0cnVjdCB2aXJ0aW9fcGNpX2NhcCwKKwkJCQkJCQkgY2ZnX3R5cGUpLAorCQkJ
CSAgICAgJnR5cGUpOworCQlwY2lfcmVhZF9jb25maWdfYnl0ZShkZXYsIHBvcyArIG9mZnNldG9m
KHN0cnVjdCB2aXJ0aW9fcGNpX2NhcCwKKwkJCQkJCQkgYmFyKSwKKwkJCQkgICAgICZiYXIpOwor
CisJCS8qIElnbm9yZSBzdHJ1Y3R1cmVzIHdpdGggcmVzZXJ2ZWQgQkFSIHZhbHVlcyAqLworCQlp
ZiAoYmFyID4gMHg1KQorCQkJY29udGludWU7CisKKwkJaWYgKHR5cGUgPT0gY2ZnX3R5cGUpIHsK
KwkJCWlmIChwY2lfcmVzb3VyY2VfbGVuKGRldiwgYmFyKSAmJgorCQkJICAgIHBjaV9yZXNvdXJj
ZV9mbGFncyhkZXYsIGJhcikgJiBpb3Jlc291cmNlX3R5cGVzKSB7CisJCQkJKmJhcnMgfD0gKDEg
PDwgYmFyKTsKKwkJCQlyZXR1cm4gcG9zOworCQkJfQorCQl9CisJfQorCXJldHVybiAwOworfQor
CisvKgorICogdnBfbW9kZXJuX2dldF9mZWF0dXJlcyAtIGdldCBmZWF0dXJlcyBmcm9tIGRldmlj
ZQorICogQG1kZXY6IHRoZSBtb2Rlcm4gdmlydGlvLXBjaSBkZXZpY2UKKyAqCisgKiBSZXR1cm5z
IHRoZSBmZWF0dXJlcyByZWFkIGZyb20gdGhlIGRldmljZQorICovCit1NjQgdnBfbW9kZXJuX2dl
dF9mZWF0dXJlcyhzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2KQoreworCXN0
cnVjdCB2aXJ0aW9fcGNpX2NvbW1vbl9jZmcgX19pb21lbSAqY2ZnID0gbWRldi0+Y29tbW9uOwor
CisJdTY0IGZlYXR1cmVzOworCisJdnBfaW93cml0ZTMyKDAsICZjZmctPmRldmljZV9mZWF0dXJl
X3NlbGVjdCk7CisJZmVhdHVyZXMgPSB2cF9pb3JlYWQzMigmY2ZnLT5kZXZpY2VfZmVhdHVyZSk7
CisJdnBfaW93cml0ZTMyKDEsICZjZmctPmRldmljZV9mZWF0dXJlX3NlbGVjdCk7CisJZmVhdHVy
ZXMgfD0gKCh1NjQpdnBfaW9yZWFkMzIoJmNmZy0+ZGV2aWNlX2ZlYXR1cmUpIDw8IDMyKTsKKwor
CXJldHVybiBmZWF0dXJlczsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKHZwX21vZGVybl9nZXRfZmVh
dHVyZXMpOworCisvKgorICogdnBfbW9kZXJuX3NldF9mZWF0dXJlcyAtIHNldCBmZWF0dXJlcyB0
byBkZXZpY2UKKyAqIEBtZGV2OiB0aGUgbW9kZXJuIHZpcnRpby1wY2kgZGV2aWNlCisgKiBAZmVh
dHVyZXM6IHRoZSBmZWF0dXJlcyBzZXQgdG8gZGV2aWNlCisgKi8KK3ZvaWQgdnBfbW9kZXJuX3Nl
dF9mZWF0dXJlcyhzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAorCQkJICAg
IHU2NCBmZWF0dXJlcykKK3sKKwlzdHJ1Y3QgdmlydGlvX3BjaV9jb21tb25fY2ZnIF9faW9tZW0g
KmNmZyA9IG1kZXYtPmNvbW1vbjsKKworCXZwX2lvd3JpdGUzMigwLCAmY2ZnLT5ndWVzdF9mZWF0
dXJlX3NlbGVjdCk7CisJdnBfaW93cml0ZTMyKCh1MzIpZmVhdHVyZXMsICZjZmctPmd1ZXN0X2Zl
YXR1cmUpOworCXZwX2lvd3JpdGUzMigxLCAmY2ZnLT5ndWVzdF9mZWF0dXJlX3NlbGVjdCk7CisJ
dnBfaW93cml0ZTMyKGZlYXR1cmVzID4+IDMyLCAmY2ZnLT5ndWVzdF9mZWF0dXJlKTsKK30KK0VY
UE9SVF9TWU1CT0xfR1BMKHZwX21vZGVybl9zZXRfZmVhdHVyZXMpOworCisvKgorICogdnBfbW9k
ZXJuX2dldF9nZW5lcmF0aW9uIC0gZ2V0IHRoZSBkZXZpY2UgZ2VucmVhdGlvbgorICogQG1kZXY6
IHRoZSBtb2Rlcm4gdmlydGlvLXBjaSBkZXZpY2UKKyAqCisgKiBSZXR1cm5zIHRoZSBnZW5yZWF0
aW9uIHJlYWQgZnJvbSBkZXZpY2UKKyAqLwordTMyIHZwX21vZGVybl9nZW5lcmF0aW9uKHN0cnVj
dCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYpCit7CisJc3RydWN0IHZpcnRpb19wY2lf
Y29tbW9uX2NmZyBfX2lvbWVtICpjZmcgPSBtZGV2LT5jb21tb247CisKKwlyZXR1cm4gdnBfaW9y
ZWFkOCgmY2ZnLT5jb25maWdfZ2VuZXJhdGlvbik7Cit9CitFWFBPUlRfU1lNQk9MX0dQTCh2cF9t
b2Rlcm5fZ2VuZXJhdGlvbik7CisKKy8qCisgKiB2cF9tb2Rlcm5fZ2V0X3N0YXR1cyAtIGdldCB0
aGUgZGV2aWNlIHN0YXR1cworICogQG1kZXY6IHRoZSBtb2Rlcm4gdmlydGlvLXBjaSBkZXZpY2UK
KyAqCisgKiBSZXR1cm5zIHRoZSBzdGF0dXMgcmVhZCBmcm9tIGRldmljZQorICovCit1OCB2cF9t
b2Rlcm5fZ2V0X3N0YXR1cyhzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2KQor
eworCXN0cnVjdCB2aXJ0aW9fcGNpX2NvbW1vbl9jZmcgX19pb21lbSAqY2ZnID0gbWRldi0+Y29t
bW9uOworCisJcmV0dXJuIHZwX2lvcmVhZDgoJmNmZy0+ZGV2aWNlX3N0YXR1cyk7Cit9CitFWFBP
UlRfU1lNQk9MX0dQTCh2cF9tb2Rlcm5fZ2V0X3N0YXR1cyk7CisKKy8qCisgKiB2cF9tb2Rlcm5f
c2V0X3N0YXR1cyAtIHNldCBzdGF0dXMgdG8gZGV2aWNlCisgKiBAbWRldjogdGhlIG1vZGVybiB2
aXJ0aW8tcGNpIGRldmljZQorICogQHN0YXR1czogdGhlIHN0YXR1cyBzZXQgdG8gZGV2aWNlCisg
Ki8KK3ZvaWQgdnBfbW9kZXJuX3NldF9zdGF0dXMoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2Rl
dmljZSAqbWRldiwKKwkJCSAgdTggc3RhdHVzKQoreworCXN0cnVjdCB2aXJ0aW9fcGNpX2NvbW1v
bl9jZmcgX19pb21lbSAqY2ZnID0gbWRldi0+Y29tbW9uOworCisJdnBfaW93cml0ZTgoc3RhdHVz
LCAmY2ZnLT5kZXZpY2Vfc3RhdHVzKTsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKHZwX21vZGVybl9z
ZXRfc3RhdHVzKTsKKworLyoKKyAqIHZwX21vZGVybl9xdWV1ZV92ZWN0b3IgLSBzZXQgdGhlIE1T
SVggdmVjdG9yIGZvciBhIHNwZWNpZmljIHZpcnRxdWV1ZQorICogQG1kZXY6IHRoZSBtb2Rlcm4g
dmlydGlvLXBjaSBkZXZpY2UKKyAqIEBpbmRleDogcXVldWUgaW5kZXgKKyAqIEB2ZWN0b3I6IHRo
ZSBjb25maWcgdmVjdG9yCisgKgorICogUmV0dXJucyB0aGUgY29uZmlnIHZlY3RvciByZWFkIGZy
b20gdGhlIGRldmljZQorICovCit1MTYgdnBfbW9kZXJuX3F1ZXVlX3ZlY3RvcihzdHJ1Y3Qgdmly
dGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAorCQkJICAgdTE2IGluZGV4LCB1MTYgdmVjdG9y
KQoreworCXN0cnVjdCB2aXJ0aW9fcGNpX2NvbW1vbl9jZmcgX19pb21lbSAqY2ZnID0gbWRldi0+
Y29tbW9uOworCisJdnBfaW93cml0ZTE2KGluZGV4LCAmY2ZnLT5xdWV1ZV9zZWxlY3QpOworCXZw
X2lvd3JpdGUxNih2ZWN0b3IsICZjZmctPnF1ZXVlX21zaXhfdmVjdG9yKTsKKwkvKiBGbHVzaCB0
aGUgd3JpdGUgb3V0IHRvIGRldmljZSAqLworCXJldHVybiB2cF9pb3JlYWQxNigmY2ZnLT5xdWV1
ZV9tc2l4X3ZlY3Rvcik7Cit9CitFWFBPUlRfU1lNQk9MX0dQTCh2cF9tb2Rlcm5fcXVldWVfdmVj
dG9yKTsKKworLyoKKyAqIHZwX21vZGVybl9jb25maWdfdmVjdG9yIC0gc2V0IHRoZSB2ZWN0b3Ig
Zm9yIGNvbmZpZyBpbnRlcnJ1cHQKKyAqIEBtZGV2OiB0aGUgbW9kZXJuIHZpcnRpby1wY2kgZGV2
aWNlCisgKiBAdmVjdG9yOiB0aGUgY29uZmlnIHZlY3RvcgorICoKKyAqIFJldHVybnMgdGhlIGNv
bmZpZyB2ZWN0b3IgcmVhZCBmcm9tIHRoZSBkZXZpY2UKKyAqLwordTE2IHZwX21vZGVybl9jb25m
aWdfdmVjdG9yKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYsCisJCQkgICAg
dTE2IHZlY3RvcikKK3sKKwlzdHJ1Y3QgdmlydGlvX3BjaV9jb21tb25fY2ZnIF9faW9tZW0gKmNm
ZyA9IG1kZXYtPmNvbW1vbjsKKworCS8qIFNldHVwIHRoZSB2ZWN0b3IgdXNlZCBmb3IgY29uZmln
dXJhdGlvbiBldmVudHMgKi8KKwl2cF9pb3dyaXRlMTYodmVjdG9yLCAmY2ZnLT5tc2l4X2NvbmZp
Zyk7CisJLyogVmVyaWZ5IHdlIGhhZCBlbm91Z2ggcmVzb3VyY2VzIHRvIGFzc2lnbiB0aGUgdmVj
dG9yICovCisJLyogV2lsbCBhbHNvIGZsdXNoIHRoZSB3cml0ZSBvdXQgdG8gZGV2aWNlICovCisJ
cmV0dXJuIHZwX2lvcmVhZDE2KCZjZmctPm1zaXhfY29uZmlnKTsKK30KK0VYUE9SVF9TWU1CT0xf
R1BMKHZwX21vZGVybl9jb25maWdfdmVjdG9yKTsKKworLyoKKyAqIHZwX21vZGVybl9xdWV1ZV9h
ZGRyZXNzIC0gc2V0IHRoZSB2aXJ0cXVldWUgYWRkcmVzcworICogQG1kZXY6IHRoZSBtb2Rlcm4g
dmlydGlvLXBjaSBkZXZpY2UKKyAqIEBpbmRleDogdGhlIHF1ZXVlIGluZGV4CisgKiBAZGVzY19h
ZGRyOiBhZGRyZXNzIG9mIHRoZSBkZXNjcmlwdG9yIGFyZWEKKyAqIEBkcml2ZXJfYWRkcjogYWRk
cmVzcyBvZiB0aGUgZHJpdmVyIGFyZWEKKyAqIEBkZXZpY2VfYWRkcjogYWRkcmVzcyBvZiB0aGUg
ZGV2aWNlIGFyZWEKKyAqLwordm9pZCB2cF9tb2Rlcm5fcXVldWVfYWRkcmVzcyhzdHJ1Y3Qgdmly
dGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAorCQkJICAgICB1MTYgaW5kZXgsIHU2NCBkZXNj
X2FkZHIsIHU2NCBkcml2ZXJfYWRkciwKKwkJCSAgICAgdTY0IGRldmljZV9hZGRyKQoreworCXN0
cnVjdCB2aXJ0aW9fcGNpX2NvbW1vbl9jZmcgX19pb21lbSAqY2ZnID0gbWRldi0+Y29tbW9uOwor
CisJdnBfaW93cml0ZTE2KGluZGV4LCAmY2ZnLT5xdWV1ZV9zZWxlY3QpOworCisJdnBfaW93cml0
ZTY0X3R3b3BhcnQoZGVzY19hZGRyLCAmY2ZnLT5xdWV1ZV9kZXNjX2xvLAorCQkJICAgICAmY2Zn
LT5xdWV1ZV9kZXNjX2hpKTsKKwl2cF9pb3dyaXRlNjRfdHdvcGFydChkcml2ZXJfYWRkciwgJmNm
Zy0+cXVldWVfYXZhaWxfbG8sCisJCQkgICAgICZjZmctPnF1ZXVlX2F2YWlsX2hpKTsKKwl2cF9p
b3dyaXRlNjRfdHdvcGFydChkZXZpY2VfYWRkciwgJmNmZy0+cXVldWVfdXNlZF9sbywKKwkJCSAg
ICAgJmNmZy0+cXVldWVfdXNlZF9oaSk7Cit9CitFWFBPUlRfU1lNQk9MX0dQTCh2cF9tb2Rlcm5f
cXVldWVfYWRkcmVzcyk7CisKKy8qCisgKiB2cF9tb2Rlcm5fc2V0X3F1ZXVlX2VuYWJsZSAtIGVu
YWJsZSBhIHZpcnRxdWV1ZQorICogQG1kZXY6IHRoZSBtb2Rlcm4gdmlydGlvLXBjaSBkZXZpY2UK
KyAqIEBpbmRleDogdGhlIHF1ZXVlIGluZGV4CisgKiBAZW5hYmxlOiB3aGV0aGVyIHRoZSB2aXJ0
cXVldWUgaXMgZW5hYmxlIG9yIG5vdAorICovCit2b2lkIHZwX21vZGVybl9zZXRfcXVldWVfZW5h
YmxlKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYsCisJCQkJdTE2IGluZGV4
LCBib29sIGVuYWJsZSkKK3sKKwl2cF9pb3dyaXRlMTYoaW5kZXgsICZtZGV2LT5jb21tb24tPnF1
ZXVlX3NlbGVjdCk7CisJdnBfaW93cml0ZTE2KGVuYWJsZSwgJm1kZXYtPmNvbW1vbi0+cXVldWVf
ZW5hYmxlKTsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKHZwX21vZGVybl9zZXRfcXVldWVfZW5hYmxl
KTsKKworLyoKKyAqIHZwX21vZGVybl9nZXRfcXVldWVfZW5hYmxlIC0gZW5hYmxlIGEgdmlydHF1
ZXVlCisgKiBAbWRldjogdGhlIG1vZGVybiB2aXJ0aW8tcGNpIGRldmljZQorICogQGluZGV4OiB0
aGUgcXVldWUgaW5kZXgKKyAqCisgKiBSZXR1cm5zIHdoZXRoZXIgYSB2aXJ0cXVldWUgaXMgZW5h
YmxlZCBvciBub3QKKyAqLworYm9vbCB2cF9tb2Rlcm5fZ2V0X3F1ZXVlX2VuYWJsZShzdHJ1Y3Qg
dmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAorCQkJCXUxNiBpbmRleCkKK3sKKwl2cF9p
b3dyaXRlMTYoaW5kZXgsICZtZGV2LT5jb21tb24tPnF1ZXVlX3NlbGVjdCk7CisKKwlyZXR1cm4g
dnBfaW9yZWFkMTYoJm1kZXYtPmNvbW1vbi0+cXVldWVfZW5hYmxlKTsKK30KK0VYUE9SVF9TWU1C
T0xfR1BMKHZwX21vZGVybl9nZXRfcXVldWVfZW5hYmxlKTsKKworLyoKKyAqIHZwX21vZGVybl9z
ZXRfcXVldWVfc2l6ZSAtIHNldCBzaXplIGZvciBhIHZpcnRxdWV1ZQorICogQG1kZXY6IHRoZSBt
b2Rlcm4gdmlydGlvLXBjaSBkZXZpY2UKKyAqIEBpbmRleDogdGhlIHF1ZXVlIGluZGV4CisgKiBA
c2l6ZTogdGhlIHNpemUgb2YgdGhlIHZpcnRxdWV1ZQorICovCit2b2lkIHZwX21vZGVybl9zZXRf
cXVldWVfc2l6ZShzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAorCQkJICAg
ICAgdTE2IGluZGV4LCB1MTYgc2l6ZSkKK3sKKwl2cF9pb3dyaXRlMTYoaW5kZXgsICZtZGV2LT5j
b21tb24tPnF1ZXVlX3NlbGVjdCk7CisJdnBfaW93cml0ZTE2KHNpemUsICZtZGV2LT5jb21tb24t
PnF1ZXVlX3NpemUpOworCit9CitFWFBPUlRfU1lNQk9MX0dQTCh2cF9tb2Rlcm5fc2V0X3F1ZXVl
X3NpemUpOworCisvKgorICogdnBfbW9kZXJuX2dldF9xdWV1ZV9zaXplIC0gZ2V0IHNpemUgZm9y
IGEgdmlydHF1ZXVlCisgKiBAbWRldjogdGhlIG1vZGVybiB2aXJ0aW8tcGNpIGRldmljZQorICog
QGluZGV4OiB0aGUgcXVldWUgaW5kZXgKKyAqCisgKiBSZXR1cm5zIHRoZSBzaXplIG9mIHRoZSB2
aXJ0cXVldWUKKyAqLwordTE2IHZwX21vZGVybl9nZXRfcXVldWVfc2l6ZShzdHJ1Y3QgdmlydGlv
X3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAorCQkJICAgICB1MTYgaW5kZXgpCit7CisJdnBfaW93
cml0ZTE2KGluZGV4LCAmbWRldi0+Y29tbW9uLT5xdWV1ZV9zZWxlY3QpOworCisJcmV0dXJuIHZw
X2lvcmVhZDE2KCZtZGV2LT5jb21tb24tPnF1ZXVlX3NpemUpOworCit9CitFWFBPUlRfU1lNQk9M
X0dQTCh2cF9tb2Rlcm5fZ2V0X3F1ZXVlX3NpemUpOworCisvKgorICogdnBfbW9kZXJuX2dldF9u
dW1fcXVldWVzIC0gZ2V0IHRoZSBudW1iZXIgb2YgdmlydHF1ZXVlcworICogQG1kZXY6IHRoZSBt
b2Rlcm4gdmlydGlvLXBjaSBkZXZpY2UKKyAqCisgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygdmly
dHF1ZXVlcworICovCit1MTYgdnBfbW9kZXJuX2dldF9udW1fcXVldWVzKHN0cnVjdCB2aXJ0aW9f
cGNpX21vZGVybl9kZXZpY2UgKm1kZXYpCit7CisJcmV0dXJuIHZwX2lvcmVhZDE2KCZtZGV2LT5j
b21tb24tPm51bV9xdWV1ZXMpOworfQorRVhQT1JUX1NZTUJPTF9HUEwodnBfbW9kZXJuX2dldF9u
dW1fcXVldWVzKTsKKworLyoKKyAqIHZwX21vZGVybl9nZXRfcXVldWVfbm90aWZ5X29mZiAtIGdl
dCBub3RpZmljYXRpb24gb2Zmc2V0IGZvciBhIHZpcnRxdWV1ZQorICogQG1kZXY6IHRoZSBtb2Rl
cm4gdmlydGlvLXBjaSBkZXZpY2UKKyAqIEBpbmRleDogdGhlIHF1ZXVlIGluZGV4CisgKgorICog
UmV0dXJucyB0aGUgbm90aWZpY2F0aW9uIG9mZnNldCBmb3IgYSB2aXJ0cXVldWUKKyAqLwordTE2
IHZwX21vZGVybl9nZXRfcXVldWVfbm90aWZ5X29mZihzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5f
ZGV2aWNlICptZGV2LAorCQkJCSAgIHUxNiBpbmRleCkKK3sKKwl2cF9pb3dyaXRlMTYoaW5kZXgs
ICZtZGV2LT5jb21tb24tPnF1ZXVlX3NlbGVjdCk7CisKKwlyZXR1cm4gdnBfaW9yZWFkMTYoJm1k
ZXYtPmNvbW1vbi0+cXVldWVfbm90aWZ5X29mZik7Cit9CitFWFBPUlRfU1lNQk9MX0dQTCh2cF9t
b2Rlcm5fZ2V0X3F1ZXVlX25vdGlmeV9vZmYpOworCisvKgorICogdnBfbW9kZXJuX3Byb2JlOiBw
cm9iZSB0aGUgbW9kZXJuIHZpcnRpbyBwY2kgZGV2aWNlCisgKiBAbWRldjogdGhlIG1vZGVybiB2
aXJ0aW8tcGNpIGRldmljZQorICoKKyAqIFJldHVybiAwIG9uIHN1Y2NlZWQgb3RoZXJ3aXNlIGZh
aWwKKyAqLworaW50IHZwX21vZGVybl9wcm9iZShzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2
aWNlICptZGV2KQoreworCXN0cnVjdCBwY2lfZGV2ICpwY2lfZGV2ID0gbWRldi0+cGNpX2RldjsK
KwlpbnQgZXJyLCBjb21tb24sIGlzciwgbm90aWZ5LCBkZXZpY2U7CisJdTMyIG5vdGlmeV9sZW5n
dGg7CisJdTMyIG5vdGlmeV9vZmZzZXQ7CisKKwkvKiBXZSBvbmx5IG93biBkZXZpY2VzID49IDB4
MTAwMCBhbmQgPD0gMHgxMDdmOiBsZWF2ZSB0aGUgcmVzdC4gKi8KKwlpZiAocGNpX2Rldi0+ZGV2
aWNlIDwgMHgxMDAwIHx8IHBjaV9kZXYtPmRldmljZSA+IDB4MTA3ZikKKwkJcmV0dXJuIC1FTk9E
RVY7CisKKwlpZiAocGNpX2Rldi0+ZGV2aWNlIDwgMHgxMDQwKSB7CisJCS8qIFRyYW5zaXRpb25h
bCBkZXZpY2VzOiB1c2UgdGhlIFBDSSBzdWJzeXN0ZW0gZGV2aWNlIGlkIGFzCisJCSAqIHZpcnRp
byBkZXZpY2UgaWQsIHNhbWUgYXMgbGVnYWN5IGRyaXZlciBhbHdheXMgZGlkLgorCQkgKi8KKwkJ
bWRldi0+aWQuZGV2aWNlID0gcGNpX2Rldi0+c3Vic3lzdGVtX2RldmljZTsKKwl9IGVsc2Ugewor
CQkvKiBNb2Rlcm4gZGV2aWNlczogc2ltcGx5IHVzZSBQQ0kgZGV2aWNlIGlkLCBidXQgc3RhcnQg
ZnJvbSAweDEwNDAuICovCisJCW1kZXYtPmlkLmRldmljZSA9IHBjaV9kZXYtPmRldmljZSAtIDB4
MTA0MDsKKwl9CisJbWRldi0+aWQudmVuZG9yID0gcGNpX2Rldi0+c3Vic3lzdGVtX3ZlbmRvcjsK
KworCWVyciA9IHBjaW1fZW5hYmxlX2RldmljZShwY2lfZGV2KTsKKwlpZiAoZXJyKQorCQlyZXR1
cm4gZXJyOworCisJLyogY2hlY2sgZm9yIGEgY29tbW9uIGNvbmZpZzogaWYgbm90LCB1c2UgbGVn
YWN5IG1vZGUgKGJhciAwKS4gKi8KKwljb21tb24gPSB2aXJ0aW9fcGNpX2ZpbmRfY2FwYWJpbGl0
eShwY2lfZGV2LCBWSVJUSU9fUENJX0NBUF9DT01NT05fQ0ZHLAorCQkJCQkgICAgSU9SRVNPVVJD
RV9JTyB8IElPUkVTT1VSQ0VfTUVNLAorCQkJCQkgICAgJm1kZXYtPm1vZGVybl9iYXJzKTsKKwlp
ZiAoIWNvbW1vbikgeworCQlkZXZfaW5mbygmcGNpX2Rldi0+ZGV2LAorCQkJICJ2aXJ0aW9fcGNp
OiBsZWF2aW5nIGZvciBsZWdhY3kgZHJpdmVyXG4iKTsKKwkJcmV0dXJuIC1FTk9ERVY7CisJfQor
CisJLyogSWYgY29tbW9uIGlzIHRoZXJlLCB0aGVzZSBzaG91bGQgYmUgdG9vLi4uICovCisJaXNy
ID0gdmlydGlvX3BjaV9maW5kX2NhcGFiaWxpdHkocGNpX2RldiwgVklSVElPX1BDSV9DQVBfSVNS
X0NGRywKKwkJCQkJIElPUkVTT1VSQ0VfSU8gfCBJT1JFU09VUkNFX01FTSwKKwkJCQkJICZtZGV2
LT5tb2Rlcm5fYmFycyk7CisJbm90aWZ5ID0gdmlydGlvX3BjaV9maW5kX2NhcGFiaWxpdHkocGNp
X2RldiwgVklSVElPX1BDSV9DQVBfTk9USUZZX0NGRywKKwkJCQkJICAgIElPUkVTT1VSQ0VfSU8g
fCBJT1JFU09VUkNFX01FTSwKKwkJCQkJICAgICZtZGV2LT5tb2Rlcm5fYmFycyk7CisJaWYgKCFp
c3IgfHwgIW5vdGlmeSkgeworCQlkZXZfZXJyKCZwY2lfZGV2LT5kZXYsCisJCQkidmlydGlvX3Bj
aTogbWlzc2luZyBjYXBhYmlsaXRpZXMgJWkvJWkvJWlcbiIsCisJCQljb21tb24sIGlzciwgbm90
aWZ5KTsKKwkJcmV0dXJuIC1FSU5WQUw7CisJfQorCisJZXJyID0gZG1hX3NldF9tYXNrX2FuZF9j
b2hlcmVudCgmcGNpX2Rldi0+ZGV2LCBETUFfQklUX01BU0soNjQpKTsKKwlpZiAoZXJyKQorCQll
cnIgPSBkbWFfc2V0X21hc2tfYW5kX2NvaGVyZW50KCZwY2lfZGV2LT5kZXYsCisJCQkJCQlETUFf
QklUX01BU0soMzIpKTsKKwlpZiAoZXJyKQorCQlkZXZfd2FybigmcGNpX2Rldi0+ZGV2LCAiRmFp
bGVkIHRvIGVuYWJsZSA2NC1iaXQgb3IgMzItYml0IERNQS4gIFRyeWluZyB0byBjb250aW51ZSwg
YnV0IHRoaXMgbWlnaHQgbm90IHdvcmsuXG4iKTsKKworCS8qIERldmljZSBjYXBhYmlsaXR5IGlz
IG9ubHkgbWFuZGF0b3J5IGZvciBkZXZpY2VzIHRoYXQgaGF2ZQorCSAqIGRldmljZS1zcGVjaWZp
YyBjb25maWd1cmF0aW9uLgorCSAqLworCWRldmljZSA9IHZpcnRpb19wY2lfZmluZF9jYXBhYmls
aXR5KHBjaV9kZXYsIFZJUlRJT19QQ0lfQ0FQX0RFVklDRV9DRkcsCisJCQkJCSAgICBJT1JFU09V
UkNFX0lPIHwgSU9SRVNPVVJDRV9NRU0sCisJCQkJCSAgICAmbWRldi0+bW9kZXJuX2JhcnMpOwor
CisJZXJyID0gcGNpbV9pb21hcF9yZWdpb25zKHBjaV9kZXYsIG1kZXYtPm1vZGVybl9iYXJzLAor
CQkJCSAidmlydGlvLXBjaS1tb2Rlcm4iKTsKKwlpZiAoZXJyKQorCQlyZXR1cm4gZXJyOworCisJ
bWRldi0+YmFzZSA9IHBjaW1faW9tYXBfdGFibGUocGNpX2Rldik7CisKKwllcnIgPSAtRUlOVkFM
OworCW1kZXYtPmNvbW1vbiA9IG1hcF9jYXBhYmlsaXR5KG1kZXYsIGNvbW1vbiwKKwkJCQkgICAg
ICBzaXplb2Yoc3RydWN0IHZpcnRpb19wY2lfY29tbW9uX2NmZyksIDQsCisJCQkJICAgICAgc2l6
ZW9mKHN0cnVjdCB2aXJ0aW9fcGNpX2NvbW1vbl9jZmcpLAorCQkJCSAgICAgIE5VTEwpOworCWlm
ICghbWRldi0+Y29tbW9uKQorCQlnb3RvIGVycjsKKwltZGV2LT5pc3IgPSBtYXBfY2FwYWJpbGl0
eShtZGV2LCBpc3IsIHNpemVvZih1OCksIDEsIDEsIE5VTEwpOworCWlmICghbWRldi0+aXNyKQor
CQlnb3RvIGVycjsKKworCS8qIFJlYWQgbm90aWZ5X29mZl9tdWx0aXBsaWVyIGZyb20gY29uZmln
IHNwYWNlLiAqLworCXBjaV9yZWFkX2NvbmZpZ19kd29yZChwY2lfZGV2LAorCQkJICAgICAgbm90
aWZ5ICsgb2Zmc2V0b2Yoc3RydWN0IHZpcnRpb19wY2lfbm90aWZ5X2NhcCwKKwkJCQkJCW5vdGlm
eV9vZmZfbXVsdGlwbGllciksCisJCQkgICAgICAmbWRldi0+bm90aWZ5X29mZnNldF9tdWx0aXBs
aWVyKTsKKwkvKiBSZWFkIG5vdGlmeSBsZW5ndGggYW5kIG9mZnNldCBmcm9tIGNvbmZpZyBzcGFj
ZS4gKi8KKwlwY2lfcmVhZF9jb25maWdfZHdvcmQocGNpX2RldiwKKwkJCSAgICAgIG5vdGlmeSAr
IG9mZnNldG9mKHN0cnVjdCB2aXJ0aW9fcGNpX25vdGlmeV9jYXAsCisJCQkJCQljYXAubGVuZ3Ro
KSwKKwkJCSAgICAgICZub3RpZnlfbGVuZ3RoKTsKKworCXBjaV9yZWFkX2NvbmZpZ19kd29yZChw
Y2lfZGV2LAorCQkJICAgICAgbm90aWZ5ICsgb2Zmc2V0b2Yoc3RydWN0IHZpcnRpb19wY2lfbm90
aWZ5X2NhcCwKKwkJCQkJCWNhcC5vZmZzZXQpLAorCQkJICAgICAgJm5vdGlmeV9vZmZzZXQpOwor
CisJbWRldi0+bm90aWZ5X2Jhc2UgPSBtYXBfY2FwYWJpbGl0eShtZGV2LCBub3RpZnksIDIsIDIs
CisJCQkJCSAgIG5vdGlmeV9sZW5ndGgsCisJCQkJCSAgICZtZGV2LT5ub3RpZnlfbGVuKTsKKwlp
ZiAoIW1kZXYtPm5vdGlmeV9iYXNlKQorCQlnb3RvIGVycjsKKworCS8qIFdlIGRvbid0IGtub3cg
aG93IG11Y2ggd2Ugc2hvdWxkIG1hcCwgYnV0IFBBR0VfU0laRQorCSAqIGlzIG1vcmUgdGhhbiBl
bm91Z2ggZm9yIGFsbCBleGlzdGluZyBkZXZpY2VzLgorCSAqLworCWlmIChkZXZpY2UpIHsKKwkJ
bWRldi0+ZGV2aWNlID0gbWFwX2NhcGFiaWxpdHkobWRldiwgZGV2aWNlLCAwLCA0LAorCQkJCQkg
ICAgICBQQUdFX1NJWkUsCisJCQkJCSAgICAgICZtZGV2LT5kZXZpY2VfbGVuKTsKKwkJaWYgKCFt
ZGV2LT5kZXZpY2UpCisJCQlnb3RvIGVycjsKKwl9CisKKwlyZXR1cm4gMDsKKworZXJyOgorCXJl
dHVybiBlcnI7Cit9CitFWFBPUlRfU1lNQk9MX0dQTCh2cF9tb2Rlcm5fcHJvYmUpOworCitNT0RV
TEVfVkVSU0lPTigiMC4xIik7CitNT0RVTEVfREVTQ1JJUFRJT04oIk1vZGVybiBWaXJ0aW8gUENJ
IERldmljZSIpOworTU9EVUxFX0FVVEhPUigiSmFzb24gV2FuZyA8amFzb3dhbmdAcmVkaGF0LmNv
bT4iKTsKK01PRFVMRV9MSUNFTlNFKCJHUEwiKTsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgv
dmlydGlvX3BjaV9tb2Rlcm4uaCBiL2luY2x1ZGUvbGludXgvdmlydGlvX3BjaV9tb2Rlcm4uaApu
ZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLmE1MDI2MWIyYTE3ZAotLS0g
L2Rldi9udWxsCisrKyBiL2luY2x1ZGUvbGludXgvdmlydGlvX3BjaV9tb2Rlcm4uaApAQCAtMCww
ICsxLDEwNyBAQAorLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgKi8KKyNpZm5k
ZWYgX0xJTlVYX1ZJUlRJT19QQ0lfTU9ERVJOX0gKKyNkZWZpbmUgX0xJTlVYX1ZJUlRJT19QQ0lf
TU9ERVJOX0gKKworI2luY2x1ZGUgPGxpbnV4L3BjaS5oPgorI2luY2x1ZGUgPGxpbnV4L3ZpcnRp
b19wY2kuaD4KKworc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2RldmljZSB7CisJc3RydWN0IHBj
aV9kZXYgKnBjaV9kZXY7CisKKwkvKiBUaGUgSU8gbWFwcGluZyBmb3IgdGhlIFBDSSBCQVJzICov
CisJdm9pZCBfX2lvbWVtICogY29uc3QgKmJhc2U7CisKKwkvKiBUaGUgSU8gbWFwcGluZyBmb3Ig
dGhlIFBDSSBjb25maWcgc3BhY2UgKi8KKwlzdHJ1Y3QgdmlydGlvX3BjaV9jb21tb25fY2ZnIF9f
aW9tZW0gKmNvbW1vbjsKKwkvKiBEZXZpY2Utc3BlY2lmaWMgZGF0YSAobm9uLWxlZ2FjeSBtb2Rl
KSAgKi8KKwl2b2lkIF9faW9tZW0gKmRldmljZTsKKwkvKiBCYXNlIG9mIHZxIG5vdGlmaWNhdGlv
bnMgKG5vbi1sZWdhY3kgbW9kZSkuICovCisJdm9pZCBfX2lvbWVtICpub3RpZnlfYmFzZTsKKwkv
KiBXaGVyZSB0byByZWFkIGFuZCBjbGVhciBpbnRlcnJ1cHQgKi8KKwl1OCBfX2lvbWVtICppc3I7
CisKKwkvKiBTbyB3ZSBjYW4gc2FuaXR5LWNoZWNrIGFjY2Vzc2VzLiAqLworCXNpemVfdCBub3Rp
ZnlfbGVuOworCXNpemVfdCBkZXZpY2VfbGVuOworCisJLyogTXVsdGlwbHkgcXVldWVfbm90aWZ5
X29mZiBieSB0aGlzIHZhbHVlLiAobm9uLWxlZ2FjeSBtb2RlKS4gKi8KKwl1MzIgbm90aWZ5X29m
ZnNldF9tdWx0aXBsaWVyOworCisJaW50IG1vZGVybl9iYXJzOworCisJc3RydWN0IHZpcnRpb19k
ZXZpY2VfaWQgaWQ7Cit9OworCisvKgorICogVHlwZS1zYWZlIHdyYXBwZXJzIGZvciBpbyBhY2Nl
c3Nlcy4KKyAqIFVzZSB0aGVzZSB0byBlbmZvcmNlIGF0IGNvbXBpbGUgdGltZSB0aGUgZm9sbG93
aW5nIHNwZWMgcmVxdWlyZW1lbnQ6CisgKgorICogVGhlIGRyaXZlciBNVVNUIGFjY2VzcyBlYWNo
IGZpZWxkIHVzaW5nIHRoZSDigJxuYXR1cmFs4oCdIGFjY2VzcworICogbWV0aG9kLCBpLmUuIDMy
LWJpdCBhY2Nlc3NlcyBmb3IgMzItYml0IGZpZWxkcywgMTYtYml0IGFjY2Vzc2VzCisgKiBmb3Ig
MTYtYml0IGZpZWxkcyBhbmQgOC1iaXQgYWNjZXNzZXMgZm9yIDgtYml0IGZpZWxkcy4KKyAqLwor
c3RhdGljIGlubGluZSB1OCB2cF9pb3JlYWQ4KGNvbnN0IHU4IF9faW9tZW0gKmFkZHIpCit7CisJ
cmV0dXJuIGlvcmVhZDgoYWRkcik7Cit9CitzdGF0aWMgaW5saW5lIHUxNiB2cF9pb3JlYWQxNiAo
Y29uc3QgX19sZTE2IF9faW9tZW0gKmFkZHIpCit7CisJcmV0dXJuIGlvcmVhZDE2KGFkZHIpOwor
fQorCitzdGF0aWMgaW5saW5lIHUzMiB2cF9pb3JlYWQzMihjb25zdCBfX2xlMzIgX19pb21lbSAq
YWRkcikKK3sKKwlyZXR1cm4gaW9yZWFkMzIoYWRkcik7Cit9CisKK3N0YXRpYyBpbmxpbmUgdm9p
ZCB2cF9pb3dyaXRlOCh1OCB2YWx1ZSwgdTggX19pb21lbSAqYWRkcikKK3sKKwlpb3dyaXRlOCh2
YWx1ZSwgYWRkcik7Cit9CisKK3N0YXRpYyBpbmxpbmUgdm9pZCB2cF9pb3dyaXRlMTYodTE2IHZh
bHVlLCBfX2xlMTYgX19pb21lbSAqYWRkcikKK3sKKwlpb3dyaXRlMTYodmFsdWUsIGFkZHIpOwor
fQorCitzdGF0aWMgaW5saW5lIHZvaWQgdnBfaW93cml0ZTMyKHUzMiB2YWx1ZSwgX19sZTMyIF9f
aW9tZW0gKmFkZHIpCit7CisJaW93cml0ZTMyKHZhbHVlLCBhZGRyKTsKK30KKworc3RhdGljIGlu
bGluZSB2b2lkIHZwX2lvd3JpdGU2NF90d29wYXJ0KHU2NCB2YWwsCisJCQkJCV9fbGUzMiBfX2lv
bWVtICpsbywKKwkJCQkJX19sZTMyIF9faW9tZW0gKmhpKQoreworCXZwX2lvd3JpdGUzMigodTMy
KXZhbCwgbG8pOworCXZwX2lvd3JpdGUzMih2YWwgPj4gMzIsIGhpKTsKK30KKwordTY0IHZwX21v
ZGVybl9nZXRfZmVhdHVyZXMoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2RldmljZSAqbWRldik7
Cit2b2lkIHZwX21vZGVybl9zZXRfZmVhdHVyZXMoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2Rl
dmljZSAqbWRldiwKKwkJICAgICB1NjQgZmVhdHVyZXMpOwordTMyIHZwX21vZGVybl9nZW5lcmF0
aW9uKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYpOwordTggdnBfbW9kZXJu
X2dldF9zdGF0dXMoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2RldmljZSAqbWRldik7Cit2b2lk
IHZwX21vZGVybl9zZXRfc3RhdHVzKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1k
ZXYsCisJCSAgIHU4IHN0YXR1cyk7Cit1MTYgdnBfbW9kZXJuX3F1ZXVlX3ZlY3RvcihzdHJ1Y3Qg
dmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2LAorCQkJICAgdTE2IGlkeCwgdTE2IHZlY3Rv
cik7Cit1MTYgdnBfbW9kZXJuX2NvbmZpZ192ZWN0b3Ioc3RydWN0IHZpcnRpb19wY2lfbW9kZXJu
X2RldmljZSAqbWRldiwKKwkJICAgICB1MTYgdmVjdG9yKTsKK3ZvaWQgdnBfbW9kZXJuX3F1ZXVl
X2FkZHJlc3Moc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2RldmljZSAqbWRldiwKKwkJCSAgICAg
dTE2IGluZGV4LCB1NjQgZGVzY19hZGRyLCB1NjQgZHJpdmVyX2FkZHIsCisJCQkgICAgIHU2NCBk
ZXZpY2VfYWRkcik7Cit2b2lkIHZwX21vZGVybl9zZXRfcXVldWVfZW5hYmxlKHN0cnVjdCB2aXJ0
aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYsCisJCQkJdTE2IGlkeCwgYm9vbCBlbmFibGUpOwor
Ym9vbCB2cF9tb2Rlcm5fZ2V0X3F1ZXVlX2VuYWJsZShzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5f
ZGV2aWNlICptZGV2LAorCQkJCXUxNiBpZHgpOwordm9pZCB2cF9tb2Rlcm5fc2V0X3F1ZXVlX3Np
emUoc3RydWN0IHZpcnRpb19wY2lfbW9kZXJuX2RldmljZSAqbWRldiwKKwkJCSAgICAgIHUxNiBp
ZHgsIHUxNiBzaXplKTsKK3UxNiB2cF9tb2Rlcm5fZ2V0X3F1ZXVlX3NpemUoc3RydWN0IHZpcnRp
b19wY2lfbW9kZXJuX2RldmljZSAqbWRldiwKKwkJCSAgICAgdTE2IGlkeCk7Cit1MTYgdnBfbW9k
ZXJuX2dldF9udW1fcXVldWVzKHN0cnVjdCB2aXJ0aW9fcGNpX21vZGVybl9kZXZpY2UgKm1kZXYp
OwordTE2IHZwX21vZGVybl9nZXRfcXVldWVfbm90aWZ5X29mZihzdHJ1Y3QgdmlydGlvX3BjaV9t
b2Rlcm5fZGV2aWNlICptZGV2LAorCQkJCSAgIHUxNiBpZHgpOworaW50IHZwX21vZGVybl9wcm9i
ZShzdHJ1Y3QgdmlydGlvX3BjaV9tb2Rlcm5fZGV2aWNlICptZGV2KTsKKworI2VuZGlmCi0tIAoy
LjI1LjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fClZp
cnR1YWxpemF0aW9uIG1haWxpbmcgbGlzdApWaXJ0dWFsaXphdGlvbkBsaXN0cy5saW51eC1mb3Vu
ZGF0aW9uLm9yZwpodHRwczovL2xpc3RzLmxpbnV4Zm91bmRhdGlvbi5vcmcvbWFpbG1hbi9saXN0
aW5mby92aXJ0dWFsaXphdGlvbg==
