Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
	by mail.lfdr.de (Postfix) with ESMTPS id 030292D1B80
	for <lists.virtualization@lfdr.de>; Mon,  7 Dec 2020 21:58:08 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by silver.osuosl.org (Postfix) with ESMTP id 7D09A2E28F;
	Mon,  7 Dec 2020 20:58:06 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id OZckNM3C4V69; Mon,  7 Dec 2020 20:57:36 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by silver.osuosl.org (Postfix) with ESMTP id 723D52E4DA;
	Mon,  7 Dec 2020 20:56:59 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 59B92C013B;
	Mon,  7 Dec 2020 20:56:59 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from whitealder.osuosl.org (smtp1.osuosl.org [140.211.166.138])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 1D4CCC163C
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:56:57 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by whitealder.osuosl.org (Postfix) with ESMTP id 0B34587A8A
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:56:57 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from whitealder.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id TMxZJU9ZF3VZ
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:56:56 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by whitealder.osuosl.org (Postfix) with ESMTPS id 7197587A05
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:56:56 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp01.buh.bitdefender.com [10.17.80.75])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 7CCA0305D470; Mon,  7 Dec 2020 22:46:20 +0200 (EET)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 510403072785;
 Mon,  7 Dec 2020 22:46:20 +0200 (EET)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v11 49/81] KVM: introspection: add support for vCPU events
Date: Mon,  7 Dec 2020 22:45:50 +0200
Message-Id: <20201207204622.15258-50-alazar@bitdefender.com>
In-Reply-To: <20201207204622.15258-1-alazar@bitdefender.com>
References: <20201207204622.15258-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>, virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

VGhpcyBpcyB0aGUgY29tbW9uIGNvZGUgdXNlZCBieSB2Q1BVIHRocmVhZHMgdG8gc2VuZCBldmVu
dHMgYW5kIHdhaXQgZm9yCnJlcGxpZXMgKHJlY2VpdmVkIGFuZCBkaXNwYXRjaGVkIGJ5IHRoZSBy
ZWNlaXZpbmcgdGhyZWFkKS4gV2hpbGUgd2FpdGluZwpmb3IgYW4gZXZlbnQgcmVwbHksIHRoZSB2
Q1BVIHRocmVhZCB3aWxsIGhhbmRsZSBhbnkgaW50cm9zcGVjdGlvbiBjb21tYW5kCmFscmVhZHkg
cXVldWVkIG9yIHJlY2VpdmVkIGR1cmluZyB0aGlzIHBlcmlvZC4KClNpZ25lZC1vZmYtYnk6IEFk
YWxiZXJ0IExhesSDciA8YWxhemFyQGJpdGRlZmVuZGVyLmNvbT4KLS0tCiBEb2N1bWVudGF0aW9u
L3ZpcnQva3ZtL2t2bWkucnN0ICAgfCAgNTYgKysrKysrKysrKy0KIGFyY2gveDg2L2luY2x1ZGUv
dWFwaS9hc20va3ZtaS5oICB8ICAyMCArKysrCiBhcmNoL3g4Ni9rdm0va3ZtaS5jICAgICAgICAg
ICAgICAgfCAgODUgKysrKysrKysrKysrKysrKwogaW5jbHVkZS9saW51eC9rdm1pX2hvc3QuaCAg
ICAgICAgIHwgIDExICsrCiBpbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oICAgICAgICAgfCAgMjMg
KysrKysKIHZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jICAgICB8ICAgMSArCiB2aXJ0L2t2
bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmggfCAgIDYgKysKIHZpcnQva3ZtL2ludHJvc3BlY3Rp
b24va3ZtaV9tc2cuYyB8IDE2MSArKysrKysrKysrKysrKysrKysrKysrKysrKysrKy0KIDggZmls
ZXMgY2hhbmdlZCwgMzU5IGluc2VydGlvbnMoKyksIDQgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0
IGEvRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1pLnJzdCBiL0RvY3VtZW50YXRpb24vdmlydC9r
dm0va3ZtaS5yc3QKaW5kZXggYTcxZmI3OGQ1NDZlLi41ZTk5YmFmN2UyZjMgMTAwNjQ0Ci0tLSBh
L0RvY3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QKKysrIGIvRG9jdW1lbnRhdGlvbi92aXJ0
L2t2bS9rdm1pLnJzdApAQCAtNTIxLDcgKzUyMSw2MSBAQCBUaGUgbWVzc2FnZSBkYXRhIGJlZ2lu
cyB3aXRoIGEgY29tbW9uIHN0cnVjdHVyZSBoYXZpbmcgdGhlIGV2ZW50IGlkOjoKIAkJX191MTYg
cGFkZGluZ1szXTsKIAl9OwogCi1TcGVjaWZpYyBldmVudCBkYXRhIGNhbiBmb2xsb3cgdGhpcyBj
b21tb24gc3RydWN0dXJlLgorVGhlIHZDUFUgaW50cm9zcGVjdGlvbiBldmVudHMgYXJlIHNlbnQg
dXNpbmcgdGhlIEtWTUlfVkNQVV9FVkVOVCBtZXNzYWdlIGlkLgorTm8gZXZlbnQgaXMgc2VudCB1
bmxlc3MgaXQgaXMgZXhwbGljaXRseSBlbmFibGVkIG9yIHJlcXVlc3RlZAorKGUuZy4gKktWTUlf
VkNQVV9FVkVOVF9QQVVTRSopLgorQSB2Q1BVIGV2ZW50IGJlZ2lucyB3aXRoIGEgY29tbW9uIHN0
cnVjdHVyZSBoYXZpbmcgdGhlIHNpemUgb2YgdGhlCitzdHJ1Y3R1cmUgYW5kIHRoZSB2Q1BVIGlu
ZGV4OjoKKworCXN0cnVjdCBrdm1pX3ZjcHVfZXZlbnQgeworCQlfX3UxNiBzaXplOworCQlfX3Ux
NiB2Y3B1OworCQlfX3UzMiBwYWRkaW5nOworCQlzdHJ1Y3Qga3ZtaV92Y3B1X2V2ZW50X2FyY2gg
YXJjaDsKKwl9OworCitPbiB4ODY6OgorCisJc3RydWN0IGt2bWlfdmNwdV9ldmVudF9hcmNoIHsK
KwkJX191OCBtb2RlOworCQlfX3U4IHBhZGRpbmdbN107CisJCXN0cnVjdCBrdm1fcmVncyByZWdz
OworCQlzdHJ1Y3Qga3ZtX3NyZWdzIHNyZWdzOworCQlzdHJ1Y3QgeworCQkJX191NjQgc3lzZW50
ZXJfY3M7CisJCQlfX3U2NCBzeXNlbnRlcl9lc3A7CisJCQlfX3U2NCBzeXNlbnRlcl9laXA7CisJ
CQlfX3U2NCBlZmVyOworCQkJX191NjQgc3RhcjsKKwkJCV9fdTY0IGxzdGFyOworCQkJX191NjQg
Y3N0YXI7CisJCQlfX3U2NCBwYXQ7CisJCQlfX3U2NCBzaGFkb3dfZ3M7CisJCX0gbXNyczsKKwl9
OworCitJdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdkNQVSBzdGF0ZSBhdCB0aGUg
dGltZSBvZiB0aGUgZXZlbnQuCisKK0EgdkNQVSBldmVudCByZXBseSBiZWdpbnMgd2l0aCB0d28g
Y29tbW9uIHN0cnVjdHVyZXM6OgorCisJc3RydWN0IGt2bWlfdmNwdV9oZHI7CisJc3RydWN0IGt2
bWlfdmNwdV9ldmVudF9yZXBseSB7CisJCV9fdTggYWN0aW9uOworCQlfX3U4IGV2ZW50OworCQlf
X3UxNiBwYWRkaW5nMTsKKwkJX191MzIgcGFkZGluZzI7CisJfTsKKworQWxsIGV2ZW50cyBhY2Nl
cHQgdGhlIEtWTUlfRVZFTlRfQUNUSU9OX0NSQVNIIGFjdGlvbiwgd2hpY2ggc3RvcHMgdGhlCitn
dWVzdCB1bmdyYWNlZnVsbHksIGJ1dCBhcyBzb29uIGFzIHBvc3NpYmxlLgorCitNb3N0IGV2ZW50
cyBhY2NlcHQgdGhlIEtWTUlfRVZFTlRfQUNUSU9OX0NPTlRJTlVFIGFjdGlvbiwgd2hpY2gKK21l
YW5zIHRoYXQgS1ZNIHdpbGwgY29udGludWUgaGFuZGxpbmcgdGhlIGV2ZW50LgorCitTb21lIGV2
ZW50cyBhY2NlcHQgdGhlIEtWTUlfRVZFTlRfQUNUSU9OX1JFVFJZIGFjdGlvbiwgd2hpY2ggbWVh
bnMgdGhhdAorS1ZNIHdpbGwgc3RvcCBoYW5kbGluZyB0aGUgZXZlbnQgYW5kIHJlLWVudGVyIGlu
IGd1ZXN0LgorCitTcGVjaWZpYyBldmVudCBkYXRhIGNhbiBmb2xsb3cgdGhlc2UgY29tbW9uIHN0
cnVjdHVyZXMuCiAKIDEuIEtWTUlfVk1fRVZFTlRfVU5IT09LCiAtLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLQpkaWZmIC0tZ2l0IGEvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmggYi9hcmNo
L3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWkuaAppbmRleCAyYjYxOTJlMWE5YTQuLjlkOWRmMDlk
MzgxYSAxMDA2NDQKLS0tIGEvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKKysrIGIv
YXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKQEAgLTYsOCArNiwyOCBAQAogICogS1ZN
IGludHJvc3BlY3Rpb24gLSB4ODYgc3BlY2lmaWMgc3RydWN0dXJlcyBhbmQgZGVmaW5pdGlvbnMK
ICAqLwogCisjaW5jbHVkZSA8YXNtL2t2bS5oPgorCiBzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9pbmZv
X3JlcGx5IHsKIAlfX3U2NCB0c2Nfc3BlZWQ7CiB9OwogCitzdHJ1Y3Qga3ZtaV92Y3B1X2V2ZW50
X2FyY2ggeworCV9fdTggbW9kZTsJCS8qIDIsIDQgb3IgOCAqLworCV9fdTggcGFkZGluZ1s3XTsK
KwlzdHJ1Y3Qga3ZtX3JlZ3MgcmVnczsKKwlzdHJ1Y3Qga3ZtX3NyZWdzIHNyZWdzOworCXN0cnVj
dCB7CisJCV9fdTY0IHN5c2VudGVyX2NzOworCQlfX3U2NCBzeXNlbnRlcl9lc3A7CisJCV9fdTY0
IHN5c2VudGVyX2VpcDsKKwkJX191NjQgZWZlcjsKKwkJX191NjQgc3RhcjsKKwkJX191NjQgbHN0
YXI7CisJCV9fdTY0IGNzdGFyOworCQlfX3U2NCBwYXQ7CisJCV9fdTY0IHNoYWRvd19nczsKKwl9
IG1zcnM7Cit9OworCiAjZW5kaWYgLyogX1VBUElfQVNNX1g4Nl9LVk1JX0ggKi8KZGlmZiAtLWdp
dCBhL2FyY2gveDg2L2t2bS9rdm1pLmMgYi9hcmNoL3g4Ni9rdm0va3ZtaS5jCmluZGV4IDM1NzQy
ZDkyN2JlNS4uMzgzYjE5ZGNmMDU0IDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0va3ZtaS5jCisr
KyBiL2FyY2gveDg2L2t2bS9rdm1pLmMKQEAgLTUsNiArNSw5MSBAQAogICogQ29weXJpZ2h0IChD
KSAyMDE5LTIwMjAgQml0ZGVmZW5kZXIgUy5SLkwuCiAgKi8KIAorI2luY2x1ZGUgImxpbnV4L2t2
bV9ob3N0LmgiCisjaW5jbHVkZSAieDg2LmgiCisjaW5jbHVkZSAiLi4vLi4vLi4vdmlydC9rdm0v
aW50cm9zcGVjdGlvbi9rdm1pX2ludC5oIgorCiB2b2lkIGt2bWlfYXJjaF9pbml0X3ZjcHVfZXZl
bnRzX21hc2sodW5zaWduZWQgbG9uZyAqc3VwcG9ydGVkKQogewogfQorCitzdGF0aWMgdW5zaWdu
ZWQgaW50IGt2bWlfdmNwdV9tb2RlKGNvbnN0IHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKKwkJCQkg
ICBjb25zdCBzdHJ1Y3Qga3ZtX3NyZWdzICpzcmVncykKK3sKKwl1bnNpZ25lZCBpbnQgbW9kZSA9
IDA7CisKKwlpZiAoaXNfbG9uZ19tb2RlKChzdHJ1Y3Qga3ZtX3ZjcHUgKikgdmNwdSkpIHsKKwkJ
aWYgKHNyZWdzLT5jcy5sKQorCQkJbW9kZSA9IDg7CisJCWVsc2UgaWYgKCFzcmVncy0+Y3MuZGIp
CisJCQltb2RlID0gMjsKKwkJZWxzZQorCQkJbW9kZSA9IDQ7CisJfSBlbHNlIGlmIChzcmVncy0+
Y3IwICYgWDg2X0NSMF9QRSkgeworCQlpZiAoIXNyZWdzLT5jcy5kYikKKwkJCW1vZGUgPSAyOwor
CQllbHNlCisJCQltb2RlID0gNDsKKwl9IGVsc2UgaWYgKCFzcmVncy0+Y3MuZGIpIHsKKwkJbW9k
ZSA9IDI7CisJfSBlbHNlIHsKKwkJbW9kZSA9IDQ7CisJfQorCisJcmV0dXJuIG1vZGU7Cit9CisK
K3N0YXRpYyB2b2lkIGt2bWlfZ2V0X21zcnMoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAorCQkJICBz
dHJ1Y3Qga3ZtaV92Y3B1X2V2ZW50X2FyY2ggKmV2ZW50KQoreworCXN0cnVjdCBtc3JfZGF0YSBt
c3I7CisKKwltc3IuaG9zdF9pbml0aWF0ZWQgPSB0cnVlOworCisJbXNyLmluZGV4ID0gTVNSX0lB
MzJfU1lTRU5URVJfQ1M7CisJa3ZtX3g4Nl9vcHMuZ2V0X21zcih2Y3B1LCAmbXNyKTsKKwlldmVu
dC0+bXNycy5zeXNlbnRlcl9jcyA9IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0lBMzJf
U1lTRU5URVJfRVNQOworCWt2bV94ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQt
Pm1zcnMuc3lzZW50ZXJfZXNwID0gbXNyLmRhdGE7CisKKwltc3IuaW5kZXggPSBNU1JfSUEzMl9T
WVNFTlRFUl9FSVA7CisJa3ZtX3g4Nl9vcHMuZ2V0X21zcih2Y3B1LCAmbXNyKTsKKwlldmVudC0+
bXNycy5zeXNlbnRlcl9laXAgPSBtc3IuZGF0YTsKKworCW1zci5pbmRleCA9IE1TUl9FRkVSOwor
CWt2bV94ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQtPm1zcnMuZWZlciA9IG1z
ci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX1NUQVI7CisJa3ZtX3g4Nl9vcHMuZ2V0X21zcih2
Y3B1LCAmbXNyKTsKKwlldmVudC0+bXNycy5zdGFyID0gbXNyLmRhdGE7CisKKwltc3IuaW5kZXgg
PSBNU1JfTFNUQVI7CisJa3ZtX3g4Nl9vcHMuZ2V0X21zcih2Y3B1LCAmbXNyKTsKKwlldmVudC0+
bXNycy5sc3RhciA9IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0NTVEFSOworCWt2bV94
ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQtPm1zcnMuY3N0YXIgPSBtc3IuZGF0
YTsKKworCW1zci5pbmRleCA9IE1TUl9JQTMyX0NSX1BBVDsKKwlrdm1feDg2X29wcy5nZXRfbXNy
KHZjcHUsICZtc3IpOworCWV2ZW50LT5tc3JzLnBhdCA9IG1zci5kYXRhOworCisJbXNyLmluZGV4
ID0gTVNSX0tFUk5FTF9HU19CQVNFOworCWt2bV94ODZfb3BzLmdldF9tc3IodmNwdSwgJm1zcik7
CisJZXZlbnQtPm1zcnMuc2hhZG93X2dzID0gbXNyLmRhdGE7Cit9CisKK3ZvaWQga3ZtaV9hcmNo
X3NldHVwX3ZjcHVfZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAorCQkJCXN0cnVjdCBrdm1p
X3ZjcHVfZXZlbnQgKmV2KQoreworCXN0cnVjdCBrdm1pX3ZjcHVfZXZlbnRfYXJjaCAqZXZlbnQg
PSAmZXYtPmFyY2g7CisKKwlrdm1fYXJjaF92Y3B1X2dldF9yZWdzKHZjcHUsICZldmVudC0+cmVn
cyk7CisJa3ZtX2FyY2hfdmNwdV9nZXRfc3JlZ3ModmNwdSwgJmV2ZW50LT5zcmVncyk7CisJZXYt
PmFyY2gubW9kZSA9IGt2bWlfdmNwdV9tb2RlKHZjcHUsICZldmVudC0+c3JlZ3MpOworCWt2bWlf
Z2V0X21zcnModmNwdSwgZXZlbnQpOworfQpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9rdm1p
X2hvc3QuaCBiL2luY2x1ZGUvbGludXgva3ZtaV9ob3N0LmgKaW5kZXggNTllNjQ1ZDllYTM0Li40
YTQzZTUxYTQ0YzkgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgva3ZtaV9ob3N0LmgKKysrIGIv
aW5jbHVkZS9saW51eC9rdm1pX2hvc3QuaApAQCAtNiw2ICs2LDE0IEBACiAKICNpbmNsdWRlIDxh
c20va3ZtaV9ob3N0Lmg+CiAKK3N0cnVjdCBrdm1pX3ZjcHVfcmVwbHkgeworCWludCBlcnJvcjsK
Kwl1MzIgYWN0aW9uOworCXUzMiBzZXE7CisJdm9pZCAqZGF0YTsKKwlzaXplX3Qgc2l6ZTsKK307
CisKIHN0cnVjdCBrdm1pX2pvYiB7CiAJc3RydWN0IGxpc3RfaGVhZCBsaW5rOwogCXZvaWQgKmN0
eDsKQEAgLTIwLDYgKzI4LDkgQEAgc3RydWN0IGt2bV92Y3B1X2ludHJvc3BlY3Rpb24gewogCXNw
aW5sb2NrX3Qgam9iX2xvY2s7CiAKIAlhdG9taWNfdCBwYXVzZV9yZXF1ZXN0czsKKworCXN0cnVj
dCBrdm1pX3ZjcHVfcmVwbHkgcmVwbHk7CisJYm9vbCB3YWl0aW5nX2Zvcl9yZXBseTsKIH07CiAK
IHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiB7CmRpZmYgLS1naXQgYS9pbmNsdWRlL3VhcGkvbGlu
dXgva3ZtaS5oIGIvaW5jbHVkZS91YXBpL2xpbnV4L2t2bWkuaAppbmRleCBiYjkwZDAzZjA1OWIu
LjZhNTdlZmI1NjY0ZCAxMDA2NDQKLS0tIGEvaW5jbHVkZS91YXBpL2xpbnV4L2t2bWkuaAorKysg
Yi9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCkBAIC04LDYgKzgsNyBAQAogCiAjaW5jbHVkZSA8
bGludXgva2VybmVsLmg+CiAjaW5jbHVkZSA8bGludXgvdHlwZXMuaD4KKyNpbmNsdWRlIDxhc20v
a3ZtaS5oPgogCiBlbnVtIHsKIAlLVk1JX1ZFUlNJT04gPSAweDAwMDAwMDAxCkBAIC0zMiw2ICsz
Myw4IEBAIGVudW0gewogfTsKIAogZW51bSB7CisJS1ZNSV9WQ1BVX0VWRU5UID0gS1ZNSV9WQ1BV
X01FU1NBR0VfSUQoMCksCisKIAlLVk1JX1ZDUFVfR0VUX0lORk8gPSBLVk1JX1ZDUFVfTUVTU0FH
RV9JRCgxKSwKIAogCUtWTUlfTkVYVF9WQ1BVX01FU1NBR0UKQEAgLTUwLDYgKzUzLDEyIEBAIGVu
dW0gewogCUtWTUlfTkVYVF9WQ1BVX0VWRU5UCiB9OwogCitlbnVtIHsKKwlLVk1JX0VWRU5UX0FD
VElPTl9DT05USU5VRSA9IDAsCisJS1ZNSV9FVkVOVF9BQ1RJT05fUkVUUlkgICAgPSAxLAorCUtW
TUlfRVZFTlRfQUNUSU9OX0NSQVNIICAgID0gMiwKK307CisKIHN0cnVjdCBrdm1pX21zZ19oZHIg
ewogCV9fdTE2IGlkOwogCV9fdTE2IHNpemU7CkBAIC0xMjMsNCArMTMyLDE4IEBAIHN0cnVjdCBr
dm1pX3ZtX3BhdXNlX3ZjcHUgewogCV9fdTMyIHBhZGRpbmcyOwogfTsKIAorc3RydWN0IGt2bWlf
dmNwdV9ldmVudCB7CisJX191MTYgc2l6ZTsKKwlfX3UxNiB2Y3B1OworCV9fdTMyIHBhZGRpbmc7
CisJc3RydWN0IGt2bWlfdmNwdV9ldmVudF9hcmNoIGFyY2g7Cit9OworCitzdHJ1Y3Qga3ZtaV92
Y3B1X2V2ZW50X3JlcGx5IHsKKwlfX3U4IGFjdGlvbjsKKwlfX3U4IGV2ZW50OworCV9fdTE2IHBh
ZGRpbmcxOworCV9fdTMyIHBhZGRpbmcyOworfTsKKwogI2VuZGlmIC8qIF9VQVBJX19MSU5VWF9L
Vk1JX0ggKi8KZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jIGIvdmly
dC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMKaW5kZXggOTA0MzYyZDAwZTYyLi45MmE1ZWQ1Yzc1
ZTQgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jCisrKyBiL3ZpcnQv
a3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jCkBAIC0zNjgsNiArMzY4LDcgQEAgc3RhdGljIHZvaWQg
a3ZtaV9qb2JfcmVsZWFzZV92Y3B1KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdm9pZCAqY3R4KQog
CXN0cnVjdCBrdm1fdmNwdV9pbnRyb3NwZWN0aW9uICp2Y3B1aSA9IFZDUFVJKHZjcHUpOwogCiAJ
YXRvbWljX3NldCgmdmNwdWktPnBhdXNlX3JlcXVlc3RzLCAwKTsKKwl2Y3B1aS0+d2FpdGluZ19m
b3JfcmVwbHkgPSBmYWxzZTsKIH0KIAogc3RhdGljIHZvaWQga3ZtaV9yZWxlYXNlX3ZjcHVzKHN0
cnVjdCBrdm0gKmt2bSkKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9p
bnQuaCBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaAppbmRleCBmMWNhYTY3ZGJk
YzMuLjY1ZDhjMWMzNzc5NiAxMDA2NDQKLS0tIGEvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1p
X2ludC5oCisrKyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaApAQCAtMzIsNiAr
MzIsOSBAQCB2b2lkIGt2bWlfc29ja19zaHV0ZG93bihzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24g
Kmt2bWkpOwogdm9pZCBrdm1pX3NvY2tfcHV0KHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3Zt
aSk7CiBib29sIGt2bWlfbXNnX3Byb2Nlc3Moc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1p
KTsKIGludCBrdm1pX21zZ19zZW5kX3VuaG9vayhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2
bWkpOworaW50IGt2bWlfc2VuZF92Y3B1X2V2ZW50KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdTMy
IGV2X2lkLAorCQkJIHZvaWQgKmV2LCBzaXplX3QgZXZfc2l6ZSwKKwkJCSB2b2lkICpycGwsIHNp
emVfdCBycGxfc2l6ZSwgdTMyICphY3Rpb24pOwogaW50IGt2bWlfbXNnX3ZjcHVfcmVwbHkoY29u
c3Qgc3RydWN0IGt2bWlfdmNwdV9tc2dfam9iICpqb2IsCiAJCQljb25zdCBzdHJ1Y3Qga3ZtaV9t
c2dfaGRyICptc2csIGludCBlcnIsCiAJCQljb25zdCB2b2lkICpycGwsIHNpemVfdCBycGxfc2l6
ZSk7CkBAIC00Niw2ICs0OSw3IEBAIGJvb2wga3ZtaV9pc19rbm93bl92bV9ldmVudCh1MTYgaWQp
OwogaW50IGt2bWlfYWRkX2pvYihzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsCiAJCSB2b2lkICgqZmN0
KShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHZvaWQgKmN0eCksCiAJCSB2b2lkICpjdHgsIHZvaWQg
KCpmcmVlX2ZjdCkodm9pZCAqY3R4KSk7Cit2b2lkIGt2bWlfcnVuX2pvYnMoc3RydWN0IGt2bV92
Y3B1ICp2Y3B1KTsKIGludCBrdm1pX2NtZF92bV9jb250cm9sX2V2ZW50cyhzdHJ1Y3Qga3ZtX2lu
dHJvc3BlY3Rpb24gKmt2bWksCiAJCQkgICAgICAgdTE2IGV2ZW50X2lkLCBib29sIGVuYWJsZSk7
CiBpbnQga3ZtaV9jbWRfcmVhZF9waHlzaWNhbChzdHJ1Y3Qga3ZtICprdm0sIHU2NCBncGEsIHNp
emVfdCBzaXplLApAQCAtNjAsNSArNjQsNyBAQCBpbnQga3ZtaV9jbWRfdmNwdV9wYXVzZShzdHJ1
Y3Qga3ZtX3ZjcHUgKnZjcHUsIGJvb2wgd2FpdCk7CiAvKiBhcmNoICovCiB2b2lkIGt2bWlfYXJj
aF9pbml0X3ZjcHVfZXZlbnRzX21hc2sodW5zaWduZWQgbG9uZyAqc3VwcG9ydGVkKTsKIGt2bWlf
dmNwdV9tc2dfam9iX2ZjdCBrdm1pX2FyY2hfdmNwdV9tc2dfaGFuZGxlcih1MTYgaWQpOwordm9p
ZCBrdm1pX2FyY2hfc2V0dXBfdmNwdV9ldmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsCisJCQkJ
c3RydWN0IGt2bWlfdmNwdV9ldmVudCAqZXYpOwogCiAjZW5kaWYKZGlmZiAtLWdpdCBhL3ZpcnQv
a3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3Zt
aV9tc2cuYwppbmRleCA4ZDg3YmExNmViMTIuLjEyMTk1OTQxYzQ4NiAxMDA2NDQKLS0tIGEvdmly
dC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jCisrKyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rp
b24va3ZtaV9tc2cuYwpAQCAtMjk5LDYgKzI5OSw2OSBAQCBzdGF0aWMgYm9vbCBpc192bV9jb21t
YW5kKHUxNiBpZCkKIAlyZXR1cm4gaXNfdm1fbWVzc2FnZShpZCkgJiYgaWQgIT0gS1ZNSV9WTV9F
VkVOVDsKIH0KIAorc3RhdGljIGludCBjaGVja19ldmVudF9yZXBseShjb25zdCBzdHJ1Y3Qga3Zt
aV9tc2dfaGRyICptc2csCisJCQkgICAgIGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfZXZlbnRfcmVw
bHkgKnJlcGx5LAorCQkJICAgICBjb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X3JlcGx5ICpleHBlY3Rl
ZCwKKwkJCSAgICAgdTggKmFjdGlvbiwgc2l6ZV90ICpyZWNlaXZlZCkKK3sKKwlzaXplX3QgbXNn
X3NpemUsIGNvbW1vbl9zaXplLCBldmVudF9zaXplOworCWludCBlcnIgPSAtRUlOVkFMOworCisJ
aWYgKHVubGlrZWx5KG1zZy0+c2VxICE9IGV4cGVjdGVkLT5zZXEpKQorCQlyZXR1cm4gZXJyOwor
CisJbXNnX3NpemUgPSBtc2ctPnNpemU7CisJY29tbW9uX3NpemUgPSBzaXplb2Yoc3RydWN0IGt2
bWlfdmNwdV9oZHIpICsgc2l6ZW9mKCpyZXBseSk7CisKKwlpZiAoY2hlY2tfc3ViX292ZXJmbG93
KG1zZ19zaXplLCBjb21tb25fc2l6ZSwgJmV2ZW50X3NpemUpKQorCQlyZXR1cm4gZXJyOworCisJ
aWYgKHVubGlrZWx5KGV2ZW50X3NpemUgPiBleHBlY3RlZC0+c2l6ZSkpCisJCXJldHVybiBlcnI7
CisKKwlpZiAodW5saWtlbHkocmVwbHktPnBhZGRpbmcxIHx8IHJlcGx5LT5wYWRkaW5nMikpCisJ
CXJldHVybiBlcnI7CisKKwkqcmVjZWl2ZWQgPSBldmVudF9zaXplOworCSphY3Rpb24gPSByZXBs
eS0+YWN0aW9uOworCXJldHVybiAwOworfQorCitzdGF0aWMgaW50IGhhbmRsZV92Y3B1X2V2ZW50
X3JlcGx5KGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVfbXNnX2pvYiAqam9iLAorCQkJCSAgIGNvbnN0
IHN0cnVjdCBrdm1pX21zZ19oZHIgKm1zZywKKwkJCQkgICBjb25zdCB2b2lkICpycGwpCit7CisJ
c3RydWN0IGt2bV92Y3B1X2ludHJvc3BlY3Rpb24gKnZjcHVpID0gVkNQVUkoam9iLT52Y3B1KTsK
KwlzdHJ1Y3Qga3ZtaV92Y3B1X3JlcGx5ICpleHBlY3RlZCA9ICZ2Y3B1aS0+cmVwbHk7CisJY29u
c3Qgc3RydWN0IGt2bWlfdmNwdV9ldmVudF9yZXBseSAqcmVwbHkgPSBycGw7CisJY29uc3Qgdm9p
ZCAqcmVwbHlfZGF0YSA9IHJlcGx5ICsgMTsKKwlzaXplX3QgdXNlZnVsLCByZWNlaXZlZDsKKwlp
bnQgZXJyID0gLUVJTlRSOworCXU4IGFjdGlvbjsKKworCWlmICh1bmxpa2VseSghdmNwdWktPndh
aXRpbmdfZm9yX3JlcGx5KSkKKwkJZ290byBvdXQ7CisKKwllcnIgPSBjaGVja19ldmVudF9yZXBs
eShtc2csIHJlcGx5LCBleHBlY3RlZCwgJmFjdGlvbiwgJnJlY2VpdmVkKTsKKwlpZiAodW5saWtl
bHkoZXJyKSkKKwkJZ290byBvdXQ7CisKKwl1c2VmdWwgPSBtaW4ocmVjZWl2ZWQsIGV4cGVjdGVk
LT5zaXplKTsKKwlpZiAodXNlZnVsKQorCQltZW1jcHkoZXhwZWN0ZWQtPmRhdGEsIHJlcGx5X2Rh
dGEsIHVzZWZ1bCk7CisKKwlpZiAoZXhwZWN0ZWQtPnNpemUgPiB1c2VmdWwpCisJCW1lbXNldCgo
Y2hhciAqKWV4cGVjdGVkLT5kYXRhICsgdXNlZnVsLCAwLAorCQkJZXhwZWN0ZWQtPnNpemUgLSB1
c2VmdWwpOworCisJZXhwZWN0ZWQtPmFjdGlvbiA9IGFjdGlvbjsKKworb3V0OgorCXZjcHVpLT53
YWl0aW5nX2Zvcl9yZXBseSA9IGZhbHNlOworCWV4cGVjdGVkLT5lcnJvciA9IGVycjsKKwlyZXR1
cm4gZXhwZWN0ZWQtPmVycm9yOworfQorCiAvKgogICogVGhlc2UgZnVuY3Rpb25zIGFyZSBleGVj
dXRlZCBmcm9tIHRoZSB2Q1BVIHRocmVhZC4gVGhlIHJlY2VpdmluZyB0aHJlYWQKICAqIHBhc3Nl
cyB0aGUgbWVzc2FnZXMgdXNpbmcgYSBuZXdseSBhbGxvY2F0ZWQgJ3N0cnVjdCBrdm1pX3ZjcHVf
bXNnX2pvYicKQEAgLTMwNiw2ICszNjksNyBAQCBzdGF0aWMgYm9vbCBpc192bV9jb21tYW5kKHUx
NiBpZCkKICAqIHNlbmRpbmcgYmFjayB0aGUgcmVwbHkpLgogICovCiBzdGF0aWMga3ZtaV92Y3B1
X21zZ19qb2JfZmN0IGNvbnN0IG1zZ192Y3B1W10gPSB7CisJW0tWTUlfVkNQVV9FVkVOVF0gPSBo
YW5kbGVfdmNwdV9ldmVudF9yZXBseSwKIH07CiAKIHN0YXRpYyBrdm1pX3ZjcHVfbXNnX2pvYl9m
Y3QgZ2V0X3ZjcHVfbXNnX2hhbmRsZXIodTE2IGlkKQpAQCAtMzI5LDcgKzM5Myw3IEBAIHN0YXRp
YyBib29sIGlzX3ZjcHVfbWVzc2FnZSh1MTYgaWQpCiAKIHN0YXRpYyBib29sIGlzX3ZjcHVfY29t
bWFuZCh1MTYgaWQpCiB7Ci0JcmV0dXJuIGlzX3ZjcHVfbWVzc2FnZShpZCk7CisJcmV0dXJuIGlz
X3ZjcHVfbWVzc2FnZShpZCkgJiYgaWQgIT0gS1ZNSV9WQ1BVX0VWRU5UOwogfQogCiBzdGF0aWMg
dm9pZCBrdm1pX2pvYl92Y3B1X21zZyhzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHZvaWQgKmN0eCkK
QEAgLTQyMiw3ICs0ODYsOCBAQCBzdGF0aWMgaW50IGt2bWlfbXNnX2hhbmRsZV92bV9jbWQoc3Ry
dWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pLAogCiBzdGF0aWMgYm9vbCB2Y3B1X2Nhbl9oYW5k
bGVfbWVzc2FnZXMoc3RydWN0IGt2bV92Y3B1ICp2Y3B1KQogewotCXJldHVybiB2Y3B1LT5hcmNo
Lm1wX3N0YXRlICE9IEtWTV9NUF9TVEFURV9VTklOSVRJQUxJWkVEOworCXJldHVybiBWQ1BVSSh2
Y3B1KS0+d2FpdGluZ19mb3JfcmVwbHkKKwkJfHwgdmNwdS0+YXJjaC5tcF9zdGF0ZSAhPSBLVk1f
TVBfU1RBVEVfVU5JTklUSUFMSVpFRDsKIH0KIAogc3RhdGljIGludCBrdm1pX2dldF92Y3B1X2lm
X3JlYWR5KHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSwKQEAgLTQ2Nyw3ICs1MzIsOCBA
QCBzdGF0aWMgaW50IGt2bWlfbXNnX2hhbmRsZV92Y3B1X21zZyhzdHJ1Y3Qga3ZtX2ludHJvc3Bl
Y3Rpb24gKmt2bWksCiAJc3RydWN0IGt2bV92Y3B1ICp2Y3B1ID0gTlVMTDsKIAlpbnQgZXJyLCBl
YzsKIAotCWlmICgha3ZtaV9pc19jb21tYW5kX2FsbG93ZWQoa3ZtaSwgbXNnLT5pZCkpCisJaWYg
KG1zZy0+aWQgIT0gS1ZNSV9WQ1BVX0VWRU5UICYmCisJICAgICFrdm1pX2lzX2NvbW1hbmRfYWxs
b3dlZChrdm1pLCBtc2ctPmlkKSkKIAkJcmV0dXJuIGt2bWlfbXNnX3ZtX3JlcGx5X2VjKGt2bWks
IG1zZywgLUtWTV9FUEVSTSk7CiAKIAlpZiAodmNwdV9oZHItPnBhZGRpbmcxIHx8IHZjcHVfaGRy
LT5wYWRkaW5nMikKQEAgLTU0NywzICs2MTMsOTIgQEAgaW50IGt2bWlfbXNnX3NlbmRfdW5ob29r
KHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSkKIAogCXJldHVybiBrdm1pX3NvY2tfd3Jp
dGUoa3ZtaSwgdmVjLCBuLCBtc2dfc2l6ZSk7CiB9CisKK3N0YXRpYyBpbnQga3ZtaV93YWl0X2Zv
cl9yZXBseShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUpCit7CisJc3RydWN0IHJjdXdhaXQgKndhaXRw
ID0ga3ZtX2FyY2hfdmNwdV9nZXRfd2FpdCh2Y3B1KTsKKwlzdHJ1Y3Qga3ZtX3ZjcHVfaW50cm9z
cGVjdGlvbiAqdmNwdWkgPSBWQ1BVSSh2Y3B1KTsKKwlpbnQgZXJyID0gMDsKKworCXdoaWxlICh2
Y3B1aS0+d2FpdGluZ19mb3JfcmVwbHkgJiYgIWVycikgeworCQlrdm1pX3J1bl9qb2JzKHZjcHUp
OworCisJCWVyciA9IHJjdXdhaXRfd2FpdF9ldmVudCh3YWl0cCwKKwkJCSF2Y3B1aS0+d2FpdGlu
Z19mb3JfcmVwbHkgfHwKKwkJCSFsaXN0X2VtcHR5KCZ2Y3B1aS0+am9iX2xpc3QpLAorCQkJVEFT
S19LSUxMQUJMRSk7CisJfQorCisJcmV0dXJuIGVycjsKK30KKworc3RhdGljIHZvaWQga3ZtaV9z
ZXR1cF92Y3B1X3JlcGx5KHN0cnVjdCBrdm1fdmNwdV9pbnRyb3NwZWN0aW9uICp2Y3B1aSwKKwkJ
CQkgIHUzMiBtc2dfc2VxLCB2b2lkICpycGwsIHNpemVfdCBycGxfc2l6ZSkKK3sKKwltZW1zZXQo
JnZjcHVpLT5yZXBseSwgMCwgc2l6ZW9mKHZjcHVpLT5yZXBseSkpOworCisJdmNwdWktPnJlcGx5
LnNlcSA9IG1zZ19zZXE7CisJdmNwdWktPnJlcGx5LmRhdGEgPSBycGw7CisJdmNwdWktPnJlcGx5
LnNpemUgPSBycGxfc2l6ZTsKKwl2Y3B1aS0+cmVwbHkuZXJyb3IgPSAtRUlOVFI7CisJdmNwdWkt
PndhaXRpbmdfZm9yX3JlcGx5ID0gdHJ1ZTsKK30KKworc3RhdGljIGludCBrdm1pX2ZpbGxfYW5k
X3NlbnRfdmNwdV9ldmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsCisJCQkJCSB1MzIgZXZfaWQs
IHZvaWQgKmV2LAorCQkJCQkgc2l6ZV90IGV2X3NpemUsIHUzMiBtc2dfc2VxKQoreworCXN0cnVj
dCBrdm1pX21zZ19oZHIgbXNnX2hkcjsKKwlzdHJ1Y3Qga3ZtaV9ldmVudF9oZHIgZXZfaGRyOwor
CXN0cnVjdCBrdm1pX3ZjcHVfZXZlbnQgY29tbW9uOworCXN0cnVjdCBrdmVjIHZlY1tdID0gewor
CQl7Lmlvdl9iYXNlID0gJm1zZ19oZHIsIC5pb3ZfbGVuID0gc2l6ZW9mKG1zZ19oZHIpfSwKKwkJ
ey5pb3ZfYmFzZSA9ICZldl9oZHIsICAuaW92X2xlbiA9IHNpemVvZihldl9oZHIpIH0sCisJCXsu
aW92X2Jhc2UgPSAmY29tbW9uLCAgLmlvdl9sZW4gPSBzaXplb2YoY29tbW9uKSB9LAorCQl7Lmlv
dl9iYXNlID0gZXYsICAgICAgIC5pb3ZfbGVuID0gZXZfc2l6ZSAgICAgICAgfSwKKwl9OworCXNp
emVfdCBtc2dfc2l6ZSA9IHNpemVvZihtc2dfaGRyKSArIHNpemVvZihldl9oZHIpCisJCQkrIHNp
emVvZihjb21tb24pICsgZXZfc2l6ZTsKKwlzaXplX3QgbiA9IEFSUkFZX1NJWkUodmVjKSAtIChl
dl9zaXplID09IDAgPyAxIDogMCk7CisJc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pID0g
S1ZNSSh2Y3B1LT5rdm0pOworCisJa3ZtaV9maWxsX2V2X21zZ19oZHIoa3ZtaSwgJm1zZ19oZHIs
ICZldl9oZHIsIEtWTUlfVkNQVV9FVkVOVCwKKwkJCSAgICAgbXNnX3NlcSwgbXNnX3NpemUsIGV2
X2lkKTsKKworCWNvbW1vbi5zaXplID0gc2l6ZW9mKGNvbW1vbik7CisJY29tbW9uLnZjcHUgPSBr
dm1fdmNwdV9nZXRfaWR4KHZjcHUpOworCisJa3ZtaV9hcmNoX3NldHVwX3ZjcHVfZXZlbnQodmNw
dSwgJmNvbW1vbik7CisKKwlyZXR1cm4ga3ZtaV9zb2NrX3dyaXRlKGt2bWksIHZlYywgbiwgbXNn
X3NpemUpOworfQorCitpbnQga3ZtaV9zZW5kX3ZjcHVfZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2
Y3B1LCB1MzIgZXZfaWQsCisJCQkgdm9pZCAqZXYsIHNpemVfdCBldl9zaXplLAorCQkJIHZvaWQg
KnJwbCwgc2l6ZV90IHJwbF9zaXplLCB1MzIgKmFjdGlvbikKK3sKKwlzdHJ1Y3Qga3ZtX3ZjcHVf
aW50cm9zcGVjdGlvbiAqdmNwdWkgPSBWQ1BVSSh2Y3B1KTsKKwlzdHJ1Y3Qga3ZtX2ludHJvc3Bl
Y3Rpb24gKmt2bWkgPSBLVk1JKHZjcHUtPmt2bSk7CisJdTMyIG1zZ19zZXEgPSBhdG9taWNfaW5j
X3JldHVybigma3ZtaS0+ZXZfc2VxKTsKKwlpbnQgZXJyOworCisJa3ZtaV9zZXR1cF92Y3B1X3Jl
cGx5KHZjcHVpLCBtc2dfc2VxLCBycGwsIHJwbF9zaXplKTsKKworCWVyciA9IGt2bWlfZmlsbF9h
bmRfc2VudF92Y3B1X2V2ZW50KHZjcHUsIGV2X2lkLCBldiwgZXZfc2l6ZSwgbXNnX3NlcSk7CisJ
aWYgKGVycikKKwkJZ290byBvdXQ7CisKKwllcnIgPSBrdm1pX3dhaXRfZm9yX3JlcGx5KHZjcHUp
OworCWlmICghZXJyKQorCQllcnIgPSB2Y3B1aS0+cmVwbHkuZXJyb3I7CisKK291dDoKKwl2Y3B1
aS0+d2FpdGluZ19mb3JfcmVwbHkgPSBmYWxzZTsKKworCWlmIChlcnIpCisJCWt2bWlfc29ja19z
aHV0ZG93bihrdm1pKTsKKwllbHNlCisJCSphY3Rpb24gPSB2Y3B1aS0+cmVwbHkuYWN0aW9uOwor
CisJcmV0dXJuIGVycjsKK30KX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX18KVmlydHVhbGl6YXRpb24gbWFpbGluZyBsaXN0ClZpcnR1YWxpemF0aW9uQGxpc3Rz
LmxpbnV4LWZvdW5kYXRpb24ub3JnCmh0dHBzOi8vbGlzdHMubGludXhmb3VuZGF0aW9uLm9yZy9t
YWlsbWFuL2xpc3RpbmZvL3ZpcnR1YWxpemF0aW9u
