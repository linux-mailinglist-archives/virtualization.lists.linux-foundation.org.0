Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from hemlock.osuosl.org (smtp2.osuosl.org [140.211.166.133])
	by mail.lfdr.de (Postfix) with ESMTPS id 86F191978E7
	for <lists.virtualization@lfdr.de>; Mon, 30 Mar 2020 12:20:23 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by hemlock.osuosl.org (Postfix) with ESMTP id 9E203884DC;
	Mon, 30 Mar 2020 10:20:21 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from hemlock.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id ROhEliafJedM; Mon, 30 Mar 2020 10:20:15 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by hemlock.osuosl.org (Postfix) with ESMTP id A67BC884FA;
	Mon, 30 Mar 2020 10:20:13 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 9B052C1D89;
	Mon, 30 Mar 2020 10:20:13 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from whitealder.osuosl.org (smtp1.osuosl.org [140.211.166.138])
 by lists.linuxfoundation.org (Postfix) with ESMTP id ED8DEC07FF
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:57 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by whitealder.osuosl.org (Postfix) with ESMTP id E748B8757F
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:57 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from whitealder.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id 4yQw8EIVdDz0
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:54 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by whitealder.osuosl.org (Postfix) with ESMTPS id 8C7B187A2D
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:52 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp02.buh.bitdefender.net [10.17.80.76])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 75ADB305FFAB; Mon, 30 Mar 2020 13:12:57 +0300 (EEST)
Received: from localhost.localdomain (unknown [91.199.104.28])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 504E9305B7A1;
 Mon, 30 Mar 2020 13:12:57 +0300 (EEST)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v8 54/81] KVM: introspection: add KVMI_EVENT_PAUSE_VCPU
Date: Mon, 30 Mar 2020 13:12:41 +0300
Message-Id: <20200330101308.21702-55-alazar@bitdefender.com>
In-Reply-To: <20200330101308.21702-1-alazar@bitdefender.com>
References: <20200330101308.21702-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>, virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

VGhpcyBldmVudCBpcyBzZW5kIGJ5IHRoZSB2Q1BVIHRocmVhZCBhbmQgaGFzIGEgbG93IHByaW9y
aXR5LgpJdCB3aWxsIGJlIHNlbnQgYWZ0ZXIgYW55IG90aGVyIGludHJvc3BlY3Rpb24gZXZlbnQK
YW5kIHdoZW4gbm8gaW50cm9zcGVjdGlvbiBjb21tYW5kIGlzIHF1ZXVlZC4KClNpZ25lZC1vZmYt
Ynk6IEFkYWxiZXJ0IExhesSDciA8YWxhemFyQGJpdGRlZmVuZGVyLmNvbT4KLS0tCiBEb2N1bWVu
dGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0ICAgICAgICAgICAgICAgfCAgMjIgKystCiBhcmNoL3g4
Ni9rdm0va3ZtaS5jICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgODEgKysrKysrKysrCiBp
bmNsdWRlL2xpbnV4L2t2bWlfaG9zdC5oICAgICAgICAgICAgICAgICAgICAgfCAgMTEgKysKIGlu
Y2x1ZGUvdWFwaS9saW51eC9rdm1pLmggICAgICAgICAgICAgICAgICAgICB8ICAxMyArKwogLi4u
L3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMgIHwgIDQyICsrKysrCiB2
aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWkuYyAgICAgICAgICAgICAgICAgfCAgMjEgKystCiB2
aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmggICAgICAgICAgICAgfCAgIDMgKwogdmly
dC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jICAgICAgICAgICAgIHwgMTY0ICsrKysrKysr
KysrKysrKysrLQogOCBmaWxlcyBjaGFuZ2VkLCAzNTMgaW5zZXJ0aW9ucygrKSwgNCBkZWxldGlv
bnMoLSkKCmRpZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0IGIvRG9j
dW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1pLnJzdAppbmRleCA2NDJlMmYxMGFkZmQuLmQ4NDFkMjY2
YjFhOSAxMDA2NDQKLS0tIGEvRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1pLnJzdAorKysgYi9E
b2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CkBAIC01NjAsNiArNTYwLDI1IEBAIE9uIHg4
NiB0aGUgc3RydWN0dXJlIGxvb2tzIGxpa2UgdGhpczo6CiAKIEl0IGNvbnRhaW5zIGluZm9ybWF0
aW9uIGFib3V0IHRoZSB2Q1BVIHN0YXRlIGF0IHRoZSB0aW1lIG9mIHRoZSBldmVudC4KIAorQW4g
ZXZlbnQgcmVwbHkgYmVnaW5zIHdpdGggdHdvIGNvbW1vbiBzdHJ1Y3R1cmVzOjoKKworCXN0cnVj
dCBrdm1pX3ZjcHVfaGRyOworCXN0cnVjdCBrdm1pX2V2ZW50X3JlcGx5IHsKKwkJX191OCBhY3Rp
b247CisJCV9fdTggZXZlbnQ7CisJCV9fdTE2IHBhZGRpbmcxOworCQlfX3UzMiBwYWRkaW5nMjsK
Kwl9OworCitBbGwgZXZlbnRzIGFjY2VwdCB0aGUgS1ZNSV9FVkVOVF9BQ1RJT05fQ1JBU0ggYWN0
aW9uLCB3aGljaCBzdG9wcyB0aGUKK2d1ZXN0IHVuZ3JhY2VmdWxseSwgYnV0IGFzIHNvb24gYXMg
cG9zc2libGUuCisKK01vc3Qgb2YgdGhlIGV2ZW50cyBhY2NlcHQgdGhlIEtWTUlfRVZFTlRfQUNU
SU9OX0NPTlRJTlVFIGFjdGlvbiwgd2hpY2gKK2xldHMgdGhlIGluc3RydWN0aW9uIHRoYXQgY2F1
c2VkIHRoZSBldmVudCB0byBjb250aW51ZS4KKworU29tZSBvZiB0aGUgZXZlbnRzIGFjY2VwdCB0
aGUgS1ZNSV9FVkVOVF9BQ1RJT05fUkVUUlkgYWN0aW9uLCB0byBjb250aW51ZQorYnkgcmUtZW50
ZXJpbmcgdGhlIGd1ZXN0LgorCiBTcGVjaWZpYyBkYXRhIGNhbiBmb2xsb3cgdGhlc2UgY29tbW9u
IHN0cnVjdHVyZXMuCiAKIDEuIEtWTUlfRVZFTlRfVU5IT09LCkBAIC02MDEsNiArNjIwLDcgQEAg
b3BlcmF0aW9uIGNhbiBwcm9jZWVkKS4KIAlzdHJ1Y3Qga3ZtaV92Y3B1X2hkcjsKIAlzdHJ1Y3Qg
a3ZtaV9ldmVudF9yZXBseTsKIAotVGhpcyBldmVudCBpcyBzZW50IGluIHJlc3BvbnNlIHRvIGEg
KktWTUlfVkNQVV9QQVVTRSogY29tbWFuZC4KK1RoaXMgZXZlbnQgaXMgc2VudCBpbiByZXNwb25z
ZSB0byBhICpLVk1JX1ZDUFVfUEFVU0UqIGNvbW1hbmQgYW5kCitjYW5ub3QgYmUgZGlzYWJsZWQg
dmlhICpLVk1JX1ZDUFVfQ09OVFJPTF9FVkVOVFMqLgogQmVjYXVzZSBpdCBoYXMgYSBsb3cgcHJp
b3JpdHksIGl0IHdpbGwgYmUgc2VudCBhZnRlciBhbnkgb3RoZXIgdkNQVQogaW50cm9zcGVjdGlv
biBldmVudCBhbmQgd2hlbiBubyB2Q1BVIGludHJvc3BlY3Rpb24gY29tbWFuZCBpcyBxdWV1ZWQu
CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9rdm0va3ZtaS5jIGIvYXJjaC94ODYva3ZtL2t2bWkuYwpp
bmRleCAyYWZiM2FiYzk3ZmEuLjIxZmY0OGNmZGI4OSAxMDA2NDQKLS0tIGEvYXJjaC94ODYva3Zt
L2t2bWkuYworKysgYi9hcmNoL3g4Ni9rdm0va3ZtaS5jCkBAIC01LDggKzUsODkgQEAKICAqIENv
cHlyaWdodCAoQykgMjAxOS0yMDIwIEJpdGRlZmVuZGVyIFMuUi5MLgogICovCiAKKyNpbmNsdWRl
ICJsaW51eC9rdm1faG9zdC5oIgorI2luY2x1ZGUgIng4Ni5oIgogI2luY2x1ZGUgIi4uLy4uLy4u
L3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaCIKIAorc3RhdGljIHVuc2lnbmVkIGlu
dCBrdm1pX3ZjcHVfbW9kZShjb25zdCBzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsCisJCQkJICAgY29u
c3Qgc3RydWN0IGt2bV9zcmVncyAqc3JlZ3MpCit7CisJdW5zaWduZWQgaW50IG1vZGUgPSAwOwor
CisJaWYgKGlzX2xvbmdfbW9kZSgoc3RydWN0IGt2bV92Y3B1ICopIHZjcHUpKSB7CisJCWlmIChz
cmVncy0+Y3MubCkKKwkJCW1vZGUgPSA4OworCQllbHNlIGlmICghc3JlZ3MtPmNzLmRiKQorCQkJ
bW9kZSA9IDI7CisJCWVsc2UKKwkJCW1vZGUgPSA0OworCX0gZWxzZSBpZiAoc3JlZ3MtPmNyMCAm
IFg4Nl9DUjBfUEUpIHsKKwkJaWYgKCFzcmVncy0+Y3MuZGIpCisJCQltb2RlID0gMjsKKwkJZWxz
ZQorCQkJbW9kZSA9IDQ7CisJfSBlbHNlIGlmICghc3JlZ3MtPmNzLmRiKSB7CisJCW1vZGUgPSAy
OworCX0gZWxzZSB7CisJCW1vZGUgPSA0OworCX0KKworCXJldHVybiBtb2RlOworfQorCitzdGF0
aWMgdm9pZCBrdm1pX2dldF9tc3JzKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgc3RydWN0IGt2bWlf
ZXZlbnRfYXJjaCAqZXZlbnQpCit7CisJc3RydWN0IG1zcl9kYXRhIG1zcjsKKworCW1zci5ob3N0
X2luaXRpYXRlZCA9IHRydWU7CisKKwltc3IuaW5kZXggPSBNU1JfSUEzMl9TWVNFTlRFUl9DUzsK
Kwlrdm1feDg2X29wcy0+Z2V0X21zcih2Y3B1LCAmbXNyKTsKKwlldmVudC0+bXNycy5zeXNlbnRl
cl9jcyA9IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0lBMzJfU1lTRU5URVJfRVNQOwor
CWt2bV94ODZfb3BzLT5nZXRfbXNyKHZjcHUsICZtc3IpOworCWV2ZW50LT5tc3JzLnN5c2VudGVy
X2VzcCA9IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0lBMzJfU1lTRU5URVJfRUlQOwor
CWt2bV94ODZfb3BzLT5nZXRfbXNyKHZjcHUsICZtc3IpOworCWV2ZW50LT5tc3JzLnN5c2VudGVy
X2VpcCA9IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0VGRVI7CisJa3ZtX3g4Nl9vcHMt
PmdldF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQtPm1zcnMuZWZlciA9IG1zci5kYXRhOworCisJ
bXNyLmluZGV4ID0gTVNSX1NUQVI7CisJa3ZtX3g4Nl9vcHMtPmdldF9tc3IodmNwdSwgJm1zcik7
CisJZXZlbnQtPm1zcnMuc3RhciA9IG1zci5kYXRhOworCisJbXNyLmluZGV4ID0gTVNSX0xTVEFS
OworCWt2bV94ODZfb3BzLT5nZXRfbXNyKHZjcHUsICZtc3IpOworCWV2ZW50LT5tc3JzLmxzdGFy
ID0gbXNyLmRhdGE7CisKKwltc3IuaW5kZXggPSBNU1JfQ1NUQVI7CisJa3ZtX3g4Nl9vcHMtPmdl
dF9tc3IodmNwdSwgJm1zcik7CisJZXZlbnQtPm1zcnMuY3N0YXIgPSBtc3IuZGF0YTsKKworCW1z
ci5pbmRleCA9IE1TUl9JQTMyX0NSX1BBVDsKKwlrdm1feDg2X29wcy0+Z2V0X21zcih2Y3B1LCAm
bXNyKTsKKwlldmVudC0+bXNycy5wYXQgPSBtc3IuZGF0YTsKKworCW1zci5pbmRleCA9IE1TUl9L
RVJORUxfR1NfQkFTRTsKKwlrdm1feDg2X29wcy0+Z2V0X21zcih2Y3B1LCAmbXNyKTsKKwlldmVu
dC0+bXNycy5zaGFkb3dfZ3MgPSBtc3IuZGF0YTsKK30KKwordm9pZCBrdm1pX2FyY2hfc2V0dXBf
ZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtaV9ldmVudCAqZXYpCit7CisJ
c3RydWN0IGt2bWlfZXZlbnRfYXJjaCAqZXZlbnQgPSAmZXYtPmFyY2g7CisKKwlrdm1fYXJjaF92
Y3B1X2dldF9yZWdzKHZjcHUsICZldmVudC0+cmVncyk7CisJa3ZtX2FyY2hfdmNwdV9nZXRfc3Jl
Z3ModmNwdSwgJmV2ZW50LT5zcmVncyk7CisJZXYtPmFyY2gubW9kZSA9IGt2bWlfdmNwdV9tb2Rl
KHZjcHUsICZldmVudC0+c3JlZ3MpOworCWt2bWlfZ2V0X21zcnModmNwdSwgZXZlbnQpOworfQor
CiBpbnQga3ZtaV9hcmNoX2NtZF92Y3B1X2dldF9pbmZvKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwK
IAkJCQlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9pbmZvX3JlcGx5ICpycGwpCiB7CmRpZmYgLS1naXQg
YS9pbmNsdWRlL2xpbnV4L2t2bWlfaG9zdC5oIGIvaW5jbHVkZS9saW51eC9rdm1pX2hvc3QuaApp
bmRleCA5ODg5MjdjMjliZjUuLjQ5ZTY4Nzc3YTM5MCAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51
eC9rdm1pX2hvc3QuaAorKysgYi9pbmNsdWRlL2xpbnV4L2t2bWlfaG9zdC5oCkBAIC0xMSw2ICsx
MSwxNCBAQCBzdHJ1Y3Qga3ZtX3ZjcHU7CiAKICNkZWZpbmUgS1ZNSV9OVU1fQ09NTUFORFMgS1ZN
SV9OVU1fTUVTU0FHRVMKIAorc3RydWN0IGt2bWlfdmNwdV9yZXBseSB7CisJaW50IGVycm9yOwor
CWludCBhY3Rpb247CisJdTMyIHNlcTsKKwl2b2lkICpkYXRhOworCXNpemVfdCBzaXplOworfTsK
Kwogc3RydWN0IGt2bWlfam9iIHsKIAlzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7CiAJdm9pZCAqY3R4
OwpAQCAtMjUsNiArMzMsOSBAQCBzdHJ1Y3Qga3ZtX3ZjcHVfaW50cm9zcGVjdGlvbiB7CiAJc3Bp
bmxvY2tfdCBqb2JfbG9jazsKIAogCWF0b21pY190IHBhdXNlX3JlcXVlc3RzOworCisJc3RydWN0
IGt2bWlfdmNwdV9yZXBseSByZXBseTsKKwlib29sIHdhaXRpbmdfZm9yX3JlcGx5OwogfTsKIAog
c3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uIHsKZGlmZiAtLWdpdCBhL2luY2x1ZGUvdWFwaS9saW51
eC9rdm1pLmggYi9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCmluZGV4IDM4OTU0YTUyOTdkYS4u
ZTZhNDY2NzU0NmI1IDEwMDY0NAotLS0gYS9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCisrKyBi
L2luY2x1ZGUvdWFwaS9saW51eC9rdm1pLmgKQEAgLTM4LDYgKzM4LDEyIEBAIGVudW0gewogCUtW
TUlfTlVNX0VWRU5UUwogfTsKIAorZW51bSB7CisJS1ZNSV9FVkVOVF9BQ1RJT05fQ09OVElOVUUg
PSAwLAorCUtWTUlfRVZFTlRfQUNUSU9OX1JFVFJZICAgID0gMSwKKwlLVk1JX0VWRU5UX0FDVElP
Tl9DUkFTSCAgICA9IDIsCit9OworCiBzdHJ1Y3Qga3ZtaV9tc2dfaGRyIHsKIAlfX3UxNiBpZDsK
IAlfX3UxNiBzaXplOwpAQCAtMTI1LDQgKzEzMSwxMSBAQCBzdHJ1Y3Qga3ZtaV9ldmVudCB7CiAJ
c3RydWN0IGt2bWlfZXZlbnRfYXJjaCBhcmNoOwogfTsKIAorc3RydWN0IGt2bWlfZXZlbnRfcmVw
bHkgeworCV9fdTggYWN0aW9uOworCV9fdTggZXZlbnQ7CisJX191MTYgcGFkZGluZzE7CisJX191
MzIgcGFkZGluZzI7Cit9OworCiAjZW5kaWYgLyogX1VBUElfX0xJTlVYX0tWTUlfSCAqLwpkaWZm
IC0tZ2l0IGEvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYyBi
L3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKaW5kZXggYmM4
NGQ0NzhmZjZiLi45OTBjNzhhN2FmMGEgMTAwNjQ0Ci0tLSBhL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRl
c3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKKysrIGIvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMv
a3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYwpAQCAtMzQsNiArMzQsMTIgQEAgc3RhdGljIHZtX3BhZGRy
X3QgdGVzdF9ncGE7CiBzdGF0aWMgdWludDhfdCB0ZXN0X3dyaXRlX3BhdHRlcm47CiBzdGF0aWMg
aW50IHBhZ2Vfc2l6ZTsKIAorc3RydWN0IHZjcHVfcmVwbHkgeworCXN0cnVjdCBrdm1pX21zZ19o
ZHIgaGRyOworCXN0cnVjdCBrdm1pX3ZjcHVfaGRyIHZjcHVfaGRyOworCXN0cnVjdCBrdm1pX2V2
ZW50X3JlcGx5IHJlcGx5OworfTsKKwogc3RydWN0IHZjcHVfd29ya2VyX2RhdGEgewogCXN0cnVj
dCBrdm1fdm0gKnZtOwogCWludCB2Y3B1X2lkOwpAQCAtNjgwLDkgKzY4Niw0NSBAQCBzdGF0aWMg
dm9pZCBwYXVzZV92Y3B1KHN0cnVjdCBrdm1fdm0gKnZtKQogCQktciwga3ZtX3N0cmVycm9yKC1y
KSk7CiB9CiAKK3N0YXRpYyB2b2lkIHJlcGx5X3RvX2V2ZW50KHN0cnVjdCBrdm1pX21zZ19oZHIg
KmV2X2hkciwgc3RydWN0IGt2bWlfZXZlbnQgKmV2LAorCQkJICAgX191OCBhY3Rpb24sIHN0cnVj
dCB2Y3B1X3JlcGx5ICpycGwsIHNpemVfdCBycGxfc2l6ZSkKK3sKKwlzc2l6ZV90IHI7CisKKwly
cGwtPmhkci5pZCA9IGV2X2hkci0+aWQ7CisJcnBsLT5oZHIuc2VxID0gZXZfaGRyLT5zZXE7CisJ
cnBsLT5oZHIuc2l6ZSA9IHJwbF9zaXplIC0gc2l6ZW9mKHJwbC0+aGRyKTsKKworCXJwbC0+dmNw
dV9oZHIudmNwdSA9IGV2LT52Y3B1OworCisJcnBsLT5yZXBseS5hY3Rpb24gPSBhY3Rpb247CisJ
cnBsLT5yZXBseS5ldmVudCA9IGV2LT5ldmVudDsKKworCXIgPSBzZW5kKFVzZXJzcGFjZV9zb2Nr
ZXQsIHJwbCwgcnBsX3NpemUsIDApOworCVRFU1RfQVNTRVJUKHIgPT0gcnBsX3NpemUsCisJCSJz
ZW5kKCkgZmFpbGVkLCBzZW5kaW5nICVkLCByZXN1bHQgJWQsIGVycm5vICVkICglcylcbiIsCisJ
CXJwbF9zaXplLCByLCBlcnJubywgc3RyZXJyb3IoZXJybm8pKTsKK30KKwogc3RhdGljIHZvaWQg
dGVzdF9wYXVzZShzdHJ1Y3Qga3ZtX3ZtICp2bSkKIHsKKwlzdHJ1Y3QgdmNwdV93b3JrZXJfZGF0
YSBkYXRhID0gey52bSA9IHZtLCAudmNwdV9pZCA9IFZDUFVfSUR9OworCV9fdTE2IGV2ZW50X2lk
ID0gS1ZNSV9FVkVOVF9QQVVTRV9WQ1BVOworCXN0cnVjdCB2Y3B1X3JlcGx5IHJwbCA9IHt9Owor
CXN0cnVjdCBrdm1pX21zZ19oZHIgaGRyOworCXB0aHJlYWRfdCB2Y3B1X3RocmVhZDsKKwlzdHJ1
Y3Qga3ZtaV9ldmVudCBldjsKKwogCXBhdXNlX3ZjcHUodm0pOworCisJdmNwdV90aHJlYWQgPSBz
dGFydF92Y3B1X3dvcmtlcigmZGF0YSk7CisKKwlyZWNlaXZlX2V2ZW50KCZoZHIsICZldiwgc2l6
ZW9mKGV2KSwgZXZlbnRfaWQpOworCisJcmVwbHlfdG9fZXZlbnQoJmhkciwgJmV2LCBLVk1JX0VW
RU5UX0FDVElPTl9DT05USU5VRSwKKwkJCSZycGwsIHNpemVvZihycGwpKTsKKworCXN0b3BfdmNw
dV93b3JrZXIodmNwdV90aHJlYWQsICZkYXRhKTsKIH0KIAogc3RhdGljIHZvaWQgdGVzdF9pbnRy
b3NwZWN0aW9uKHN0cnVjdCBrdm1fdm0gKnZtKQpkaWZmIC0tZ2l0IGEvdmlydC9rdm0vaW50cm9z
cGVjdGlvbi9rdm1pLmMgYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWkuYwppbmRleCBjNGRh
MjY0YWQ1YTYuLjJiOGU2OTEwZTU3YiAxMDA2NDQKLS0tIGEvdmlydC9rdm0vaW50cm9zcGVjdGlv
bi9rdm1pLmMKKysrIGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMKQEAgLTMxNiw2ICsz
MTYsNyBAQCBzdGF0aWMgdm9pZCBrdm1pX2pvYl9yZWxlYXNlX3ZjcHUoc3RydWN0IGt2bV92Y3B1
ICp2Y3B1LCB2b2lkICpjdHgpCiAJc3RydWN0IGt2bV92Y3B1X2ludHJvc3BlY3Rpb24gKnZjcHVp
ID0gVkNQVUkodmNwdSk7CiAKIAlhdG9taWNfc2V0KCZ2Y3B1aS0+cGF1c2VfcmVxdWVzdHMsIDAp
OworCXZjcHVpLT53YWl0aW5nX2Zvcl9yZXBseSA9IGZhbHNlOwogfQogCiBzdGF0aWMgdm9pZCBr
dm1pX3JlbGVhc2VfdmNwdXMoc3RydWN0IGt2bSAqa3ZtKQpAQCAtNzA2LDEyICs3MDcsMzAgQEAg
dm9pZCBrdm1pX3J1bl9qb2JzKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKIAl9CiB9CiAKK3ZvaWQg
a3ZtaV9oYW5kbGVfY29tbW9uX2V2ZW50X2FjdGlvbnMoc3RydWN0IGt2bSAqa3ZtLAorCQkJCSAg
ICAgIHUzMiBhY3Rpb24sIGNvbnN0IGNoYXIgKnN0cikKK3sKKwlzd2l0Y2ggKGFjdGlvbikgewor
CWRlZmF1bHQ6CisJCWt2bWlfZXJyKEtWTUkoa3ZtKSwgIlVuc3VwcG9ydGVkIGFjdGlvbiAlZCBm
b3IgZXZlbnQgJXNcbiIsCisJCQkgYWN0aW9uLCBzdHIpOworCX0KK30KKwogc3RhdGljIHZvaWQg
a3ZtaV92Y3B1X3BhdXNlX2V2ZW50KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKIHsKIAlzdHJ1Y3Qg
a3ZtX3ZjcHVfaW50cm9zcGVjdGlvbiAqdmNwdWkgPSBWQ1BVSSh2Y3B1KTsKKwl1MzIgYWN0aW9u
OwogCiAJYXRvbWljX2RlYygmdmNwdWktPnBhdXNlX3JlcXVlc3RzKTsKLQkvKiB0byBiZSBpbXBs
ZW1lbnRlZCAqLworCisJYWN0aW9uID0ga3ZtaV9tc2dfc2VuZF92Y3B1X3BhdXNlKHZjcHUpOwor
CXN3aXRjaCAoYWN0aW9uKSB7CisJY2FzZSBLVk1JX0VWRU5UX0FDVElPTl9DT05USU5VRToKKwkJ
YnJlYWs7CisJZGVmYXVsdDoKKwkJa3ZtaV9oYW5kbGVfY29tbW9uX2V2ZW50X2FjdGlvbnModmNw
dS0+a3ZtLCBhY3Rpb24sICJQQVVTRSIpOworCX0KIH0KIAogdm9pZCBrdm1pX2hhbmRsZV9yZXF1
ZXN0cyhzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUpCmRpZmYgLS1naXQgYS92aXJ0L2t2bS9pbnRyb3Nw
ZWN0aW9uL2t2bWlfaW50LmggYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmgKaW5k
ZXggYmQ5NjhlODM3YTU0Li44ZmU3NGIzMmE1ZjYgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2ludHJv
c3BlY3Rpb24va3ZtaV9pbnQuaAorKysgYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50
LmgKQEAgLTI4LDYgKzI4LDcgQEAgdm9pZCBrdm1pX3NvY2tfc2h1dGRvd24oc3RydWN0IGt2bV9p
bnRyb3NwZWN0aW9uICprdm1pKTsKIHZvaWQga3ZtaV9zb2NrX3B1dChzdHJ1Y3Qga3ZtX2ludHJv
c3BlY3Rpb24gKmt2bWkpOwogYm9vbCBrdm1pX21zZ19wcm9jZXNzKHN0cnVjdCBrdm1faW50cm9z
cGVjdGlvbiAqa3ZtaSk7CiBpbnQga3ZtaV9tc2dfc2VuZF91bmhvb2soc3RydWN0IGt2bV9pbnRy
b3NwZWN0aW9uICprdm1pKTsKK3UzMiBrdm1pX21zZ19zZW5kX3ZjcHVfcGF1c2Uoc3RydWN0IGt2
bV92Y3B1ICp2Y3B1KTsKIAogLyoga3ZtaS5jICovCiB2b2lkICprdm1pX21zZ19hbGxvYyh2b2lk
KTsKQEAgLTM1LDYgKzM2LDcgQEAgdm9pZCBrdm1pX21zZ19mcmVlKHZvaWQgKmFkZHIpOwogaW50
IGt2bWlfYWRkX2pvYihzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsCiAJCSB2b2lkICgqZmN0KShzdHJ1
Y3Qga3ZtX3ZjcHUgKnZjcHUsIHZvaWQgKmN0eCksCiAJCSB2b2lkICpjdHgsIHZvaWQgKCpmcmVl
X2ZjdCkodm9pZCAqY3R4KSk7Cit2b2lkIGt2bWlfcnVuX2pvYnMoc3RydWN0IGt2bV92Y3B1ICp2
Y3B1KTsKIGludCBrdm1pX2NtZF92bV9jb250cm9sX2V2ZW50cyhzdHJ1Y3Qga3ZtX2ludHJvc3Bl
Y3Rpb24gKmt2bWksCiAJCQkJdW5zaWduZWQgaW50IGV2ZW50X2lkLCBib29sIGVuYWJsZSk7CiBp
bnQga3ZtaV9jbWRfcmVhZF9waHlzaWNhbChzdHJ1Y3Qga3ZtICprdm0sIHU2NCBncGEsIHNpemVf
dCBzaXplLApAQCAtNDksNSArNTEsNiBAQCBpbnQga3ZtaV9jbWRfdmNwdV9wYXVzZShzdHJ1Y3Qg
a3ZtX3ZjcHUgKnZjcHUsIGJvb2wgd2FpdCk7CiAvKiBhcmNoICovCiBpbnQga3ZtaV9hcmNoX2Nt
ZF92Y3B1X2dldF9pbmZvKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKIAkJCQlzdHJ1Y3Qga3ZtaV92
Y3B1X2dldF9pbmZvX3JlcGx5ICpycGwpOwordm9pZCBrdm1pX2FyY2hfc2V0dXBfZXZlbnQoc3Ry
dWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtaV9ldmVudCAqZXYpOwogCiAjZW5kaWYKZGlm
ZiAtLWdpdCBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYyBiL3ZpcnQva3ZtL2lu
dHJvc3BlY3Rpb24va3ZtaV9tc2cuYwppbmRleCA3NzJiYTFkN2Q5ZGYuLmE1NjkyNmYyMmJjNiAx
MDA2NDQKLS0tIGEvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jCisrKyBiL3ZpcnQv
a3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9tc2cuYwpAQCAtMjAsNiArMjAsNyBAQCBzdHJ1Y3Qga3Zt
aV92Y3B1X2NtZF9qb2IgewogfTsKIAogc3RhdGljIGNvbnN0IGNoYXIgKmNvbnN0IG1zZ19JRHNb
XSA9IHsKKwlbS1ZNSV9FVkVOVF0gICAgICAgICAgICAgPSAiS1ZNSV9FVkVOVCIsCiAJW0tWTUlf
R0VUX1ZFUlNJT05dICAgICAgID0gIktWTUlfR0VUX1ZFUlNJT04iLAogCVtLVk1JX1ZNX0NIRUNL
X0NPTU1BTkRdICA9ICJLVk1JX1ZNX0NIRUNLX0NPTU1BTkQiLAogCVtLVk1JX1ZNX0NIRUNLX0VW
RU5UXSAgICA9ICJLVk1JX1ZNX0NIRUNLX0VWRU5UIiwKQEAgLTM3Myw2ICszNzQsNzQgQEAgc3Rh
dGljIGludCBoYW5kbGVfZ2V0X3ZjcHVfaW5mbyhjb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X2NtZF9q
b2IgKmpvYiwKIAlyZXR1cm4ga3ZtaV9tc2dfdmNwdV9yZXBseShqb2IsIG1zZywgMCwgJnJwbCwg
c2l6ZW9mKHJwbCkpOwogfQogCitzdGF0aWMgaW50IGNoZWNrX2V2ZW50X3JlcGx5KGNvbnN0IHN0
cnVjdCBrdm1pX21zZ19oZHIgKm1zZywKKwkJCSAgICAgY29uc3Qgc3RydWN0IGt2bWlfZXZlbnRf
cmVwbHkgKnJlcGx5LAorCQkJICAgICBjb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X3JlcGx5ICpleHBl
Y3RlZCwKKwkJCSAgICAgdTggKmFjdGlvbiwgc2l6ZV90ICpyZWNlaXZlZCkKK3sKKwlzaXplX3Qg
bXNnX3NpemUsIGNvbW1vbiwgZXZlbnRfc2l6ZTsKKwlpbnQgZXJyID0gLUVJTlZBTDsKKworCWlm
ICh1bmxpa2VseShtc2ctPnNlcSAhPSBleHBlY3RlZC0+c2VxKSkKKwkJcmV0dXJuIGVycjsKKwor
CW1zZ19zaXplID0gbXNnLT5zaXplOworCWNvbW1vbiA9IHNpemVvZihzdHJ1Y3Qga3ZtaV92Y3B1
X2hkcikgKyBzaXplb2YoKnJlcGx5KTsKKworCWlmIChjaGVja19zdWJfb3ZlcmZsb3cobXNnX3Np
emUsIGNvbW1vbiwgJmV2ZW50X3NpemUpKQorCQlyZXR1cm4gZXJyOworCisJaWYgKHVubGlrZWx5
KGV2ZW50X3NpemUgPiBleHBlY3RlZC0+c2l6ZSkpCisJCXJldHVybiBlcnI7CisKKwlpZiAodW5s
aWtlbHkocmVwbHktPnBhZGRpbmcxIHx8IHJlcGx5LT5wYWRkaW5nMikpCisJCXJldHVybiBlcnI7
CisKKwkqcmVjZWl2ZWQgPSBldmVudF9zaXplOworCSphY3Rpb24gPSByZXBseS0+YWN0aW9uOwor
CXJldHVybiAwOworfQorCitzdGF0aWMgaW50IGhhbmRsZV9ldmVudF9yZXBseShjb25zdCBzdHJ1
Y3Qga3ZtaV92Y3B1X2NtZF9qb2IgKmpvYiwKKwkJCSAgICAgIGNvbnN0IHN0cnVjdCBrdm1pX21z
Z19oZHIgKm1zZywgY29uc3Qgdm9pZCAqcnBsKQoreworCXN0cnVjdCBrdm1fdmNwdV9pbnRyb3Nw
ZWN0aW9uICp2Y3B1aSA9IFZDUFVJKGpvYi0+dmNwdSk7CisJc3RydWN0IGt2bWlfdmNwdV9yZXBs
eSAqZXhwZWN0ZWQgPSAmdmNwdWktPnJlcGx5OworCWNvbnN0IHN0cnVjdCBrdm1pX2V2ZW50X3Jl
cGx5ICpyZXBseSA9IHJwbDsKKwljb25zdCB2b2lkICpyZXBseV9kYXRhID0gcmVwbHkgKyAxOwor
CXNpemVfdCB1c2VmdWwsIHJlY2VpdmVkOworCXU4IGFjdGlvbjsKKworCWlmICh1bmxpa2VseSgh
dmNwdWktPndhaXRpbmdfZm9yX3JlcGx5KSkgeworCQlleHBlY3RlZC0+ZXJyb3IgPSAtRUlOVFI7
CisJCWdvdG8gb3V0OworCX0KKworCWV4cGVjdGVkLT5lcnJvciA9IGNoZWNrX2V2ZW50X3JlcGx5
KG1zZywgcmVwbHksIGV4cGVjdGVkLCAmYWN0aW9uLAorCQkJCQkgICAgJnJlY2VpdmVkKTsKKwlp
ZiAodW5saWtlbHkoZXhwZWN0ZWQtPmVycm9yKSkgeworCQlrdm1pX2VycihLVk1JKGpvYi0+dmNw
dS0+a3ZtKSwKKwkJCSAiSW52YWxpZCBldmVudCByZXBseSAlZCBzZXEgJXhcbiIsCisJCQkgcmVw
bHktPmV2ZW50LCBtc2ctPnNlcSk7CisJCWdvdG8gb3V0OworCX0KKworCXVzZWZ1bCA9IG1pbihy
ZWNlaXZlZCwgZXhwZWN0ZWQtPnNpemUpOworCWlmICh1c2VmdWwpCisJCW1lbWNweShleHBlY3Rl
ZC0+ZGF0YSwgcmVwbHlfZGF0YSwgdXNlZnVsKTsKKworCWlmIChleHBlY3RlZC0+c2l6ZSA+IHVz
ZWZ1bCkKKwkJbWVtc2V0KChjaGFyICopZXhwZWN0ZWQtPmRhdGEgKyB1c2VmdWwsIDAsCisJCQll
eHBlY3RlZC0+c2l6ZSAtIHVzZWZ1bCk7CisKKwlleHBlY3RlZC0+YWN0aW9uID0gYWN0aW9uOwor
CWV4cGVjdGVkLT5lcnJvciA9IDA7CisKK291dDoKKwl2Y3B1aS0+d2FpdGluZ19mb3JfcmVwbHkg
PSBmYWxzZTsKKwlyZXR1cm4gZXhwZWN0ZWQtPmVycm9yOworfQorCiAvKgogICogVGhlc2UgY29t
bWFuZHMgYXJlIGV4ZWN1dGVkIGZyb20gdGhlIHZDUFUgdGhyZWFkLiBUaGUgcmVjZWl2aW5nIHRo
cmVhZAogICogcGFzc2VzIHRoZSBtZXNzYWdlcyB1c2luZyBhIG5ld2x5IGFsbG9jYXRlZCAnc3Ry
dWN0IGt2bWlfdmNwdV9jbWRfam9iJwpAQCAtMzgxLDYgKzQ1MCw3IEBAIHN0YXRpYyBpbnQgaGFu
ZGxlX2dldF92Y3B1X2luZm8oY29uc3Qgc3RydWN0IGt2bWlfdmNwdV9jbWRfam9iICpqb2IsCiAg
Ki8KIHN0YXRpYyBpbnQoKmNvbnN0IG1zZ192Y3B1W10pKGNvbnN0IHN0cnVjdCBrdm1pX3ZjcHVf
Y21kX2pvYiAqLAogCQkJICAgICAgY29uc3Qgc3RydWN0IGt2bWlfbXNnX2hkciAqLCBjb25zdCB2
b2lkICopID0geworCVtLVk1JX0VWRU5UXSAgICAgICAgID0gaGFuZGxlX2V2ZW50X3JlcGx5LAog
CVtLVk1JX1ZDUFVfR0VUX0lORk9dID0gaGFuZGxlX2dldF92Y3B1X2luZm8sCiB9OwogCkBAIC00
NjYsNyArNTM2LDcgQEAgc3RhdGljIGludCBrdm1pX21zZ19kaXNwYXRjaF92bV9jbWQoc3RydWN0
IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pLAogCiBzdGF0aWMgYm9vbCBpc19tZXNzYWdlX2FsbG93
ZWQoc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pLCB1MTYgaWQpCiB7Ci0JcmV0dXJuIGlz
X2NvbW1hbmRfYWxsb3dlZChrdm1pLCBpZCk7CisJcmV0dXJuIGlkID09IEtWTUlfRVZFTlQgfHwg
aXNfY29tbWFuZF9hbGxvd2VkKGt2bWksIGlkKTsKIH0KIAogc3RhdGljIGludCBrdm1pX21zZ192
bV9yZXBseV9lYyhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWksCkBAIC00NzcsNyArNTQ3
LDggQEAgc3RhdGljIGludCBrdm1pX21zZ192bV9yZXBseV9lYyhzdHJ1Y3Qga3ZtX2ludHJvc3Bl
Y3Rpb24gKmt2bWksCiAKIHN0YXRpYyBib29sIHZjcHVfY2FuX2hhbmRsZV9jb21tYW5kcyhzdHJ1
Y3Qga3ZtX3ZjcHUgKnZjcHUpCiB7Ci0JcmV0dXJuIHZjcHUtPmFyY2gubXBfc3RhdGUgIT0gS1ZN
X01QX1NUQVRFX1VOSU5JVElBTElaRUQ7CisJcmV0dXJuIFZDUFVJKHZjcHUpLT53YWl0aW5nX2Zv
cl9yZXBseQorCQl8fCB2Y3B1LT5hcmNoLm1wX3N0YXRlICE9IEtWTV9NUF9TVEFURV9VTklOSVRJ
QUxJWkVEOwogfQogCiBzdGF0aWMgYm9vbCBrdm1pX2dldF92Y3B1X2lmX3JlYWR5KHN0cnVjdCBr
dm1faW50cm9zcGVjdGlvbiAqa3ZtaSwKQEAgLTU4NCw2ICs2NTUsMTMgQEAgc3RhdGljIHZvaWQg
a3ZtaV9zZXR1cF9ldmVudF9jb21tb24oc3RydWN0IGt2bWlfZXZlbnQgKmV2LCB1MzIgZXZfaWQs
CiAJZXYtPnNpemUgPSBzaXplb2YoKmV2KTsKIH0KIAorc3RhdGljIHZvaWQga3ZtaV9zZXR1cF9l
dmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1pX2V2ZW50ICpldiwKKwkJCSAg
ICAgdTMyIGV2X2lkKQoreworCWt2bWlfc2V0dXBfZXZlbnRfY29tbW9uKGV2LCBldl9pZCwga3Zt
X3ZjcHVfZ2V0X2lkeCh2Y3B1KSk7CisJa3ZtaV9hcmNoX3NldHVwX2V2ZW50KHZjcHUsIGV2KTsK
K30KKwogaW50IGt2bWlfbXNnX3NlbmRfdW5ob29rKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAq
a3ZtaSkKIHsKIAlzdHJ1Y3Qga3ZtaV9tc2dfaGRyIGhkcjsKQEAgLTYwMCwzICs2NzgsODUgQEAg
aW50IGt2bWlfbXNnX3NlbmRfdW5ob29rKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSkK
IAogCXJldHVybiBrdm1pX3NvY2tfd3JpdGUoa3ZtaSwgdmVjLCBuLCBtc2dfc2l6ZSk7CiB9CisK
K3N0YXRpYyBpbnQga3ZtaV93YWl0X2Zvcl9yZXBseShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUpCit7
CisJc3RydWN0IHN3YWl0X3F1ZXVlX2hlYWQgKndxID0ga3ZtX2FyY2hfdmNwdV93cSh2Y3B1KTsK
KwlzdHJ1Y3Qga3ZtX3ZjcHVfaW50cm9zcGVjdGlvbiAqdmNwdWkgPSBWQ1BVSSh2Y3B1KTsKKwlp
bnQgZXJyID0gMDsKKworCXdoaWxlICh2Y3B1aS0+d2FpdGluZ19mb3JfcmVwbHkgJiYgIWVycikg
eworCQlrdm1pX3J1bl9qb2JzKHZjcHUpOworCisJCWVyciA9IHN3YWl0X2V2ZW50X2tpbGxhYmxl
X2V4Y2x1c2l2ZSgqd3EsCisJCQkhdmNwdWktPndhaXRpbmdfZm9yX3JlcGx5IHx8CisJCQkhbGlz
dF9lbXB0eSgmdmNwdWktPmpvYl9saXN0KSk7CisJfQorCisJcmV0dXJuIGVycjsKK30KKworc3Rh
dGljIHZvaWQga3ZtaV9zZXR1cF92Y3B1X3JlcGx5KHN0cnVjdCBrdm1fdmNwdV9pbnRyb3NwZWN0
aW9uICp2Y3B1aSwKKwkJCQkgIHUzMiBldmVudF9zZXEsIHZvaWQgKnJwbCwgc2l6ZV90IHJwbF9z
aXplKQoreworCW1lbXNldCgmdmNwdWktPnJlcGx5LCAwLCBzaXplb2YodmNwdWktPnJlcGx5KSk7
CisKKwl2Y3B1aS0+cmVwbHkuc2VxID0gZXZlbnRfc2VxOworCXZjcHVpLT5yZXBseS5kYXRhID0g
cnBsOworCXZjcHVpLT5yZXBseS5zaXplID0gcnBsX3NpemU7CisJdmNwdWktPnJlcGx5LmVycm9y
ID0gLUVJTlRSOworCXZjcHVpLT53YWl0aW5nX2Zvcl9yZXBseSA9IHRydWU7Cit9CisKK3N0YXRp
YyBpbnQga3ZtaV9zZW5kX2V2ZW50KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdTMyIGV2X2lkLAor
CQkJICAgdm9pZCAqZXYsIHNpemVfdCBldl9zaXplLAorCQkJICAgdm9pZCAqcnBsLCBzaXplX3Qg
cnBsX3NpemUsIGludCAqYWN0aW9uKQoreworCXN0cnVjdCBrdm1pX21zZ19oZHIgaGRyOworCXN0
cnVjdCBrdm1pX2V2ZW50IGNvbW1vbjsKKwlzdHJ1Y3Qga3ZlYyB2ZWNbXSA9IHsKKwkJey5pb3Zf
YmFzZSA9ICZoZHIsCS5pb3ZfbGVuID0gc2l6ZW9mKGhkcikJIH0sCisJCXsuaW92X2Jhc2UgPSAm
Y29tbW9uLAkuaW92X2xlbiA9IHNpemVvZihjb21tb24pfSwKKwkJey5pb3ZfYmFzZSA9IGV2LAku
aW92X2xlbiA9IGV2X3NpemUJIH0sCisJfTsKKwlzaXplX3QgbXNnX3NpemUgPSBzaXplb2YoaGRy
KSArIHNpemVvZihjb21tb24pICsgZXZfc2l6ZTsKKwlzaXplX3QgbiA9IGV2X3NpemUgPyBBUlJB
WV9TSVpFKHZlYykgOiBBUlJBWV9TSVpFKHZlYyktMTsKKwlzdHJ1Y3Qga3ZtX3ZjcHVfaW50cm9z
cGVjdGlvbiAqdmNwdWkgPSBWQ1BVSSh2Y3B1KTsKKwlzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24g
Kmt2bWkgPSBLVk1JKHZjcHUtPmt2bSk7CisJaW50IGVycjsKKworCWt2bWlfc2V0dXBfZXZlbnRf
bXNnX2hkcihrdm1pLCAmaGRyLCBtc2dfc2l6ZSk7CisJa3ZtaV9zZXR1cF9ldmVudCh2Y3B1LCAm
Y29tbW9uLCBldl9pZCk7CisJa3ZtaV9zZXR1cF92Y3B1X3JlcGx5KHZjcHVpLCBoZHIuc2VxLCBy
cGwsIHJwbF9zaXplKTsKKworCWVyciA9IGt2bWlfc29ja193cml0ZShrdm1pLCB2ZWMsIG4sIG1z
Z19zaXplKTsKKwlpZiAoZXJyKQorCQlnb3RvIG91dDsKKworCWVyciA9IGt2bWlfd2FpdF9mb3Jf
cmVwbHkodmNwdSk7CisJaWYgKGVycikKKwkJZ290byBvdXQ7CisKKwllcnIgPSB2Y3B1aS0+cmVw
bHkuZXJyb3I7CisJaWYgKGVycikKKwkJZ290byBvdXQ7CisKKwkqYWN0aW9uID0gdmNwdWktPnJl
cGx5LmFjdGlvbjsKKworb3V0OgorCWlmIChlcnIpCisJCWt2bWlfc29ja19zaHV0ZG93bihrdm1p
KTsKKwlyZXR1cm4gZXJyOworfQorCit1MzIga3ZtaV9tc2dfc2VuZF92Y3B1X3BhdXNlKHN0cnVj
dCBrdm1fdmNwdSAqdmNwdSkKK3sKKwlpbnQgZXJyLCBhY3Rpb247CisKKwllcnIgPSBrdm1pX3Nl
bmRfZXZlbnQodmNwdSwgS1ZNSV9FVkVOVF9QQVVTRV9WQ1BVLCBOVUxMLCAwLAorCQkJICAgICAg
TlVMTCwgMCwgJmFjdGlvbik7CisJaWYgKGVycikKKwkJcmV0dXJuIEtWTUlfRVZFTlRfQUNUSU9O
X0NPTlRJTlVFOworCisJcmV0dXJuIGFjdGlvbjsKK30KX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX18KVmlydHVhbGl6YXRpb24gbWFpbGluZyBsaXN0ClZpcnR1
YWxpemF0aW9uQGxpc3RzLmxpbnV4LWZvdW5kYXRpb24ub3JnCmh0dHBzOi8vbGlzdHMubGludXhm
b3VuZGF0aW9uLm9yZy9tYWlsbWFuL2xpc3RpbmZvL3ZpcnR1YWxpemF0aW9u
