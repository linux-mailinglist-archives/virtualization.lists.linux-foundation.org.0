Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
	by mail.lfdr.de (Postfix) with ESMTPS id 2F2C6155E02
	for <lists.virtualization@lfdr.de>; Fri,  7 Feb 2020 19:26:23 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by fraxinus.osuosl.org (Postfix) with ESMTP id CF7A6869DD;
	Fri,  7 Feb 2020 18:26:21 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id EPcX0IP0530M; Fri,  7 Feb 2020 18:26:20 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by fraxinus.osuosl.org (Postfix) with ESMTP id DA3AB86A33;
	Fri,  7 Feb 2020 18:26:03 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id BC9DDC013E;
	Fri,  7 Feb 2020 18:26:03 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 7FD71C1D88
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:58 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by silver.osuosl.org (Postfix) with ESMTP id 657682265B
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:58 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id EvLcPZB5yttj
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:58 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by silver.osuosl.org (Postfix) with ESMTPS id 932B122654
 for <virtualization@lists.linux-foundation.org>;
 Fri,  7 Feb 2020 18:25:57 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp01.buh.bitdefender.com [10.17.80.75])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 666BA305D345; Fri,  7 Feb 2020 20:16:40 +0200 (EET)
Received: from host.bbu.bitdefender.biz (unknown [195.210.4.22])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 591B73052067;
 Fri,  7 Feb 2020 20:16:40 +0200 (EET)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [RFC PATCH v7 39/78] KVM: introspection: add the read/dispatch
 message function
Date: Fri,  7 Feb 2020 20:15:57 +0200
Message-Id: <20200207181636.1065-40-alazar@bitdefender.com>
In-Reply-To: <20200207181636.1065-1-alazar@bitdefender.com>
References: <20200207181636.1065-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 Sean Christopherson <sean.j.christopherson@intel.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

QmFzZWQgb24gdGhlIGNvbW1vbiBoZWFkZXIgKHN0cnVjdCBrdm1pX21zZ19oZHIpLCB0aGUgcmVj
ZWl2aW5nIHRocmVhZAp3aWxsIHJlYWQvdmFsaWRhdGUgYWxsIG1lc3NhZ2VzLCBleGVjdXRlIHRo
ZSBWTSBpbnRyb3NwZWN0aW9uIGNvbW1hbmRzCihlZy4gS1ZNSV9WTV9HRVRfSU5GTykgYW5kIGRp
c3BhdGNoIHRoZSB2Q1BVIGludHJvc3BlY3Rpb24gY29tbWFuZHMKKGVnLiBLVk1JX1ZDUFVfR0VU
X1JFR0lTVEVSUykgYW5kIHRoZSByZXBsaWVzIHRvIHZDUFUgZXZlbnRzLgoKVGhlIHZDUFUgdGhy
ZWFkcyB3aWxsIHJlcGx5IHRvIHZDUFUgaW50cm9zcGVjdGlvbiBjb21tYW5kcyB3aXRob3V0IHRo
ZQpoZWxwIG9mIHRoZSByZWNlaXZpbmcgdGhyZWFkLgoKVGhpcyB0aHJlYWQgd2lsbCBlbmQgd2hl
biB0aGUgc29ja2V0IGlzIGNsb3NlZCAoYnkgdXNlcnNwYWNlIG9yIHRoZQppbnRyb3NwZWN0aW9u
IHRvb2wpIG9yIG9uIHRoZSBmaXJzdCBBUEkgZXJyb3IgKGVnLiB3cm9uZyBtZXNzYWdlIHNpemUp
LgoKU2lnbmVkLW9mZi1ieTogQWRhbGJlcnQgTGF6xINyIDxhbGF6YXJAYml0ZGVmZW5kZXIuY29t
PgotLS0KIERvY3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QgICAgICAgICAgICAgICB8ICA4
NiArKysrKysrCiBpbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oICAgICAgICAgICAgICAgICAgICAg
fCAgMTUgKysKIC4uLi90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jICB8
IDEwMCArKysrKysrKwogdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMgICAgICAgICAgICAg
ICAgIHwgIDQzICsrKy0KIHZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaCAgICAgICAg
ICAgICB8ICAgNyArCiB2aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMgICAgICAgICAg
ICAgfCAyMjQgKysrKysrKysrKysrKysrKystCiA2IGZpbGVzIGNoYW5nZWQsIDQ3MyBpbnNlcnRp
b25zKCspLCAyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vdmlydC9r
dm0va3ZtaS5yc3QgYi9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CmluZGV4IGFmNjg1
ZTgzN2I0Yi4uNGFhNzdhZTBjM2M1IDEwMDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL3ZpcnQva3Zt
L2t2bWkucnN0CisrKyBiL0RvY3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QKQEAgLTY0LDYg
KzY0LDg1IEBAIGFuIGFuc3dlciBmcm9tIGl0cyBwZWVyIGluZGVmaW5pdGVseSBvciB1bnRpbCB0
aGUgZ3Vlc3QgaXMgcG93ZXJlZCBvZmYKIGNhbiByZWFsbHkgY29udGludWUgbm9ybWFsIGV4ZWN1
dGlvbiBkZXBlbmRzIG9uIHdoZXRoZXIgdGhlIGludHJvc3BlY3Rpb24KIHRvb2wgaGFzIG1hZGUg
YW55IG1vZGlmaWNhdGlvbnMgdGhhdCByZXF1aXJlIGFuIGFjdGl2ZSBLVk1JIGNoYW5uZWwuCiAK
K0FsbCBtZXNzYWdlcyAoY29tbWFuZHMgb3IgZXZlbnRzKSBoYXZlIGEgY29tbW9uIGhlYWRlcjo6
CisKKwlzdHJ1Y3Qga3ZtaV9tc2dfaGRyIHsKKwkJX191MTYgaWQ7CisJCV9fdTE2IHNpemU7CisJ
CV9fdTMyIHNlcTsKKwl9OworCitUaGUgcmVwbGllcyBoYXZlIHRoZSBzYW1lIGhlYWRlciwgd2l0
aCB0aGUgc2VxdWVuY2UgbnVtYmVyIChgYHNlcWBgKQorYW5kIG1lc3NhZ2UgaWQgKGBgaWRgYCkg
bWF0Y2hpbmcgdGhlIGNvbW1hbmQvZXZlbnQuCisKK0FmdGVyIGBga3ZtaV9tc2dfaGRyYGAsIGBg
aWRgYCBzcGVjaWZpYyBkYXRhIG9mIGBgc2l6ZWBgIGJ5dGVzIHdpbGwKK2ZvbGxvdy4KKworVGhl
IG1lc3NhZ2UgaGVhZGVyIGFuZCBpdHMgZGF0YSBtdXN0IGJlIHNlbnQgd2l0aCBvbmUgYGBzZW5k
bXNnKClgYCBjYWxsCit0byB0aGUgc29ja2V0LiBUaGlzIHNpbXBsaWZpZXMgdGhlIHJlY2VpdmVy
IGxvb3AgYW5kIGF2b2lkcwordGhlIHJlY29uc3RydWN0aW9uIG9mIG1lc3NhZ2VzIG9uIHRoZSBv
dGhlciBzaWRlLgorCitUaGUgd2lyZSBwcm90b2NvbCB1c2VzIHRoZSBob3N0IG5hdGl2ZSBieXRl
LW9yZGVyLiBUaGUgaW50cm9zcGVjdGlvbiB0b29sCittdXN0IGNoZWNrIHRoaXMgZHVyaW5nIHRo
ZSBoYW5kc2hha2UgYW5kIGRvIHRoZSBuZWNlc3NhcnkgY29udmVyc2lvbi4KKworQSBjb21tYW5k
IHJlcGx5IGJlZ2lucyB3aXRoOjoKKworCXN0cnVjdCBrdm1pX2Vycm9yX2NvZGUgeworCQlfX3Mz
MiBlcnI7CisJCV9fdTMyIHBhZGRpbmc7CisJfQorCitmb2xsb3dlZCBieSB0aGUgY29tbWFuZCBz
cGVjaWZpYyBkYXRhIGlmIHRoZSBlcnJvciBjb2RlIGBgZXJyYGAgaXMgemVyby4KKworVGhlIGVy
cm9yIGNvZGUgLUtWTV9FTk9TWVMgaXMgcmV0dXJuZWQgZm9yIHVuc3VwcG9ydGVkIGNvbW1hbmRz
LgorCitUaGUgZXJyb3IgY29kZSAtS1ZNX0VQRVJNIGlzIHJldHVybmVkIGZvciBkaXNhbGxvd2Vk
IGNvbW1hbmRzIChzZWUgKipIb29raW5nKiopLgorCitUaGUgZXJyb3IgY29kZSBpcyByZWxhdGVk
IHRvIHRoZSBtZXNzYWdlIHByb2Nlc3NpbmcsIGluY2x1ZGluZyB1bnN1cHBvcnRlZAorY29tbWFu
ZHMuIEZvciBhbGwgdGhlIG90aGVyIGVycm9ycyAoaW5jb21wbGV0ZSBtZXNzYWdlcywgd3Jvbmcg
c2VxdWVuY2UKK251bWJlcnMsIHNvY2tldCBlcnJvcnMgZXRjLikgdGhlIHNvY2tldCB3aWxsIGJl
IGNsb3NlZC4gVGhlIGRldmljZQorbWFuYWdlciBzaG91bGQgcmVjb25uZWN0LgorCitXaGlsZSBh
bGwgY29tbWFuZHMgd2lsbCBoYXZlIGEgcmVwbHkgYXMgc29vbiBhcyBwb3NzaWJsZSwgdGhlIHJl
cGxpZXMKK3RvIGV2ZW50cyB3aWxsIHByb2JhYmx5IGJlIGRlbGF5ZWQgdW50aWwgYSBzZXQgb2Yg
KG5ldykgY29tbWFuZHMgd2lsbAorY29tcGxldGU6OgorCisgICBIb3N0IGtlcm5lbCAgICAgICAg
ICAgICAgIFRvb2wKKyAgIC0tLS0tLS0tLS0tICAgICAgICAgICAgICAgLS0tLQorICAgZXZlbnQg
MSAtPgorICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8LSBjb21tYW5kIDEKKyAgIGNvbW1h
bmQgMSByZXBseSAtPgorICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8LSBjb21tYW5kIDIK
KyAgIGNvbW1hbmQgMiByZXBseSAtPgorICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8LSBl
dmVudCAxIHJlcGx5CisKK0lmIGJvdGggZW5kcyBzZW5kIGEgbWVzc2FnZSBhdCB0aGUgc2FtZSB0
aW1lOjoKKworICAgSG9zdCBrZXJuZWwgICAgICAgICAgICAgICBUb29sCisgICAtLS0tLS0tLS0t
LSAgICAgICAgICAgICAgIC0tLS0KKyAgIGV2ZW50IFggLT4gICAgICAgICAgICAgICAgPC0gY29t
bWFuZCBYCisKK3RoZSBob3N0IGtlcm5lbCB3aWxsIHJlcGx5IHRvICdjb21tYW5kIFgnLCByZWdh
cmRsZXNzIG9mIHRoZSByZWNlaXZlIHRpbWUKKyhiZWZvcmUgb3IgYWZ0ZXIgdGhlICdldmVudCBY
JyB3YXMgc2VudCkuCisKK0FzIGl0IGNhbiBiZSBzZWVuIGJlbG93LCB0aGUgd2lyZSBwcm90b2Nv
bCBzcGVjaWZpZXMgb2NjYXNpb25hbCBwYWRkaW5nLiBUaGlzCitpcyB0byBwZXJtaXQgd29ya2lu
ZyB3aXRoIHRoZSBkYXRhIGJ5IGRpcmVjdGx5IHVzaW5nIEMgc3RydWN0dXJlcyBvciB0byByb3Vu
ZAordGhlIHN0cnVjdHVyZSBzaXplIHRvIGEgbXVsdGlwbGUgb2YgOCBieXRlcyAoNjRiaXQpIHRv
IGltcHJvdmUgdGhlIGNvcHkKK29wZXJhdGlvbnMgdGhhdCBoYXBwZW4gZHVyaW5nIGBgcmVjdm1z
ZygpYGAgb3IgYGBzZW5kbXNnKClgYC4gVGhlIG1lbWJlcnMKK3Nob3VsZCBoYXZlIHRoZSBuYXRp
dmUgYWxpZ25tZW50IG9mIHRoZSBob3N0ICg0IGJ5dGVzIG9uIHg4NikuIEFsbCBwYWRkaW5nCitt
dXN0IGJlIGluaXRpYWxpemVkIHdpdGggemVybyBvdGhlcndpc2UgdGhlIHJlc3BlY3RpdmUgY29t
bWFuZHMgd2lsbCBmYWlsCit3aXRoIC1LVk1fRUlOVkFMLgorCitUbyBkZXNjcmliZSB0aGUgY29t
bWFuZHMvZXZlbnRzLCB3ZSByZXVzZSBzb21lIGNvbnZlbnRpb25zIGZyb20gYXBpLnR4dDoKKwor
ICAtIEFyY2hpdGVjdHVyZXM6IHdoaWNoIGluc3RydWN0aW9uIHNldCBhcmNoaXRlY3R1cmVzIHBy
b3ZpZGUgdGhpcyBjb21tYW5kL2V2ZW50CisKKyAgLSBWZXJzaW9uczogd2hpY2ggdmVyc2lvbnMg
cHJvdmlkZSB0aGlzIGNvbW1hbmQvZXZlbnQKKworICAtIFBhcmFtZXRlcnM6IGluY29taW5nIG1l
c3NhZ2UgZGF0YQorCisgIC0gUmV0dXJuczogb3V0Z29pbmcvcmVwbHkgbWVzc2FnZSBkYXRhCisK
IEhhbmRzaGFrZQogLS0tLS0tLS0tCiAKQEAgLTk5LDYgKzE3OCwxMyBAQCBjb21tYW5kcy9ldmVu
dHMpIHRvIEtWTSwgYW5kIGZvcmdldCBhYm91dCBpdC4gSXQgd2lsbCBiZSBub3RpZmllZCBieQog
S1ZNIHdoZW4gdGhlIGludHJvc3BlY3Rpb24gdG9vbCBjbG9zZXMgdGhlIGZpbGUgaGFuZGxlIChp
biBjYXNlIG9mCiBlcnJvcnMpLCBhbmQgc2hvdWxkIHJlaW5pdGlhdGUgdGhlIGhhbmRzaGFrZS4K
IAorT25jZSB0aGUgZmlsZSBoYW5kbGUgcmVhY2hlcyBLVk0sIHRoZSBpbnRyb3NwZWN0aW9uIHRv
b2wgc2hvdWxkCit1c2UgdGhlICpLVk1JX0dFVF9WRVJTSU9OKiBjb21tYW5kIHRvIGdldCB0aGUg
QVBJIHZlcnNpb24gYW5kL29yIHRoZQorKktWTUlfVk1fQ0hFQ0tfQ09NTUFORCogYW5kICpLVk1J
X1ZNX0NIRUNLX0VWRU5UKiBjb21tYW5kcyB0byBzZWUgd2hpY2gKK2NvbW1hbmRzL2V2ZW50cyBh
cmUgYWxsb3dlZCBmb3IgdGhpcyBndWVzdC4gVGhlIGVycm9yIGNvZGUgLUtWTV9FUEVSTQord2ls
bCBiZSByZXR1cm5lZCBpZiB0aGUgaW50cm9zcGVjdGlvbiB0b29sIHVzZXMgYSBjb21tYW5kIG9y
IGVuYWJsZXMgYW4KK2V2ZW50IHdoaWNoIGlzIGRpc2FsbG93ZWQuCisKIFVuaG9va2luZwogLS0t
LS0tLS0tCiAKZGlmZiAtLWdpdCBhL2luY2x1ZGUvdWFwaS9saW51eC9rdm1pLmggYi9pbmNsdWRl
L3VhcGkvbGludXgva3ZtaS5oCmluZGV4IGQ3YjE4ZmZlZjRmYS4uNzYyMGZkYmY0NzQ5IDEwMDY0
NAotLS0gYS9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCisrKyBiL2luY2x1ZGUvdWFwaS9saW51
eC9rdm1pLmgKQEAgLTE4LDQgKzE4LDE5IEBAIGVudW0gewogCUtWTUlfTlVNX0VWRU5UUwogfTsK
IAorc3RydWN0IGt2bWlfbXNnX2hkciB7CisJX191MTYgaWQ7CisJX191MTYgc2l6ZTsKKwlfX3Uz
MiBzZXE7Cit9OworCitlbnVtIHsKKwlLVk1JX01TR19TSVpFID0gKDQwOTYgKiAyIC0gc2l6ZW9m
KHN0cnVjdCBrdm1pX21zZ19oZHIpKQorfTsKKworc3RydWN0IGt2bWlfZXJyb3JfY29kZSB7CisJ
X19zMzIgZXJyOworCV9fdTMyIHBhZGRpbmc7Cit9OworCiAjZW5kaWYgLyogX1VBUElfX0xJTlVY
X0tWTUlfSCAqLwpkaWZmIC0tZ2l0IGEvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82
NC9rdm1pX3Rlc3QuYyBiL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90
ZXN0LmMKaW5kZXggZWE0MTE2MTFlMjk2Li4xNzkzNTgyYjdlMTAgMTAwNjQ0Ci0tLSBhL3Rvb2xz
L3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKKysrIGIvdG9vbHMvdGVz
dGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYwpAQCAtMTUsNiArMTUsOSBAQAog
I2luY2x1ZGUgInByb2Nlc3Nvci5oIgogI2luY2x1ZGUgIi4uL2xpYi9rdm1fdXRpbF9pbnRlcm5h
bC5oIgogCisjaW5jbHVkZSAibGludXgva3ZtX3BhcmEuaCIKKyNpbmNsdWRlICJsaW51eC9rdm1p
LmgiCisKICNkZWZpbmUgVkNQVV9JRCAgICAgICAgIDUKIAogc3RhdGljIGludCBzb2NrZXRfcGFp
clsyXTsKQEAgLTgwLDEwICs4MywxMDcgQEAgc3RhdGljIHZvaWQgdW5ob29rX2ludHJvc3BlY3Rp
b24oc3RydWN0IGt2bV92bSAqdm0pCiAJCWVycm5vLCBzdHJlcnJvcihlcnJubykpOwogfQogCitz
dGF0aWMgdm9pZCByZWNlaXZlX2RhdGEodm9pZCAqZGVzdCwgc2l6ZV90IHNpemUpCit7CisJc3Np
emVfdCByOworCisJciA9IHJlY3YoVXNlcnNwYWNlX3NvY2tldCwgZGVzdCwgc2l6ZSwgTVNHX1dB
SVRBTEwpOworCVRFU1RfQVNTRVJUKHIgPT0gc2l6ZSwKKwkJInJlY3YoKSBmYWlsZWQsIGV4cGVj
dGVkICVkLCByZXN1bHQgJWQsIGVycm5vICVkICglcylcbiIsCisJCXNpemUsIHIsIGVycm5vLCBz
dHJlcnJvcihlcnJubykpOworfQorCitzdGF0aWMgaW50IHJlY2VpdmVfY21kX3JlcGx5KHN0cnVj
dCBrdm1pX21zZ19oZHIgKnJlcSwgdm9pZCAqcnBsLAorCQkJICAgICBzaXplX3QgcnBsX3NpemUp
Cit7CisJc3RydWN0IGt2bWlfbXNnX2hkciBoZHI7CisJc3RydWN0IGt2bWlfZXJyb3JfY29kZSBl
YzsKKworCXJlY2VpdmVfZGF0YSgmaGRyLCBzaXplb2YoaGRyKSk7CisKKwlURVNUX0FTU0VSVCho
ZHIuc2VxID09IHJlcS0+c2VxLAorCQkiVW5leHBlY3RlZCBtZXNzYWdlcyBzZXF1ZW5jZSAweCV4
LCBleHBlY3RlZCAweCV4XG4iLAorCQloZHIuc2VxLCByZXEtPnNlcSk7CisKKwlURVNUX0FTU0VS
VChoZHIuc2l6ZSA+PSBzaXplb2YoZWMpLAorCQkiSW52YWxpZCBtZXNzYWdlIHNpemUgJWQsIGV4
cGVjdGVkICVkIGJ5dGVzIChhdCBsZWFzdClcbiIsCisJCWhkci5zaXplLCBzaXplb2YoZWMpKTsK
KworCXJlY2VpdmVfZGF0YSgmZWMsIHNpemVvZihlYykpOworCisJaWYgKGVjLmVycikgeworCQlU
RVNUX0FTU0VSVChoZHIuc2l6ZSA9PSBzaXplb2YoZWMpLAorCQkJIkludmFsaWQgY29tbWFuZCBy
ZXBseSBvbiBlcnJvclxuIik7CisJfSBlbHNlIHsKKwkJVEVTVF9BU1NFUlQoaGRyLnNpemUgPT0g
c2l6ZW9mKGVjKSArIHJwbF9zaXplLAorCQkJIkludmFsaWQgY29tbWFuZCByZXBseVxuIik7CisK
KwkJaWYgKHJwbCAmJiBycGxfc2l6ZSkKKwkJCXJlY2VpdmVfZGF0YShycGwsIHJwbF9zaXplKTsK
Kwl9CisKKwlyZXR1cm4gZWMuZXJyOworfQorCitzdGF0aWMgdW5zaWduZWQgaW50IG5ld19zZXEo
dm9pZCkKK3sKKwlzdGF0aWMgdW5zaWduZWQgaW50IHNlcTsKKworCXJldHVybiBzZXErKzsKK30K
Kworc3RhdGljIHZvaWQgc2VuZF9tZXNzYWdlKGludCBtc2dfaWQsIHN0cnVjdCBrdm1pX21zZ19o
ZHIgKmhkciwgc2l6ZV90IHNpemUpCit7CisJc3NpemVfdCByOworCisJaGRyLT5pZCA9IG1zZ19p
ZDsKKwloZHItPnNlcSA9IG5ld19zZXEoKTsKKwloZHItPnNpemUgPSBzaXplIC0gc2l6ZW9mKCpo
ZHIpOworCisJciA9IHNlbmQoVXNlcnNwYWNlX3NvY2tldCwgaGRyLCBzaXplLCAwKTsKKwlURVNU
X0FTU0VSVChyID09IHNpemUsCisJCSJzZW5kKCkgZmFpbGVkLCBzZW5kaW5nICVkLCByZXN1bHQg
JWQsIGVycm5vICVkICglcylcbiIsCisJCXNpemUsIHIsIGVycm5vLCBzdHJlcnJvcihlcnJubykp
OworfQorCitzdGF0aWMgY29uc3QgY2hhciAqa3ZtX3N0cmVycm9yKGludCBlcnJvcikKK3sKKwlz
d2l0Y2ggKGVycm9yKSB7CisJY2FzZSBLVk1fRU5PU1lTOgorCQlyZXR1cm4gIkludmFsaWQgc3lz
dGVtIGNhbGwgbnVtYmVyIjsKKwljYXNlIEtWTV9FT1BOT1RTVVBQOgorCQlyZXR1cm4gIk9wZXJh
dGlvbiBub3Qgc3VwcG9ydGVkIG9uIHRyYW5zcG9ydCBlbmRwb2ludCI7CisJZGVmYXVsdDoKKwkJ
cmV0dXJuIHN0cmVycm9yKGVycm9yKTsKKwl9Cit9CisKK3N0YXRpYyBpbnQgZG9fY29tbWFuZChp
bnQgY21kX2lkLCBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICpyZXEsCisJCSAgICAgIHNpemVfdCByZXFf
c2l6ZSwgdm9pZCAqcnBsLCBzaXplX3QgcnBsX3NpemUpCit7CisJc2VuZF9tZXNzYWdlKGNtZF9p
ZCwgcmVxLCByZXFfc2l6ZSk7CisJcmV0dXJuIHJlY2VpdmVfY21kX3JlcGx5KHJlcSwgcnBsLCBy
cGxfc2l6ZSk7Cit9CisKK3N0YXRpYyB2b2lkIHRlc3RfY21kX2ludmFsaWQodm9pZCkKK3sKKwlp
bnQgaW52YWxpZF9tc2dfaWQgPSAweGZmZmY7CisJc3RydWN0IGt2bWlfbXNnX2hkciByZXE7CisJ
aW50IHI7CisKKwlyID0gZG9fY29tbWFuZChpbnZhbGlkX21zZ19pZCwgJnJlcSwgc2l6ZW9mKHJl
cSksIE5VTEwsIDApOworCVRFU1RfQVNTRVJUKHIgPT0gLUtWTV9FTk9TWVMsCisJCSJJbnZhbGlk
IGNvbW1hbmQgZGlkbid0IGZhaWxlZCB3aXRoIEtWTV9FTk9TWVMsIGVycm9yICVkICglcylcbiIs
CisJCS1yLCBrdm1fc3RyZXJyb3IoLXIpKTsKK30KKwogc3RhdGljIHZvaWQgdGVzdF9pbnRyb3Nw
ZWN0aW9uKHN0cnVjdCBrdm1fdm0gKnZtKQogewogCXNldHVwX3NvY2tldCgpOwogCWhvb2tfaW50
cm9zcGVjdGlvbih2bSk7CisKKwl0ZXN0X2NtZF9pbnZhbGlkKCk7CisKIAl1bmhvb2tfaW50cm9z
cGVjdGlvbih2bSk7CiB9CiAKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3Zt
aS5jIGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMKaW5kZXggNzkxZDI1MzY0MTVlLi43
MDYzNzJlOWU1NmEgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jCisr
KyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jCkBAIC04LDEzICs4LDU0IEBACiAjaW5j
bHVkZSAia3ZtaV9pbnQuaCIKICNpbmNsdWRlIDxsaW51eC9rdGhyZWFkLmg+CiAKLWludCBrdm1p
X2luaXQodm9pZCkKK3N0YXRpYyBzdHJ1Y3Qga21lbV9jYWNoZSAqbXNnX2NhY2hlOworCit2b2lk
ICprdm1pX21zZ19hbGxvYyh2b2lkKQoreworCXJldHVybiBrbWVtX2NhY2hlX3phbGxvYyhtc2df
Y2FjaGUsIEdGUF9LRVJORUwpOworfQorCit2b2lkICprdm1pX21zZ19hbGxvY19jaGVjayhzaXpl
X3Qgc2l6ZSkKK3sKKwlpZiAoc2l6ZSA+IEtWTUlfTVNHX1NJWkVfQUxMT0MpCisJCXJldHVybiBO
VUxMOworCXJldHVybiBrdm1pX21zZ19hbGxvYygpOworfQorCit2b2lkIGt2bWlfbXNnX2ZyZWUo
dm9pZCAqYWRkcikKK3sKKwlpZiAoYWRkcikKKwkJa21lbV9jYWNoZV9mcmVlKG1zZ19jYWNoZSwg
YWRkcik7Cit9CisKK3N0YXRpYyB2b2lkIGt2bWlfY2FjaGVfZGVzdHJveSh2b2lkKQogeworCWtt
ZW1fY2FjaGVfZGVzdHJveShtc2dfY2FjaGUpOworCW1zZ19jYWNoZSA9IE5VTEw7Cit9CisKK3N0
YXRpYyBpbnQga3ZtaV9jYWNoZV9jcmVhdGUodm9pZCkKK3sKKwltc2dfY2FjaGUgPSBrbWVtX2Nh
Y2hlX2NyZWF0ZSgia3ZtaV9tc2ciLCBLVk1JX01TR19TSVpFX0FMTE9DLAorCQkJCSAgICAgIDQw
OTYsIFNMQUJfQUNDT1VOVCwgTlVMTCk7CisKKwlpZiAoIW1zZ19jYWNoZSkgeworCQlrdm1pX2Nh
Y2hlX2Rlc3Ryb3koKTsKKworCQlyZXR1cm4gLTE7CisJfQorCiAJcmV0dXJuIDA7CiB9CiAKK2lu
dCBrdm1pX2luaXQodm9pZCkKK3sKKwlyZXR1cm4ga3ZtaV9jYWNoZV9jcmVhdGUoKTsKK30KKwog
dm9pZCBrdm1pX3VuaW5pdCh2b2lkKQogeworCWt2bWlfY2FjaGVfZGVzdHJveSgpOwogfQogCiBz
dGF0aWMgdm9pZCBmcmVlX2t2bWkoc3RydWN0IGt2bSAqa3ZtKQpkaWZmIC0tZ2l0IGEvdmlydC9r
dm0vaW50cm9zcGVjdGlvbi9rdm1pX2ludC5oIGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1p
X2ludC5oCmluZGV4IGM1Y2Y0MGQwM2Q2OC4uNDZiYTkwY2I1ZTY2IDEwMDY0NAotLS0gYS92aXJ0
L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfaW50LmgKKysrIGIvdmlydC9rdm0vaW50cm9zcGVjdGlv
bi9rdm1pX2ludC5oCkBAIC0xNiw2ICsxNiw4IEBACiAjZGVmaW5lIGt2bWlfZXJyKGt2bWksIGZt
dCwgLi4uKSBcCiAJa3ZtX2luZm8oIiVwVSBFUlJPUjogIiBmbXQsICZrdm1pLT51dWlkLCAjIyBf
X1ZBX0FSR1NfXykKIAorI2RlZmluZSBLVk1JX01TR19TSVpFX0FMTE9DIChzaXplb2Yoc3RydWN0
IGt2bWlfbXNnX2hkcikgKyBLVk1JX01TR19TSVpFKQorCiAjZGVmaW5lIEtWTUlfS05PV05fRVZF
TlRTIDAKIAogI2RlZmluZSBLVk1JX0tOT1dOX0NPTU1BTkRTIDAKQEAgLTI4LDQgKzMwLDkgQEAg
dm9pZCBrdm1pX3NvY2tfc2h1dGRvd24oc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pKTsK
IHZvaWQga3ZtaV9zb2NrX3B1dChzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWkpOwogYm9v
bCBrdm1pX21zZ19wcm9jZXNzKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSk7CiAKKy8q
IGt2bWkuYyAqLwordm9pZCAqa3ZtaV9tc2dfYWxsb2Modm9pZCk7Cit2b2lkICprdm1pX21zZ19h
bGxvY19jaGVjayhzaXplX3Qgc2l6ZSk7Cit2b2lkIGt2bWlfbXNnX2ZyZWUodm9pZCAqYWRkcik7
CisKICNlbmRpZgpkaWZmIC0tZ2l0IGEvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5j
IGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jCmluZGV4IGY5ZTY2Mjc0ZmI0My4u
ZWQwOTVmY2Y1MGJjIDEwMDY0NAotLS0gYS92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNn
LmMKKysrIGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pX21zZy5jCkBAIC04LDYgKzgsMTkg
QEAKICNpbmNsdWRlIDxsaW51eC9uZXQuaD4KICNpbmNsdWRlICJrdm1pX2ludC5oIgogCitzdGF0
aWMgY29uc3QgY2hhciAqY29uc3QgbXNnX0lEc1tdID0geworfTsKKworc3RhdGljIGJvb2wgaXNf
a25vd25fbWVzc2FnZSh1MTYgaWQpCit7CisJcmV0dXJuIGlkIDwgQVJSQVlfU0laRShtc2dfSURz
KSAmJiBtc2dfSURzW2lkXTsKK30KKworc3RhdGljIGNvbnN0IGNoYXIgKmlkMnN0cih1MTYgaWQp
Cit7CisJcmV0dXJuIGlzX2tub3duX21lc3NhZ2UoaWQpID8gbXNnX0lEc1tpZF0gOiAidW5rbm93
biI7Cit9CisKIGJvb2wga3ZtaV9zb2NrX2dldChzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2
bWksIGludCBmZCkKIHsKIAlzdHJ1Y3Qgc29ja2V0ICpzb2NrOwpAQCAtMzMsNyArNDYsMjE2IEBA
IHZvaWQga3ZtaV9zb2NrX3NodXRkb3duKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSkK
IAlrZXJuZWxfc29ja19zaHV0ZG93bihrdm1pLT5zb2NrLCBTSFVUX1JEV1IpOwogfQogCitzdGF0
aWMgaW50IGt2bWlfc29ja19yZWFkKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSwgdm9p
ZCAqYnVmLAorCQkJICBzaXplX3Qgc2l6ZSkKK3sKKwlzdHJ1Y3Qga3ZlYyBpID0geworCQkuaW92
X2Jhc2UgPSBidWYsCisJCS5pb3ZfbGVuID0gc2l6ZSwKKwl9OworCXN0cnVjdCBtc2doZHIgbSA9
IHsgfTsKKwlpbnQgcmM7CisKKwlyYyA9IGtlcm5lbF9yZWN2bXNnKGt2bWktPnNvY2ssICZtLCAm
aSwgMSwgc2l6ZSwgTVNHX1dBSVRBTEwpOworCisJaWYgKHVubGlrZWx5KHJjICE9IHNpemUgJiYg
cmMgPj0gMCkpCisJCXJjID0gLUVQSVBFOworCisJcmV0dXJuIHJjID49IDAgPyAwIDogcmM7Cit9
CisKK3N0YXRpYyBpbnQga3ZtaV9zb2NrX3dyaXRlKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAq
a3ZtaSwgc3RydWN0IGt2ZWMgKmksCisJCQkgICBzaXplX3Qgbiwgc2l6ZV90IHNpemUpCit7CisJ
c3RydWN0IG1zZ2hkciBtID0geyB9OworCWludCByYzsKKworCXJjID0ga2VybmVsX3NlbmRtc2co
a3ZtaS0+c29jaywgJm0sIGksIG4sIHNpemUpOworCisJaWYgKHVubGlrZWx5KHJjICE9IHNpemUg
JiYgcmMgPj0gMCkpCisJCXJjID0gLUVQSVBFOworCisJcmV0dXJuIHJjID49IDAgPyAwIDogcmM7
Cit9CisKK3N0YXRpYyBpbnQga3ZtaV9tc2dfcmVwbHkoc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9u
ICprdm1pLAorCQkJICBjb25zdCBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICptc2csIGludCBlcnIsCisJ
CQkgIGNvbnN0IHZvaWQgKnJwbCwgc2l6ZV90IHJwbF9zaXplKQoreworCXN0cnVjdCBrdm1pX2Vy
cm9yX2NvZGUgZWM7CisJc3RydWN0IGt2bWlfbXNnX2hkciBoOworCXN0cnVjdCBrdmVjIHZlY1sz
XSA9IHsKKwkJeyAuaW92X2Jhc2UgPSAmaCwgLmlvdl9sZW4gPSBzaXplb2YoaCkgfSwKKwkJeyAu
aW92X2Jhc2UgPSAmZWMsIC5pb3ZfbGVuID0gc2l6ZW9mKGVjKSB9LAorCQl7IC5pb3ZfYmFzZSA9
ICh2b2lkICopcnBsLCAuaW92X2xlbiA9IHJwbF9zaXplIH0sCisJfTsKKwlzaXplX3Qgc2l6ZSA9
IHNpemVvZihoKSArIHNpemVvZihlYykgKyAoZXJyID8gMCA6IHJwbF9zaXplKTsKKwlzaXplX3Qg
biA9IGVyciA/IEFSUkFZX1NJWkUodmVjKSAtIDEgOiBBUlJBWV9TSVpFKHZlYyk7CisKKwltZW1z
ZXQoJmgsIDAsIHNpemVvZihoKSk7CisJaC5pZCA9IG1zZy0+aWQ7CisJaC5zZXEgPSBtc2ctPnNl
cTsKKwloLnNpemUgPSBzaXplIC0gc2l6ZW9mKGgpOworCisJbWVtc2V0KCZlYywgMCwgc2l6ZW9m
KGVjKSk7CisJZWMuZXJyID0gZXJyOworCisJcmV0dXJuIGt2bWlfc29ja193cml0ZShrdm1pLCB2
ZWMsIG4sIHNpemUpOworfQorCitzdGF0aWMgaW50IGt2bWlfbXNnX3ZtX3JlcGx5KHN0cnVjdCBr
dm1faW50cm9zcGVjdGlvbiAqa3ZtaSwKKwkJCSAgICAgY29uc3Qgc3RydWN0IGt2bWlfbXNnX2hk
ciAqbXNnLAorCQkJICAgICBpbnQgZXJyLCBjb25zdCB2b2lkICpycGwsCisJCQkgICAgIHNpemVf
dCBycGxfc2l6ZSkKK3sKKwlyZXR1cm4ga3ZtaV9tc2dfcmVwbHkoa3ZtaSwgbXNnLCBlcnIsIHJw
bCwgcnBsX3NpemUpOworfQorCitzdGF0aWMgYm9vbCBpc19jb21tYW5kX2FsbG93ZWQoc3RydWN0
IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pLCBpbnQgaWQpCit7CisJcmV0dXJuIHRlc3RfYml0KGlk
LCBrdm1pLT5jbWRfYWxsb3dfbWFzayk7Cit9CisKKy8qCisgKiBUaGVzZSBjb21tYW5kcyBhcmUg
ZXhlY3V0ZWQgYnkgdGhlIHJlY2VpdmluZyB0aHJlYWQvd29ya2VyLgorICovCitzdGF0aWMgaW50
KCpjb25zdCBtc2dfdm1bXSkoc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICosCisJCQkgICAgY29u
c3Qgc3RydWN0IGt2bWlfbXNnX2hkciAqLCBjb25zdCB2b2lkICopID0geworfTsKKworc3RhdGlj
IGJvb2wgaXNfdm1fbWVzc2FnZSh1MTYgaWQpCit7CisJcmV0dXJuIGlkIDwgQVJSQVlfU0laRSht
c2dfdm0pICYmICEhbXNnX3ZtW2lkXTsKK30KKworc3RhdGljIGJvb2wgaXNfdW5zdXBwb3J0ZWRf
bWVzc2FnZSh1MTYgaWQpCit7CisJYm9vbCBzdXBwb3J0ZWQ7CisKKwlzdXBwb3J0ZWQgPSBpc19r
bm93bl9tZXNzYWdlKGlkKSAmJiBpc192bV9tZXNzYWdlKGlkKTsKKworCXJldHVybiAhc3VwcG9y
dGVkOworfQorCitzdGF0aWMgaW50IGt2bWlfY29uc3VtZV9ieXRlcyhzdHJ1Y3Qga3ZtX2ludHJv
c3BlY3Rpb24gKmt2bWksIHNpemVfdCBieXRlcykKK3sKKwlzaXplX3QgdG9fcmVhZDsKKwl1OCBi
dWZbMTAyNF07CisJaW50IGVyciA9IDA7CisKKwl3aGlsZSAoYnl0ZXMgJiYgIWVycikgeworCQl0
b19yZWFkID0gbWluKGJ5dGVzLCBzaXplb2YoYnVmKSk7CisKKwkJZXJyID0ga3ZtaV9zb2NrX3Jl
YWQoa3ZtaSwgYnVmLCB0b19yZWFkKTsKKworCQlieXRlcyAtPSB0b19yZWFkOworCX0KKworCXJl
dHVybiBlcnI7Cit9CisKK3N0YXRpYyBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICoKK2t2bWlfbXNnX3Jl
Y3Yoc3RydWN0IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pLCBib29sICp1bnN1cHBvcnRlZCkKK3sK
KwlzdHJ1Y3Qga3ZtaV9tc2dfaGRyICptc2c7CisJaW50IGVycjsKKworCSp1bnN1cHBvcnRlZCA9
IGZhbHNlOworCisJbXNnID0ga3ZtaV9tc2dfYWxsb2MoKTsKKwlpZiAoIW1zZykKKwkJZ290byBv
dXRfZXJyOworCisJZXJyID0ga3ZtaV9zb2NrX3JlYWQoa3ZtaSwgbXNnLCBzaXplb2YoKm1zZykp
OworCWlmIChlcnIpCisJCWdvdG8gb3V0X2VycjsKKworCWlmIChtc2ctPnNpemUgPiBLVk1JX01T
R19TSVpFKQorCQlnb3RvIG91dF9lcnJfbXNnOworCisJaWYgKGlzX3Vuc3VwcG9ydGVkX21lc3Nh
Z2UobXNnLT5pZCkpIHsKKwkJaWYgKG1zZy0+c2l6ZSAmJiBrdm1pX2NvbnN1bWVfYnl0ZXMoa3Zt
aSwgbXNnLT5zaXplKSA8IDApCisJCQlnb3RvIG91dF9lcnJfbXNnOworCisJCSp1bnN1cHBvcnRl
ZCA9IHRydWU7CisJCXJldHVybiBtc2c7CisJfQorCisJaWYgKG1zZy0+c2l6ZSAmJiBrdm1pX3Nv
Y2tfcmVhZChrdm1pLCBtc2cgKyAxLCBtc2ctPnNpemUpIDwgMCkKKwkJZ290byBvdXRfZXJyX21z
ZzsKKworCXJldHVybiBtc2c7CisKK291dF9lcnJfbXNnOgorCWt2bWlfZXJyKGt2bWksICIlcyBp
ZCAldSAoJXMpIHNpemUgJXVcbiIsCisJCSBfX2Z1bmNfXywgbXNnLT5pZCwgaWQyc3RyKG1zZy0+
aWQpLCBtc2ctPnNpemUpOworCitvdXRfZXJyOgorCWt2bWlfbXNnX2ZyZWUobXNnKTsKKworCXJl
dHVybiBOVUxMOworfQorCitzdGF0aWMgaW50IGt2bWlfbXNnX2Rpc3BhdGNoX3ZtX2NtZChzdHJ1
Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWksCisJCQkJICAgIGNvbnN0IHN0cnVjdCBrdm1pX21z
Z19oZHIgKm1zZykKK3sKKwlyZXR1cm4gbXNnX3ZtW21zZy0+aWRdKGt2bWksIG1zZywgbXNnICsg
MSk7Cit9CisKK3N0YXRpYyBpbnQga3ZtaV9tc2dfZGlzcGF0Y2goc3RydWN0IGt2bV9pbnRyb3Nw
ZWN0aW9uICprdm1pLAorCQkJICAgICBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICptc2csIGJvb2wgKnF1
ZXVlZCkKK3sKKwlpbnQgZXJyOworCisJZXJyID0ga3ZtaV9tc2dfZGlzcGF0Y2hfdm1fY21kKGt2
bWksIG1zZyk7CisKKwlpZiAoZXJyKQorCQlrdm1pX2Vycihrdm1pLCAiJXM6IG1zZyBpZDogJXUg
KCVzKSwgZXJyOiAlZFxuIiwgX19mdW5jX18sCisJCQkgbXNnLT5pZCwgaWQyc3RyKG1zZy0+aWQp
LCBlcnIpOworCisJcmV0dXJuIGVycjsKK30KKworc3RhdGljIGJvb2wgaXNfbWVzc2FnZV9hbGxv
d2VkKHN0cnVjdCBrdm1faW50cm9zcGVjdGlvbiAqa3ZtaSwgX191MTYgaWQpCit7CisJaWYgKGlk
ID49IEtWTUlfTlVNX0NPTU1BTkRTKQorCQlyZXR1cm4gZmFsc2U7CisKKwlyZXR1cm4gaXNfY29t
bWFuZF9hbGxvd2VkKGt2bWksIGlkKTsKK30KKworc3RhdGljIGludCBrdm1pX21zZ192bV9yZXBs
eV9lYyhzdHJ1Y3Qga3ZtX2ludHJvc3BlY3Rpb24gKmt2bWksCisJCQkJY29uc3Qgc3RydWN0IGt2
bWlfbXNnX2hkciAqbXNnLCBpbnQgZWMpCit7CisJcmV0dXJuIGt2bWlfbXNnX3ZtX3JlcGx5KGt2
bWksIG1zZywgZWMsIE5VTEwsIDApOworfQorCiBib29sIGt2bWlfbXNnX3Byb2Nlc3Moc3RydWN0
IGt2bV9pbnRyb3NwZWN0aW9uICprdm1pKQogewotCXJldHVybiBmYWxzZTsKKwlzdHJ1Y3Qga3Zt
aV9tc2dfaGRyICptc2c7CisJYm9vbCBxdWV1ZWQgPSBmYWxzZTsKKwlib29sIHVuc3VwcG9ydGVk
OworCWludCBlcnIgPSAtMTsKKworCW1zZyA9IGt2bWlfbXNnX3JlY3Yoa3ZtaSwgJnVuc3VwcG9y
dGVkKTsKKwlpZiAoIW1zZykKKwkJZ290byBvdXQ7CisKKwlpZiAodW5zdXBwb3J0ZWQpIHsKKwkJ
ZXJyID0ga3ZtaV9tc2dfdm1fcmVwbHlfZWMoa3ZtaSwgbXNnLCAtS1ZNX0VOT1NZUyk7CisJCWdv
dG8gb3V0OworCX0KKworCWlmICghaXNfbWVzc2FnZV9hbGxvd2VkKGt2bWksIG1zZy0+aWQpKSB7
CisJCWVyciA9IGt2bWlfbXNnX3ZtX3JlcGx5X2VjKGt2bWksIG1zZywgLUtWTV9FUEVSTSk7CisJ
CWdvdG8gb3V0OworCX0KKworCWVyciA9IGt2bWlfbXNnX2Rpc3BhdGNoKGt2bWksIG1zZywgJnF1
ZXVlZCk7CisKK291dDoKKwlpZiAoIXF1ZXVlZCkKKwkJa3ZtaV9tc2dfZnJlZShtc2cpOworCisJ
cmV0dXJuIGVyciA9PSAwOwogfQpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fXwpWaXJ0dWFsaXphdGlvbiBtYWlsaW5nIGxpc3QKVmlydHVhbGl6YXRpb25AbGlz
dHMubGludXgtZm91bmRhdGlvbi5vcmcKaHR0cHM6Ly9saXN0cy5saW51eGZvdW5kYXRpb24ub3Jn
L21haWxtYW4vbGlzdGluZm8vdmlydHVhbGl6YXRpb24=
