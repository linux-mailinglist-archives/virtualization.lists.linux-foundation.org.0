Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
	by mail.lfdr.de (Postfix) with ESMTPS id 6773A2D1B83
	for <lists.virtualization@lfdr.de>; Mon,  7 Dec 2020 21:58:49 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by silver.osuosl.org (Postfix) with ESMTP id D9C292E294;
	Mon,  7 Dec 2020 20:58:47 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id RVJfDzS-Ws27; Mon,  7 Dec 2020 20:58:22 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by silver.osuosl.org (Postfix) with ESMTP id 27EF82E4FE;
	Mon,  7 Dec 2020 20:57:27 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 0770EC013B;
	Mon,  7 Dec 2020 20:57:27 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from silver.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 95DF9C013B
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:57:24 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by silver.osuosl.org (Postfix) with ESMTP id 7EE002E29D
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:57:24 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from silver.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id 8bPJuLnnyUsW
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:57:06 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by silver.osuosl.org (Postfix) with ESMTPS id A68FC2E2A4
 for <virtualization@lists.linux-foundation.org>;
 Mon,  7 Dec 2020 20:56:56 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp01.buh.bitdefender.com [10.17.80.75])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 2517E305D482; Mon,  7 Dec 2020 22:46:25 +0200 (EET)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id F2D1A3072785;
 Mon,  7 Dec 2020 22:46:24 +0200 (EET)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v11 73/81] KVM: introspection: restore the state of MSR
 interception on unhook
Date: Mon,  7 Dec 2020 22:46:14 +0200
Message-Id: <20201207204622.15258-74-alazar@bitdefender.com>
In-Reply-To: <20201207204622.15258-1-alazar@bitdefender.com>
References: <20201207204622.15258-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 =?UTF-8?q?Nicu=C8=99or=20C=C3=AE=C8=9Bu?= <nicu.citu@icloud.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

RnJvbTogTmljdciZb3IgQ8OuyJt1IDxuaWN1LmNpdHVAaWNsb3VkLmNvbT4KClRoaXMgY29tbWl0
IGFsc28gZW5zdXJlcyB0aGF0IHRoZSBpbnRyb3NwZWN0aW9uIHRvb2wgYW5kIHRoZSB1c2Vyc3Bh
Y2UKZG8gbm90IGRpc2FibGUgZWFjaCBvdGhlciB0aGUgTVNSIGFjY2VzcyBWTS1leGl0LgoKU2ln
bmVkLW9mZi1ieTogTmljdciZb3IgQ8OuyJt1IDxuaWN1LmNpdHVAaWNsb3VkLmNvbT4KU2lnbmVk
LW9mZi1ieTogQWRhbGJlcnQgTGF6xINyIDxhbGF6YXJAYml0ZGVmZW5kZXIuY29tPgotLS0KIGFy
Y2gveDg2L2luY2x1ZGUvYXNtL2t2bWlfaG9zdC5oIHwgIDEyICsrKwogYXJjaC94ODYva3ZtL2t2
bWkuYyAgICAgICAgICAgICAgfCAxMjQgKysrKysrKysrKysrKysrKysrKysrKysrKysrLS0tLQog
YXJjaC94ODYva3ZtL3N2bS9zdm0uYyAgICAgICAgICAgfCAgMTAgKysrCiBhcmNoL3g4Ni9rdm0v
dm14L3ZteC5jICAgICAgICAgICB8ICAxMSArKysKIDQgZmlsZXMgY2hhbmdlZCwgMTQyIGluc2Vy
dGlvbnMoKyksIDE1IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2luY2x1ZGUv
YXNtL2t2bWlfaG9zdC5oIGIvYXJjaC94ODYvaW5jbHVkZS9hc20va3ZtaV9ob3N0LmgKaW5kZXgg
NWE0ZmM1YjgwOTA3Li44ODIyZjAzMTAxNTYgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2luY2x1ZGUv
YXNtL2t2bWlfaG9zdC5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bWlfaG9zdC5oCkBA
IC0yNiw2ICsyNiwxMiBAQCBzdHJ1Y3Qga3ZtaV9pbnRlcmNlcHRpb24gewogCQkJREVDTEFSRV9C
SVRNQVAobG93LCBLVk1JX05VTV9NU1IpOwogCQkJREVDTEFSRV9CSVRNQVAoaGlnaCwgS1ZNSV9O
VU1fTVNSKTsKIAkJfSBrdm1pX21hc2s7CisJCXN0cnVjdCB7CisJCQlERUNMQVJFX0JJVE1BUChs
b3csIEtWTUlfTlVNX01TUik7CisJCQlERUNMQVJFX0JJVE1BUChoaWdoLCBLVk1JX05VTV9NU1Ip
OworCQl9IGt2bV9tYXNrOworCQlib29sICgqbW9uaXRvcl9mY3QpKHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSwgdTMyIG1zciwKKwkJCQkgICAgYm9vbCBlbmFibGUpOwogCX0gbXNydzsKIH07CiAKQEAg
LTYxLDYgKzY3LDggQEAgdm9pZCBrdm1pX3hzZXRidl9ldmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZj
cHUsIHU4IHhjciwKIGJvb2wga3ZtaV9tb25pdG9yX2Rlc2NfaW50ZXJjZXB0KHN0cnVjdCBrdm1f
dmNwdSAqdmNwdSwgYm9vbCBlbmFibGUpOwogYm9vbCBrdm1pX2Rlc2NyaXB0b3JfZXZlbnQoc3Ry
dWN0IGt2bV92Y3B1ICp2Y3B1LCB1OCBkZXNjcmlwdG9yLCBib29sIHdyaXRlKTsKIGJvb2wga3Zt
aV9tc3JfZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3QgbXNyX2RhdGEgKm1zcik7
Citib29sIGt2bWlfbW9uaXRvcl9tc3J3X2ludGVyY2VwdChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUs
IHUzMiBtc3IsIGJvb2wgZW5hYmxlKTsKK2Jvb2wga3ZtaV9tc3J3X2ludGVyY2VwdF9vcmlnaW5h
dG9yKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSk7CiAKICNlbHNlIC8qIENPTkZJR19LVk1fSU5UUk9T
UEVDVElPTiAqLwogCkBAIC04Miw2ICs5MCwxMCBAQCBzdGF0aWMgaW5saW5lIGJvb2wga3ZtaV9k
ZXNjcmlwdG9yX2V2ZW50KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdTggZGVzY3JpcHRvciwKIAkJ
CQkJIGJvb2wgd3JpdGUpIHsgcmV0dXJuIHRydWU7IH0KIHN0YXRpYyBpbmxpbmUgYm9vbCBrdm1p
X21zcl9ldmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBtc3JfZGF0YSAqbXNyKQog
CQkJCXsgcmV0dXJuIHRydWU7IH0KK3N0YXRpYyBpbmxpbmUgYm9vbCBrdm1pX21vbml0b3JfbXNy
d19pbnRlcmNlcHQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCB1MzIgbXNyLAorCQkJCQkgICAgICAg
Ym9vbCBlbmFibGUpIHsgcmV0dXJuIGZhbHNlOyB9CitzdGF0aWMgaW5saW5lIGJvb2wga3ZtaV9t
c3J3X2ludGVyY2VwdF9vcmlnaW5hdG9yKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKKwkJCQl7IHJl
dHVybiBmYWxzZTsgfQogCiAjZW5kaWYgLyogQ09ORklHX0tWTV9JTlRST1NQRUNUSU9OICovCiAK
ZGlmZiAtLWdpdCBhL2FyY2gveDg2L2t2bS9rdm1pLmMgYi9hcmNoL3g4Ni9rdm0va3ZtaS5jCmlu
ZGV4IGNlMjllMDFiYTdhNi4uZTMyNWRhZDg4ZGJiIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0v
a3ZtaS5jCisrKyBiL2FyY2gveDg2L2t2bS9rdm1pLmMKQEAgLTM0NSwyMiArMzQ1LDI1IEBAIHN0
YXRpYyB2b2lkIGt2bWlfYXJjaF9kaXNhYmxlX2Rlc2NfaW50ZXJjZXB0KHN0cnVjdCBrdm1fdmNw
dSAqdmNwdSkKIAl2Y3B1LT5hcmNoLmt2bWktPmRlc2NyaXB0b3Iua3ZtX2ludGVyY2VwdGVkID0g
ZmFsc2U7CiB9CiAKLXN0YXRpYyB1bnNpZ25lZCBsb25nICptc3JfbWFzayhzdHJ1Y3Qga3ZtX3Zj
cHUgKnZjcHUsIHVuc2lnbmVkIGludCAqbXNyKQorc3RhdGljIHVuc2lnbmVkIGxvbmcgKm1zcl9t
YXNrKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdW5zaWduZWQgaW50ICptc3IsCisJCQkgICAgICAg
Ym9vbCBrdm1pKQogewogCXN3aXRjaCAoKm1zcikgewogCWNhc2UgMCAuLi4gMHgxZmZmOgotCQly
ZXR1cm4gdmNwdS0+YXJjaC5rdm1pLT5tc3J3Lmt2bWlfbWFzay5sb3c7CisJCXJldHVybiBrdm1p
ID8gdmNwdS0+YXJjaC5rdm1pLT5tc3J3Lmt2bWlfbWFzay5sb3cgOgorCQkJICAgICAgdmNwdS0+
YXJjaC5rdm1pLT5tc3J3Lmt2bV9tYXNrLmxvdzsKIAljYXNlIDB4YzAwMDAwMDAgLi4uIDB4YzAw
MDFmZmY6CiAJCSptc3IgJj0gMHgxZmZmOwotCQlyZXR1cm4gdmNwdS0+YXJjaC5rdm1pLT5tc3J3
Lmt2bWlfbWFzay5oaWdoOworCQlyZXR1cm4ga3ZtaSA/IHZjcHUtPmFyY2gua3ZtaS0+bXNydy5r
dm1pX21hc2suaGlnaCA6CisJCQkgICAgICB2Y3B1LT5hcmNoLmt2bWktPm1zcncua3ZtX21hc2su
aGlnaDsKIAl9CiAKIAlyZXR1cm4gTlVMTDsKIH0KIAotc3RhdGljIGJvb2wgdGVzdF9tc3JfbWFz
ayhzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHVuc2lnbmVkIGludCBtc3IpCitzdGF0aWMgYm9vbCB0
ZXN0X21zcl9tYXNrKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdW5zaWduZWQgaW50IG1zciwgYm9v
bCBrdm1pKQogewotCXVuc2lnbmVkIGxvbmcgKm1hc2sgPSBtc3JfbWFzayh2Y3B1LCAmbXNyKTsK
Kwl1bnNpZ25lZCBsb25nICptYXNrID0gbXNyX21hc2sodmNwdSwgJm1zciwga3ZtaSk7CiAKIAlp
ZiAoIW1hc2spCiAJCXJldHVybiBmYWxzZTsKQEAgLTM2OCw5ICszNzEsMjcgQEAgc3RhdGljIGJv
b2wgdGVzdF9tc3JfbWFzayhzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHVuc2lnbmVkIGludCBtc3Ip
CiAJcmV0dXJuICEhdGVzdF9iaXQobXNyLCBtYXNrKTsKIH0KIAotc3RhdGljIGJvb2wgbXNyX2Nv
bnRyb2woc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCB1bnNpZ25lZCBpbnQgbXNyLCBib29sIGVuYWJs
ZSkKKy8qCisgKiBSZXR1cm5zIHRydWUgaWYgb25lIHNpZGUgKGt2bSBvciBrdm1pKSB0cmllcyB0
byBkaXNhYmxlIHRoZSBNU1Igd3JpdGUKKyAqIGludGVyY2VwdGlvbiB3aGlsZSB0aGUgb3RoZXIg
c2lkZSBpcyBzdGlsbCB0cmFja2luZyBpdC4KKyAqLworYm9vbCBrdm1pX21vbml0b3JfbXNyd19p
bnRlcmNlcHQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCB1MzIgbXNyLCBib29sIGVuYWJsZSkKIHsK
LQl1bnNpZ25lZCBsb25nICptYXNrID0gbXNyX21hc2sodmNwdSwgJm1zcik7CisJc3RydWN0IGt2
bWlfaW50ZXJjZXB0aW9uICphcmNoX3ZjcHVpOworCisJaWYgKCF2Y3B1KQorCQlyZXR1cm4gZmFs
c2U7CisKKwlhcmNoX3ZjcHVpID0gUkVBRF9PTkNFKHZjcHUtPmFyY2gua3ZtaSk7CisKKwlyZXR1
cm4gKGFyY2hfdmNwdWkgJiYgYXJjaF92Y3B1aS0+bXNydy5tb25pdG9yX2ZjdCh2Y3B1LCBtc3Is
IGVuYWJsZSkpOworfQorRVhQT1JUX1NZTUJPTChrdm1pX21vbml0b3JfbXNyd19pbnRlcmNlcHQp
OworCitzdGF0aWMgYm9vbCBtc3JfY29udHJvbChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHVuc2ln
bmVkIGludCBtc3IsIGJvb2wgZW5hYmxlLAorCQkJYm9vbCBrdm1pKQoreworCXVuc2lnbmVkIGxv
bmcgKm1hc2sgPSBtc3JfbWFzayh2Y3B1LCAmbXNyLCBrdm1pKTsKIAogCWlmICghbWFzaykKIAkJ
cmV0dXJuIGZhbHNlOwpAQCAtMzgzLDYgKzQwNCw2MyBAQCBzdGF0aWMgYm9vbCBtc3JfY29udHJv
bChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHVuc2lnbmVkIGludCBtc3IsIGJvb2wgZW5hYmxlKQog
CXJldHVybiB0cnVlOwogfQogCitzdGF0aWMgYm9vbCBtc3JfaW50ZXJjZXB0ZWRfYnlfa3ZtaShz
dHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHUzMiBtc3IpCit7CisJcmV0dXJuIHRlc3RfbXNyX21hc2so
dmNwdSwgbXNyLCB0cnVlKTsKK30KKworc3RhdGljIGJvb2wgbXNyX2ludGVyY2VwdGVkX2J5X2t2
bShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHUzMiBtc3IpCit7CisJcmV0dXJuIHRlc3RfbXNyX21h
c2sodmNwdSwgbXNyLCBmYWxzZSk7Cit9CisKK3N0YXRpYyB2b2lkIHJlY29yZF9tc3JfaW50ZXJj
ZXB0X3N0YXR1c19mb3Jfa3ZtaShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHUzMiBtc3IsCisJCQkJ
CQkgYm9vbCBlbmFibGUpCit7CisJbXNyX2NvbnRyb2wodmNwdSwgbXNyLCBlbmFibGUsIHRydWUp
OworfQorCitzdGF0aWMgdm9pZCByZWNvcmRfbXNyX2ludGVyY2VwdF9zdGF0dXNfZm9yX2t2bShz
dHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHUzMiBtc3IsCisJCQkJCQlib29sIGVuYWJsZSkKK3sKKwlt
c3JfY29udHJvbCh2Y3B1LCBtc3IsIGVuYWJsZSwgZmFsc2UpOworfQorCitzdGF0aWMgYm9vbCBt
b25pdG9yX21zcndfZmN0X2t2bWkoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCB1MzIgbXNyLCBib29s
IGVuYWJsZSkKK3sKKwlib29sIHJldCA9IGZhbHNlOworCisJaWYgKGVuYWJsZSkgeworCQlpZiAo
a3ZtX3g4Nl9vcHMubXNyX3dyaXRlX2ludGVyY2VwdGVkKHZjcHUsIG1zcikpCisJCQlyZWNvcmRf
bXNyX2ludGVyY2VwdF9zdGF0dXNfZm9yX2t2bSh2Y3B1LCBtc3IsIHRydWUpOworCX0gZWxzZSB7
CisJCWlmICh1bmxpa2VseSghbXNyX2ludGVyY2VwdGVkX2J5X2t2bWkodmNwdSwgbXNyKSkpCisJ
CQlyZXQgPSB0cnVlOworCisJCWlmIChtc3JfaW50ZXJjZXB0ZWRfYnlfa3ZtKHZjcHUsIG1zcikp
CisJCQlyZXQgPSB0cnVlOworCX0KKworCXJlY29yZF9tc3JfaW50ZXJjZXB0X3N0YXR1c19mb3Jf
a3ZtaSh2Y3B1LCBtc3IsIGVuYWJsZSk7CisKKwlyZXR1cm4gcmV0OworfQorCitzdGF0aWMgYm9v
bCBtb25pdG9yX21zcndfZmN0X2t2bShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHUzMiBtc3IsIGJv
b2wgZW5hYmxlKQoreworCWJvb2wgcmV0ID0gZmFsc2U7CisKKwlpZiAoIShtc3JfaW50ZXJjZXB0
ZWRfYnlfa3ZtaSh2Y3B1LCBtc3IpKSkKKwkJcmV0dXJuIGZhbHNlOworCisJaWYgKCFlbmFibGUp
CisJCXJldCA9IHRydWU7CisKKwlyZWNvcmRfbXNyX2ludGVyY2VwdF9zdGF0dXNfZm9yX2t2bSh2
Y3B1LCBtc3IsIGVuYWJsZSk7CisKKwlyZXR1cm4gcmV0OworfQorCiBzdGF0aWMgdW5zaWduZWQg
aW50IG1zcl9tYXNrX3RvX2Jhc2Uoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCB1bnNpZ25lZCBsb25n
ICptYXNrKQogewogCWlmIChtYXNrID09IHZjcHUtPmFyY2gua3ZtaS0+bXNydy5rdm1pX21hc2su
aGlnaCkKQEAgLTM5MywxMiArNDcxLDEzIEBAIHN0YXRpYyB1bnNpZ25lZCBpbnQgbXNyX21hc2tf
dG9fYmFzZShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHVuc2lnbmVkIGxvbmcgKm1hc2spCiAKIHZv
aWQga3ZtaV9jb250cm9sX21zcndfaW50ZXJjZXB0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdTMy
IG1zciwgYm9vbCBlbmFibGUpCiB7CisJdmNwdS0+YXJjaC5rdm1pLT5tc3J3Lm1vbml0b3JfZmN0
ID0gbW9uaXRvcl9tc3J3X2ZjdF9rdm1pOwogCWt2bV94ODZfb3BzLmNvbnRyb2xfbXNyX2ludGVy
Y2VwdCh2Y3B1LCBtc3IsIE1TUl9UWVBFX1csIGVuYWJsZSk7Ci0JbXNyX2NvbnRyb2wodmNwdSwg
bXNyLCBlbmFibGUpOworCXZjcHUtPmFyY2gua3ZtaS0+bXNydy5tb25pdG9yX2ZjdCA9IG1vbml0
b3JfbXNyd19mY3Rfa3ZtOwogfQogCi1zdGF0aWMgdm9pZCBrdm1pX2FyY2hfZGlzYWJsZV9tc3Jf
aW50ZXJjZXB0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKLQkJCQkJICAgIHVuc2lnbmVkIGxvbmcg
Km1hc2spCitzdGF0aWMgdm9pZCBrdm1pX2FyY2hfZGlzYWJsZV9tc3J3X2ludGVyY2VwdChzdHJ1
Y3Qga3ZtX3ZjcHUgKnZjcHUsCisJCQkJCSAgICAgdW5zaWduZWQgbG9uZyAqbWFzaykKIHsKIAl1
bnNpZ25lZCBpbnQgbXNyX2Jhc2UgPSBtc3JfbWFza190b19iYXNlKHZjcHUsIG1hc2spOwogCWlu
dCBvZmZzZXQgPSAtMTsKQEAgLTQwOSw4ICs0ODgsNyBAQCBzdGF0aWMgdm9pZCBrdm1pX2FyY2hf
ZGlzYWJsZV9tc3JfaW50ZXJjZXB0KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKIAkJaWYgKG9mZnNl
dCA+PSBLVk1JX05VTV9NU1IpCiAJCQlicmVhazsKIAotCQlrdm1feDg2X29wcy5jb250cm9sX21z
cl9pbnRlcmNlcHQodmNwdSwgbXNyX2Jhc2UgKyBvZmZzZXQsCi0JCQkJCQkgICBNU1JfVFlQRV9X
LCBmYWxzZSk7CisJCWt2bWlfY29udHJvbF9tc3J3X2ludGVyY2VwdCh2Y3B1LCBtc3JfYmFzZSAr
IG9mZnNldCwgZmFsc2UpOwogCX0KIAogCWJpdG1hcF96ZXJvKG1hc2ssIEtWTUlfTlVNX01TUik7
CkBAIC00NjIsOCArNTQwLDggQEAgc3RhdGljIHZvaWQga3ZtaV9hcmNoX3Jlc3RvcmVfaW50ZXJj
ZXB0aW9uKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKIAlrdm1pX2FyY2hfZGlzYWJsZV9icF9pbnRl
cmNlcHQodmNwdSk7CiAJa3ZtaV9hcmNoX2Rpc2FibGVfY3Izd19pbnRlcmNlcHQodmNwdSk7CiAJ
a3ZtaV9hcmNoX2Rpc2FibGVfZGVzY19pbnRlcmNlcHQodmNwdSk7Ci0Ja3ZtaV9hcmNoX2Rpc2Fi
bGVfbXNyX2ludGVyY2VwdCh2Y3B1LCBhcmNoX3ZjcHVpLT5tc3J3Lmt2bWlfbWFzay5sb3cpOwot
CWt2bWlfYXJjaF9kaXNhYmxlX21zcl9pbnRlcmNlcHQodmNwdSwgYXJjaF92Y3B1aS0+bXNydy5r
dm1pX21hc2suaGlnaCk7CisJa3ZtaV9hcmNoX2Rpc2FibGVfbXNyd19pbnRlcmNlcHQodmNwdSwg
YXJjaF92Y3B1aS0+bXNydy5rdm1pX21hc2subG93KTsKKwlrdm1pX2FyY2hfZGlzYWJsZV9tc3J3
X2ludGVyY2VwdCh2Y3B1LCBhcmNoX3ZjcHVpLT5tc3J3Lmt2bWlfbWFzay5oaWdoKTsKIH0KIAog
Ym9vbCBrdm1pX2FyY2hfY2xlYW5fdXBfaW50ZXJjZXB0aW9uKHN0cnVjdCBrdm1fdmNwdSAqdmNw
dSkKQEAgLTQ5MCwxMiArNTY4LDE0IEBAIGJvb2wga3ZtaV9hcmNoX3ZjcHVfYWxsb2NfaW50ZXJj
ZXB0aW9uKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKIAlhcmNoX3ZjcHVpLT5icmVha3BvaW50Lm1v
bml0b3JfZmN0ID0gbW9uaXRvcl9icF9mY3Rfa3ZtOwogCWFyY2hfdmNwdWktPmNyM3cubW9uaXRv
cl9mY3QgPSBtb25pdG9yX2NyM3dfZmN0X2t2bTsKIAlhcmNoX3ZjcHVpLT5kZXNjcmlwdG9yLm1v
bml0b3JfZmN0ID0gbW9uaXRvcl9kZXNjX2ZjdF9rdm07CisJYXJjaF92Y3B1aS0+bXNydy5tb25p
dG9yX2ZjdCA9IG1vbml0b3JfbXNyd19mY3Rfa3ZtOwogCiAJLyoKIAkgKiBwYWlyZWQgd2l0aDoK
IAkgKiAgLSBrdm1pX21vbml0b3JfYnBfaW50ZXJjZXB0KCkKIAkgKiAgLSBrdm1pX21vbml0b3Jf
Y3Izd19pbnRlcmNlcHQoKQogCSAqICAtIGt2bWlfbW9uaXRvcl9kZXNjX2ludGVyY2VwdCgpCisJ
ICogIC0ga3ZtaV9tb25pdG9yX21zcndfaW50ZXJjZXB0KCkKIAkgKi8KIAlzbXBfd21iKCk7CiAJ
V1JJVEVfT05DRSh2Y3B1LT5hcmNoLmt2bWksIGFyY2hfdmNwdWkpOwpAQCAtNzc3LDYgKzg1Nywy
MCBAQCBib29sIGt2bWlfZGVzY3JpcHRvcl9ldmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHU4
IGRlc2NyaXB0b3IsIGJvb2wgd3JpdGUpCiB9CiBFWFBPUlRfU1lNQk9MKGt2bWlfZGVzY3JpcHRv
cl9ldmVudCk7CiAKK2Jvb2wga3ZtaV9tc3J3X2ludGVyY2VwdF9vcmlnaW5hdG9yKHN0cnVjdCBr
dm1fdmNwdSAqdmNwdSkKK3sKKwlzdHJ1Y3Qga3ZtaV9pbnRlcmNlcHRpb24gKmFyY2hfdmNwdWk7
CisKKwlpZiAoIXZjcHUpCisJCXJldHVybiBmYWxzZTsKKworCWFyY2hfdmNwdWkgPSBSRUFEX09O
Q0UodmNwdS0+YXJjaC5rdm1pKTsKKworCXJldHVybiAoYXJjaF92Y3B1aSAmJgorCQlhcmNoX3Zj
cHVpLT5tc3J3Lm1vbml0b3JfZmN0ID09IG1vbml0b3JfbXNyd19mY3Rfa3ZtaSk7Cit9CitFWFBP
UlRfU1lNQk9MKGt2bWlfbXNyd19pbnRlcmNlcHRfb3JpZ2luYXRvcik7CisKIHN0YXRpYyBib29s
IF9fa3ZtaV9tc3JfZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3QgbXNyX2RhdGEg
Km1zcikKIHsKIAlzdHJ1Y3QgbXNyX2RhdGEgb2xkX21zciA9IHsKQEAgLTc4Nyw3ICs4ODEsNyBA
QCBzdGF0aWMgYm9vbCBfX2t2bWlfbXNyX2V2ZW50KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgc3Ry
dWN0IG1zcl9kYXRhICptc3IpCiAJdTMyIGFjdGlvbjsKIAlib29sIHJldDsKIAotCWlmICghdGVz
dF9tc3JfbWFzayh2Y3B1LCBtc3ItPmluZGV4KSkKKwlpZiAoIXRlc3RfbXNyX21hc2sodmNwdSwg
bXNyLT5pbmRleCwgdHJ1ZSkpCiAJCXJldHVybiB0cnVlOwogCWlmIChrdm1feDg2X29wcy5nZXRf
bXNyKHZjcHUsICZvbGRfbXNyKSkKIAkJcmV0dXJuIHRydWU7CmRpZmYgLS1naXQgYS9hcmNoL3g4
Ni9rdm0vc3ZtL3N2bS5jIGIvYXJjaC94ODYva3ZtL3N2bS9zdm0uYwppbmRleCA4MzRlNGI2YzQx
MTIuLjA4MTg5ZTgxNGY1OSAxMDA2NDQKLS0tIGEvYXJjaC94ODYva3ZtL3N2bS9zdm0uYworKysg
Yi9hcmNoL3g4Ni9rdm0vc3ZtL3N2bS5jCkBAIC02NDEsNiArNjQxLDE2IEBAIHN0YXRpYyB2b2lk
IHNldF9tc3JfaW50ZXJjZXB0aW9uX2JpdG1hcChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHUzMiAq
bXNycG0sCiAJdW5zaWduZWQgbG9uZyB0bXA7CiAJdTMyIG9mZnNldDsKIAorI2lmZGVmIENPTkZJ
R19LVk1fSU5UUk9TUEVDVElPTgorCWlmICgodHlwZSAmIE1TUl9UWVBFX1cpICYmCisJICAgIGt2
bWlfbW9uaXRvcl9tc3J3X2ludGVyY2VwdCh2Y3B1LCBtc3IsICF2YWx1ZSkpCisJCXR5cGUgJj0g
fk1TUl9UWVBFX1c7CisKKwkvKgorCSAqIEF2b2lkIHRoZSBiZWxvdyB3YXJuaW5nIGZvciBrdm1p
IGludGVyY2VwdGVkIG1zcnMuCisJICovCisJaWYgKCFrdm1pX21zcndfaW50ZXJjZXB0X29yaWdp
bmF0b3IodmNwdSkpCisjZW5kaWYgLyogQ09ORklHX0tWTV9JTlRST1NQRUNUSU9OICovCiAJLyoK
IAkgKiBJZiB0aGlzIHdhcm5pbmcgdHJpZ2dlcnMgZXh0ZW5kIHRoZSBkaXJlY3RfYWNjZXNzX21z
cnMgbGlzdCBhdCB0aGUKIAkgKiBiZWdpbm5pbmcgb2YgdGhlIGZpbGUKZGlmZiAtLWdpdCBhL2Fy
Y2gveDg2L2t2bS92bXgvdm14LmMgYi9hcmNoL3g4Ni9rdm0vdm14L3ZteC5jCmluZGV4IDI0NTMz
MmNlOTFhNS4uMDFkMThjOTI0M2JjIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0vdm14L3ZteC5j
CisrKyBiL2FyY2gveDg2L2t2bS92bXgvdm14LmMKQEAgLTM3NTUsNiArMzc1NSwxMiBAQCBzdGF0
aWMgX19hbHdheXNfaW5saW5lIHZvaWQgdm14X2Rpc2FibGVfaW50ZXJjZXB0X2Zvcl9tc3Ioc3Ry
dWN0IGt2bV92Y3B1ICp2Y3B1LAogCWlmICghY3B1X2hhc192bXhfbXNyX2JpdG1hcCgpKQogCQly
ZXR1cm47CiAKKyNpZmRlZiBDT05GSUdfS1ZNX0lOVFJPU1BFQ1RJT04KKwlpZiAoKHR5cGUgJiBN
U1JfVFlQRV9XKSAmJgorCSAgICBrdm1pX21vbml0b3JfbXNyd19pbnRlcmNlcHQodmNwdSwgbXNy
LCBmYWxzZSkpCisJCXR5cGUgJj0gfk1TUl9UWVBFX1c7CisjZW5kaWYgLyogQ09ORklHX0tWTV9J
TlRST1NQRUNUSU9OICovCisKIAlpZiAoc3RhdGljX2JyYW5jaF91bmxpa2VseSgmZW5hYmxlX2V2
bWNzKSkKIAkJZXZtY3NfdG91Y2hfbXNyX2JpdG1hcCgpOwogCkBAIC0zODAxLDYgKzM4MDcsMTEg
QEAgc3RhdGljIF9fYWx3YXlzX2lubGluZSB2b2lkIHZteF9lbmFibGVfaW50ZXJjZXB0X2Zvcl9t
c3Ioc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAogCWlmICghY3B1X2hhc192bXhfbXNyX2JpdG1hcCgp
KQogCQlyZXR1cm47CiAKKyNpZmRlZiBDT05GSUdfS1ZNX0lOVFJPU1BFQ1RJT04KKwlpZiAodHlw
ZSAmIE1TUl9UWVBFX1cpCisJCWt2bWlfbW9uaXRvcl9tc3J3X2ludGVyY2VwdCh2Y3B1LCBtc3Is
IHRydWUpOworI2VuZGlmIC8qIENPTkZJR19LVk1fSU5UUk9TUEVDVElPTiAqLworCiAJaWYgKHN0
YXRpY19icmFuY2hfdW5saWtlbHkoJmVuYWJsZV9ldm1jcykpCiAJCWV2bWNzX3RvdWNoX21zcl9i
aXRtYXAoKTsKIApfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
XwpWaXJ0dWFsaXphdGlvbiBtYWlsaW5nIGxpc3QKVmlydHVhbGl6YXRpb25AbGlzdHMubGludXgt
Zm91bmRhdGlvbi5vcmcKaHR0cHM6Ly9saXN0cy5saW51eGZvdW5kYXRpb24ub3JnL21haWxtYW4v
bGlzdGluZm8vdmlydHVhbGl6YXRpb24=
