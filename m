Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
	by mail.lfdr.de (Postfix) with ESMTPS id 9DC731978BB
	for <lists.virtualization@lfdr.de>; Mon, 30 Mar 2020 12:19:56 +0200 (CEST)
Received: from localhost (localhost [127.0.0.1])
	by fraxinus.osuosl.org (Postfix) with ESMTP id 5500E86A70;
	Mon, 30 Mar 2020 10:19:55 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id JdZupzZn5RZ4; Mon, 30 Mar 2020 10:19:53 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by fraxinus.osuosl.org (Postfix) with ESMTP id 491A386A29;
	Mon, 30 Mar 2020 10:19:53 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 1FA45C07FF;
	Mon, 30 Mar 2020 10:19:53 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 7BE54C07FF
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:49 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by fraxinus.osuosl.org (Postfix) with ESMTP id 789AC86A14
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:49 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id pYhhBnD4MOLN
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:48 +0000 (UTC)
X-Greylist: domain auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by fraxinus.osuosl.org (Postfix) with ESMTPS id 4A71D86A11
 for <virtualization@lists.linux-foundation.org>;
 Mon, 30 Mar 2020 10:19:48 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp02.buh.bitdefender.net [10.17.80.76])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 EB6D7305FFB1; Mon, 30 Mar 2020 13:12:57 +0300 (EEST)
Received: from localhost.localdomain (unknown [91.199.104.28])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id CF974305B7A1;
 Mon, 30 Mar 2020 13:12:57 +0300 (EEST)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v8 57/81] KVM: introspection: add KVMI_VCPU_GET_REGISTERS
Date: Mon, 30 Mar 2020 13:12:44 +0300
Message-Id: <20200330101308.21702-58-alazar@bitdefender.com>
In-Reply-To: <20200330101308.21702-1-alazar@bitdefender.com>
References: <20200330101308.21702-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 =?UTF-8?q?Mihai=20Don=C8=9Bu?= <mdontu@bitdefender.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

RnJvbTogTWloYWkgRG9uyJt1IDxtZG9udHVAYml0ZGVmZW5kZXIuY29tPgoKVGhpcyBjb21tYW5k
IGlzIHVzZWQgdG8gZ2V0IGt2bV9yZWdzIGFuZCBrdm1fc3JlZ3Mgc3RydWN0dXJlcywKcGx1cyB0
aGUgbGlzdCBvZiBzdHJ1Y3Qga3ZtX21zcnMuCgpTaWduZWQtb2ZmLWJ5OiBNaWhhaSBEb27Im3Ug
PG1kb250dUBiaXRkZWZlbmRlci5jb20+CkNvLWRldmVsb3BlZC1ieTogQWRhbGJlcnQgTGF6xINy
IDxhbGF6YXJAYml0ZGVmZW5kZXIuY29tPgpTaWduZWQtb2ZmLWJ5OiBBZGFsYmVydCBMYXrEg3Ig
PGFsYXphckBiaXRkZWZlbmRlci5jb20+Ci0tLQogRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1p
LnJzdCAgICAgICAgICAgICAgIHwgNDIgKysrKysrKysrCiBhcmNoL3g4Ni9pbmNsdWRlL3VhcGkv
YXNtL2t2bWkuaCAgICAgICAgICAgICAgfCAxNSArKysKIGFyY2gveDg2L2t2bS9rdm1pLmMgICAg
ICAgICAgICAgICAgICAgICAgICAgICB8IDkxICsrKysrKysrKysrKysrKysrKysKIGluY2x1ZGUv
dWFwaS9saW51eC9rdm1pLmggICAgICAgICAgICAgICAgICAgICB8ICAxICsKIC4uLi90ZXN0aW5n
L3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jICB8IDI2ICsrKysrKwogdmlydC9rdm0v
aW50cm9zcGVjdGlvbi9rdm1pLmMgICAgICAgICAgICAgICAgIHwgIDcgKysKIHZpcnQva3ZtL2lu
dHJvc3BlY3Rpb24va3ZtaV9pbnQuaCAgICAgICAgICAgICB8ICA4ICsrCiB2aXJ0L2t2bS9pbnRy
b3NwZWN0aW9uL2t2bWlfbXNnLmMgICAgICAgICAgICAgfCAyMSArKysrKwogOCBmaWxlcyBjaGFu
Z2VkLCAyMTEgaW5zZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vdmlydC9r
dm0va3ZtaS5yc3QgYi9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CmluZGV4IGIwZWIy
NjQ5YjEwYy4uMDAwMDA5OWU4MDM4IDEwMDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL3ZpcnQva3Zt
L2t2bWkucnN0CisrKyBiL0RvY3VtZW50YXRpb24vdmlydC9rdm0va3ZtaS5yc3QKQEAgLTU2Niw2
ICs1NjYsNDggQEAgdGhlICpLVk1JX1ZNX0NPTlRST0xfRVZFTlRTKiBjb21tYW5kLgogKiAtS1ZN
X0VQRVJNIC0gdGhlIGFjY2VzcyBpcyBkaXNhbGxvd2VkICh1c2UgKktWTUlfVk1fQ0hFQ0tfRVZF
TlQqIGZpcnN0KQogKiAtS1ZNX0VBR0FJTiAtIHRoZSBzZWxlY3RlZCB2Q1BVIGNhbid0IGJlIGlu
dHJvc3BlY3RlZCB5ZXQKIAorMTEuIEtWTUlfVkNQVV9HRVRfUkVHSVNURVJTCistLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0KKworOkFyY2hpdGVjdHVyZXM6IHg4NgorOlZlcnNpb25zOiA+PSAx
Cis6UGFyYW1ldGVyczoKKworOjoKKworCXN0cnVjdCBrdm1pX3ZjcHVfaGRyOworCXN0cnVjdCBr
dm1pX3ZjcHVfZ2V0X3JlZ2lzdGVycyB7CisJCV9fdTE2IG5tc3JzOworCQlfX3UxNiBwYWRkaW5n
MTsKKwkJX191MzIgcGFkZGluZzI7CisJCV9fdTMyIG1zcnNfaWR4WzBdOworCX07CisKKzpSZXR1
cm5zOgorCis6OgorCisJc3RydWN0IGt2bWlfZXJyb3JfY29kZTsKKwlzdHJ1Y3Qga3ZtaV92Y3B1
X2dldF9yZWdpc3RlcnNfcmVwbHkgeworCQlfX3UzMiBtb2RlOworCQlfX3UzMiBwYWRkaW5nOwor
CQlzdHJ1Y3Qga3ZtX3JlZ3MgcmVnczsKKwkJc3RydWN0IGt2bV9zcmVncyBzcmVnczsKKwkJc3Ry
dWN0IGt2bV9tc3JzIG1zcnM7CisJfTsKKworRm9yIHRoZSBnaXZlbiB2Q1BVIGFuZCB0aGUgYGBu
bXNyc2BgIHNpemVkIGFycmF5IG9mIE1TUnMgcmVnaXN0ZXJzLAorcmV0dXJucyB0aGUgY3VycmVu
dCB2Q1BVIG1vZGUgKGluIGJ5dGVzOiAyLCA0IG9yIDgpLCB0aGUgZ2VuZXJhbCBwdXJwb3NlCity
ZWdpc3RlcnMsIHRoZSBzcGVjaWFsIHJlZ2lzdGVycyBhbmQgdGhlIHJlcXVlc3RlZCBzZXQgb2Yg
TVNScy4KKworOkVycm9yczoKKworKiAtS1ZNX0VJTlZBTCAtIHRoZSBzZWxlY3RlZCB2Q1BVIGlz
IGludmFsaWQKKyogLUtWTV9FSU5WQUwgLSBvbmUgb2YgdGhlIGluZGljYXRlZCBNU1JzIGlzIGlu
dmFsaWQKKyogLUtWTV9FSU5WQUwgLSB0aGUgcGFkZGluZyBpcyBub3QgemVybworKiAtS1ZNX0VB
R0FJTiAtIHRoZSBzZWxlY3RlZCB2Q1BVIGNhbid0IGJlIGludHJvc3BlY3RlZCB5ZXQKKyogLUtW
TV9FTk9NRU0gLSB0aGVyZSBpcyBub3QgZW5vdWdoIG1lbW9yeSB0byBhbGxvY2F0ZSB0aGUgcmVw
bHkKKwogRXZlbnRzCiA9PT09PT0KIApkaWZmIC0tZ2l0IGEvYXJjaC94ODYvaW5jbHVkZS91YXBp
L2FzbS9rdm1pLmggYi9hcmNoL3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWkuaAppbmRleCA4OWFk
Zjg0Y2VmZTQuLmYxNDY3NGMzYzEwOSAxMDA2NDQKLS0tIGEvYXJjaC94ODYvaW5jbHVkZS91YXBp
L2FzbS9rdm1pLmgKKysrIGIvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKQEAgLTMw
LDQgKzMwLDE5IEBAIHN0cnVjdCBrdm1pX3ZjcHVfZ2V0X2luZm9fcmVwbHkgewogCV9fdTY0IHRz
Y19zcGVlZDsKIH07CiAKK3N0cnVjdCBrdm1pX3ZjcHVfZ2V0X3JlZ2lzdGVycyB7CisJX191MTYg
bm1zcnM7CisJX191MTYgcGFkZGluZzE7CisJX191MzIgcGFkZGluZzI7CisJX191MzIgbXNyc19p
ZHhbMF07Cit9OworCitzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnNfcmVwbHkgeworCV9f
dTMyIG1vZGU7CisJX191MzIgcGFkZGluZzsKKwlzdHJ1Y3Qga3ZtX3JlZ3MgcmVnczsKKwlzdHJ1
Y3Qga3ZtX3NyZWdzIHNyZWdzOworCXN0cnVjdCBrdm1fbXNycyBtc3JzOworfTsKKwogI2VuZGlm
IC8qIF9VQVBJX0FTTV9YODZfS1ZNSV9IICovCmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9rdm0va3Zt
aS5jIGIvYXJjaC94ODYva3ZtL2t2bWkuYwppbmRleCAyMWZmNDhjZmRiODkuLjFiYTI2NGMxMGNm
ZiAxMDA2NDQKLS0tIGEvYXJjaC94ODYva3ZtL2t2bWkuYworKysgYi9hcmNoL3g4Ni9rdm0va3Zt
aS5jCkBAIC05OCwzICs5OCw5NCBAQCBpbnQga3ZtaV9hcmNoX2NtZF92Y3B1X2dldF9pbmZvKHN0
cnVjdCBrdm1fdmNwdSAqdmNwdSwKIAogCXJldHVybiAwOwogfQorCitpbnQga3ZtaV9hcmNoX2No
ZWNrX2dldF9yZWdpc3RlcnNfcmVxKGNvbnN0IHN0cnVjdCBrdm1pX21zZ19oZHIgKm1zZywKKwkJ
CQljb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnMgKnJlcSkKK3sKKwlzaXplX3Qg
cmVxX3NpemU7CisKKwlpZiAoY2hlY2tfYWRkX292ZXJmbG93KHNpemVvZihzdHJ1Y3Qga3ZtaV92
Y3B1X2hkciksCisJCQkJc3RydWN0X3NpemUocmVxLCBtc3JzX2lkeCwgcmVxLT5ubXNycyksCisJ
CQkJJnJlcV9zaXplKSkKKwkJcmV0dXJuIC0xOworCisJaWYgKG1zZy0+c2l6ZSAhPSByZXFfc2l6
ZSkKKwkJcmV0dXJuIC0xOworCisJcmV0dXJuIDA7Cit9CisKK3N0YXRpYyB2b2lkICphbGxvY19n
ZXRfcmVnaXN0ZXJzX3JlcGx5KGNvbnN0IHN0cnVjdCBrdm1pX21zZ19oZHIgKm1zZywKKwkJCQlj
b25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnMgKnJlcSwKKwkJCQlzaXplX3QgKnJw
bF9zaXplKQoreworCXN0cnVjdCBrdm1pX3ZjcHVfZ2V0X3JlZ2lzdGVyc19yZXBseSAqcnBsOwor
CXUxNiBrLCBuID0gcmVxLT5ubXNyczsKKworCSpycGxfc2l6ZSA9IHN0cnVjdF9zaXplKHJwbCwg
bXNycy5lbnRyaWVzLCBuKTsKKwlycGwgPSBrdm1pX21zZ19hbGxvY19jaGVjaygqcnBsX3NpemUp
OworCWlmIChycGwpIHsKKwkJcnBsLT5tc3JzLm5tc3JzID0gbjsKKworCQlmb3IgKGsgPSAwOyBr
IDwgbjsgaysrKQorCQkJcnBsLT5tc3JzLmVudHJpZXNba10uaW5kZXggPSByZXEtPm1zcnNfaWR4
W2tdOworCX0KKworCXJldHVybiBycGw7Cit9CisKK3N0YXRpYyBpbnQga3ZtaV9nZXRfcmVnaXN0
ZXJzKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdTMyICptb2RlLAorCQkJICAgICAgc3RydWN0IGt2
bV9yZWdzICpyZWdzLAorCQkJICAgICAgc3RydWN0IGt2bV9zcmVncyAqc3JlZ3MsCisJCQkgICAg
ICBzdHJ1Y3Qga3ZtX21zcnMgKm1zcnMpCit7CisJc3RydWN0IGt2bV9tc3JfZW50cnkgKm1zciA9
IG1zcnMtPmVudHJpZXM7CisJc3RydWN0IGt2bV9tc3JfZW50cnkgKmVuZCA9IG1zcnMtPmVudHJp
ZXMgKyBtc3JzLT5ubXNyczsKKwlpbnQgZXJyID0gMDsKKworCWt2bV9hcmNoX3ZjcHVfZ2V0X3Jl
Z3ModmNwdSwgcmVncyk7CisJa3ZtX2FyY2hfdmNwdV9nZXRfc3JlZ3ModmNwdSwgc3JlZ3MpOwor
CSptb2RlID0ga3ZtaV92Y3B1X21vZGUodmNwdSwgc3JlZ3MpOworCisJZm9yICg7IG1zciA8IGVu
ZDsgbXNyKyspIHsKKwkJc3RydWN0IG1zcl9kYXRhIG0gPSB7CisJCQkuaW5kZXggPSBtc3ItPmlu
ZGV4LAorCQkJLmhvc3RfaW5pdGlhdGVkID0gdHJ1ZQorCQl9OworCQlpbnQgZXJyID0ga3ZtX3g4
Nl9vcHMtPmdldF9tc3IodmNwdSwgJm0pOworCisJCWlmIChlcnIpCisJCQlicmVhazsKKworCQlt
c3ItPmRhdGEgPSBtLmRhdGE7CisJfQorCisJcmV0dXJuIGVyciA/IC1LVk1fRUlOVkFMIDogMDsK
K30KKworaW50IGt2bWlfYXJjaF9jbWRfdmNwdV9nZXRfcmVnaXN0ZXJzKHN0cnVjdCBrdm1fdmNw
dSAqdmNwdSwKKwkJCQljb25zdCBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICptc2csCisJCQkJY29uc3Qg
c3RydWN0IGt2bWlfdmNwdV9nZXRfcmVnaXN0ZXJzICpyZXEsCisJCQkJc3RydWN0IGt2bWlfdmNw
dV9nZXRfcmVnaXN0ZXJzX3JlcGx5ICoqZGVzdCwKKwkJCQlzaXplX3QgKmRlc3Rfc2l6ZSkKK3sK
KwlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnNfcmVwbHkgKnJwbDsKKwlzaXplX3QgcnBs
X3NpemU7CisJaW50IGVycjsKKworCWlmIChyZXEtPnBhZGRpbmcxIHx8IHJlcS0+cGFkZGluZzIp
CisJCXJldHVybiAtS1ZNX0VJTlZBTDsKKworCXJwbCA9IGFsbG9jX2dldF9yZWdpc3RlcnNfcmVw
bHkobXNnLCByZXEsICZycGxfc2l6ZSk7CisJaWYgKCFycGwpCisJCXJldHVybiAtS1ZNX0VOT01F
TTsKKworCWVyciA9IGt2bWlfZ2V0X3JlZ2lzdGVycyh2Y3B1LCAmcnBsLT5tb2RlLCAmcnBsLT5y
ZWdzLAorCQkJCSAmcnBsLT5zcmVncywgJnJwbC0+bXNycyk7CisKKwkqZGVzdCA9IHJwbDsKKwkq
ZGVzdF9zaXplID0gcnBsX3NpemU7CisKKwlyZXR1cm4gZXJyOworCit9CmRpZmYgLS1naXQgYS9p
bmNsdWRlL3VhcGkvbGludXgva3ZtaS5oIGIvaW5jbHVkZS91YXBpL2xpbnV4L2t2bWkuaAppbmRl
eCBlMzYxZDZlNjU2M2QuLmMzNTRjNWUxNWJlMSAxMDA2NDQKLS0tIGEvaW5jbHVkZS91YXBpL2xp
bnV4L2t2bWkuaAorKysgYi9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCkBAIC0yOCw2ICsyOCw3
IEBAIGVudW0gewogCUtWTUlfVkNQVV9HRVRfSU5GTyAgICAgICA9IDksCiAJS1ZNSV9WQ1BVX1BB
VVNFICAgICAgICAgID0gMTAsCiAJS1ZNSV9WQ1BVX0NPTlRST0xfRVZFTlRTID0gMTEsCisJS1ZN
SV9WQ1BVX0dFVF9SRUdJU1RFUlMgID0gMTIsCiAKIAlLVk1JX05VTV9NRVNTQUdFUwogfTsKZGlm
ZiAtLWdpdCBhL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMg
Yi90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jCmluZGV4IDk0
Mzc4MDY2ZDY5YS4uMmZiMTkxNzQwY2FlIDEwMDY0NAotLS0gYS90b29scy90ZXN0aW5nL3NlbGZ0
ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5jCisrKyBiL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3Rz
L2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKQEAgLTgwNyw2ICs4MDcsMzEgQEAgc3RhdGljIHZvaWQg
dGVzdF9jbWRfdmNwdV9jb250cm9sX2V2ZW50cyhzdHJ1Y3Qga3ZtX3ZtICp2bSkKIAl0ZXN0X2lu
dmFsaWRfdmNwdV9ldmVudCh2bSwgaW52YWxpZF9pZCk7CiB9CiAKK3N0YXRpYyB2b2lkIGdldF92
Y3B1X3JlZ2lzdGVycyhzdHJ1Y3Qga3ZtX3ZtICp2bSwKKwkJCSAgICAgICBzdHJ1Y3Qga3ZtX3Jl
Z3MgKnJlZ3MpCit7CisJc3RydWN0IHsKKwkJc3RydWN0IGt2bWlfbXNnX2hkciBoZHI7CisJCXN0
cnVjdCBrdm1pX3ZjcHVfaGRyIHZjcHVfaGRyOworCQlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdp
c3RlcnMgY21kOworCX0gcmVxID0ge307CisJc3RydWN0IGt2bWlfdmNwdV9nZXRfcmVnaXN0ZXJz
X3JlcGx5IHJwbDsKKworCXRlc3RfdmNwdTBfY29tbWFuZCh2bSwgS1ZNSV9WQ1BVX0dFVF9SRUdJ
U1RFUlMsICZyZXEuaGRyLCBzaXplb2YocmVxKSwKKwkJCSAgICZycGwsIHNpemVvZihycGwpKTsK
KworCW1lbWNweShyZWdzLCAmcnBsLnJlZ3MsIHNpemVvZigqcmVncykpOworfQorCitzdGF0aWMg
dm9pZCB0ZXN0X2NtZF92Y3B1X2dldF9yZWdpc3RlcnMoc3RydWN0IGt2bV92bSAqdm0pCit7CisJ
c3RydWN0IGt2bV9yZWdzIHJlZ3MgPSB7fTsKKworCWdldF92Y3B1X3JlZ2lzdGVycyh2bSwgJnJl
Z3MpOworCisJREVCVUcoImdldF9yZWdpc3RlcnMgcmlwIDB4JWxseFxuIiwgcmVncy5yaXApOwor
fQorCiBzdGF0aWMgdm9pZCB0ZXN0X2ludHJvc3BlY3Rpb24oc3RydWN0IGt2bV92bSAqdm0pCiB7
CiAJc3JhbmRvbSh0aW1lKDApKTsKQEAgLTgyNCw2ICs4NDksNyBAQCBzdGF0aWMgdm9pZCB0ZXN0
X2ludHJvc3BlY3Rpb24oc3RydWN0IGt2bV92bSAqdm0pCiAJdGVzdF9jbWRfZ2V0X3ZjcHVfaW5m
byh2bSk7CiAJdGVzdF9wYXVzZSh2bSk7CiAJdGVzdF9jbWRfdmNwdV9jb250cm9sX2V2ZW50cyh2
bSk7CisJdGVzdF9jbWRfdmNwdV9nZXRfcmVnaXN0ZXJzKHZtKTsKIAogCXVuaG9va19pbnRyb3Nw
ZWN0aW9uKHZtKTsKIH0KZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5j
IGIvdmlydC9rdm0vaW50cm9zcGVjdGlvbi9rdm1pLmMKaW5kZXggYjZiM2VmZDA4NWM0Li44ZDI5
MmE0YmUyNzAgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jCisrKyBi
L3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaS5jCkBAIC0yNiw2ICsyNiwxMyBAQCB2b2lkICpr
dm1pX21zZ19hbGxvYyh2b2lkKQogCXJldHVybiBrbWVtX2NhY2hlX3phbGxvYyhtc2dfY2FjaGUs
IEdGUF9LRVJORUwpOwogfQogCit2b2lkICprdm1pX21zZ19hbGxvY19jaGVjayhzaXplX3Qgc2l6
ZSkKK3sKKwlpZiAoc2l6ZSA+IEtWTUlfTVNHX1NJWkVfQUxMT0MpCisJCXJldHVybiBOVUxMOwor
CXJldHVybiBrdm1pX21zZ19hbGxvYygpOworfQorCiB2b2lkIGt2bWlfbXNnX2ZyZWUodm9pZCAq
YWRkcikKIHsKIAlpZiAoYWRkcikKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24v
a3ZtaV9pbnQuaCBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaAppbmRleCBlOTQz
NTY1MTZhMDUuLjNlNDcxZTNhNzU1ZCAxMDA2NDQKLS0tIGEvdmlydC9rdm0vaW50cm9zcGVjdGlv
bi9rdm1pX2ludC5oCisrKyBiL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaApAQCAt
MzMsNiArMzMsNyBAQCB1MzIga3ZtaV9tc2dfc2VuZF92Y3B1X3BhdXNlKHN0cnVjdCBrdm1fdmNw
dSAqdmNwdSk7CiAKIC8qIGt2bWkuYyAqLwogdm9pZCAqa3ZtaV9tc2dfYWxsb2Modm9pZCk7Cit2
b2lkICprdm1pX21zZ19hbGxvY19jaGVjayhzaXplX3Qgc2l6ZSk7CiB2b2lkIGt2bWlfbXNnX2Zy
ZWUodm9pZCAqYWRkcik7CiBpbnQga3ZtaV9hZGRfam9iKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwK
IAkJIHZvaWQgKCpmY3QpKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgdm9pZCAqY3R4KSwKQEAgLTU1
LDUgKzU2LDEyIEBAIGludCBrdm1pX2NtZF92Y3B1X3BhdXNlKHN0cnVjdCBrdm1fdmNwdSAqdmNw
dSwgYm9vbCB3YWl0KTsKIGludCBrdm1pX2FyY2hfY21kX3ZjcHVfZ2V0X2luZm8oc3RydWN0IGt2
bV92Y3B1ICp2Y3B1LAogCQkJCXN0cnVjdCBrdm1pX3ZjcHVfZ2V0X2luZm9fcmVwbHkgKnJwbCk7
CiB2b2lkIGt2bWlfYXJjaF9zZXR1cF9ldmVudChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVj
dCBrdm1pX2V2ZW50ICpldik7CitpbnQga3ZtaV9hcmNoX2NoZWNrX2dldF9yZWdpc3RlcnNfcmVx
KGNvbnN0IHN0cnVjdCBrdm1pX21zZ19oZHIgKm1zZywKKwkJCQljb25zdCBzdHJ1Y3Qga3ZtaV92
Y3B1X2dldF9yZWdpc3RlcnMgKnJlcSk7CitpbnQga3ZtaV9hcmNoX2NtZF92Y3B1X2dldF9yZWdp
c3RlcnMoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAorCQkJCWNvbnN0IHN0cnVjdCBrdm1pX21zZ19o
ZHIgKm1zZywKKwkJCQljb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnMgKnJlcSwK
KwkJCQlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnNfcmVwbHkgKipkZXN0LAorCQkJCXNp
emVfdCAqZGVzdF9zaXplKTsKIAogI2VuZGlmCmRpZmYgLS1naXQgYS92aXJ0L2t2bS9pbnRyb3Nw
ZWN0aW9uL2t2bWlfbXNnLmMgYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNnLmMKaW5k
ZXggZjgxOWQwYTk0MmRjLi5lMzBlMWFkNWU0NDMgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2ludHJv
c3BlY3Rpb24va3ZtaV9tc2cuYworKysgYi92aXJ0L2t2bS9pbnRyb3NwZWN0aW9uL2t2bWlfbXNn
LmMKQEAgLTMwLDYgKzMwLDcgQEAgc3RhdGljIGNvbnN0IGNoYXIgKmNvbnN0IG1zZ19JRHNbXSA9
IHsKIAlbS1ZNSV9WTV9XUklURV9QSFlTSUNBTF0gICA9ICJLVk1JX1ZNX1dSSVRFX1BIWVNJQ0FM
IiwKIAlbS1ZNSV9WQ1BVX0NPTlRST0xfRVZFTlRTXSA9ICJLVk1JX1ZDUFVfQ09OVFJPTF9FVkVO
VFMiLAogCVtLVk1JX1ZDUFVfR0VUX0lORk9dICAgICAgID0gIktWTUlfVkNQVV9HRVRfSU5GTyIs
CisJW0tWTUlfVkNQVV9HRVRfUkVHSVNURVJTXSAgPSAiS1ZNSV9WQ1BVX0dFVF9SRUdJU1RFUlMi
LAogCVtLVk1JX1ZDUFVfUEFVU0VdICAgICAgICAgID0gIktWTUlfVkNQVV9QQVVTRSIsCiB9Owog
CkBAIC00NjYsNiArNDY3LDI1IEBAIHN0YXRpYyBpbnQgaGFuZGxlX3ZjcHVfY29udHJvbF9ldmVu
dHMoY29uc3Qgc3RydWN0IGt2bWlfdmNwdV9jbWRfam9iICpqb2IsCiAJcmV0dXJuIGt2bWlfbXNn
X3ZjcHVfcmVwbHkoam9iLCBtc2csIGVjLCBOVUxMLCAwKTsKIH0KIAorc3RhdGljIGludCBoYW5k
bGVfZ2V0X3JlZ2lzdGVycyhjb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X2NtZF9qb2IgKmpvYiwKKwkJ
CQljb25zdCBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICptc2csCisJCQkJY29uc3Qgdm9pZCAqcmVxKQor
eworCXN0cnVjdCBrdm1pX3ZjcHVfZ2V0X3JlZ2lzdGVyc19yZXBseSAqcnBsID0gTlVMTDsKKwlz
aXplX3QgcnBsX3NpemUgPSAwOworCWludCBlcnIsIGVjOworCisJaWYgKGt2bWlfYXJjaF9jaGVj
a19nZXRfcmVnaXN0ZXJzX3JlcShtc2csIHJlcSkpCisJCXJldHVybiAtRUlOVkFMOworCisJZWMg
PSBrdm1pX2FyY2hfY21kX3ZjcHVfZ2V0X3JlZ2lzdGVycyhqb2ItPnZjcHUsIG1zZywgcmVxLAor
CQkJCQkgICAgICAmcnBsLCAmcnBsX3NpemUpOworCisJZXJyID0ga3ZtaV9tc2dfdmNwdV9yZXBs
eShqb2IsIG1zZywgZWMsIHJwbCwgcnBsX3NpemUpOworCWt2bWlfbXNnX2ZyZWUocnBsKTsKKwly
ZXR1cm4gZXJyOworfQorCiAvKgogICogVGhlc2UgY29tbWFuZHMgYXJlIGV4ZWN1dGVkIGZyb20g
dGhlIHZDUFUgdGhyZWFkLiBUaGUgcmVjZWl2aW5nIHRocmVhZAogICogcGFzc2VzIHRoZSBtZXNz
YWdlcyB1c2luZyBhIG5ld2x5IGFsbG9jYXRlZCAnc3RydWN0IGt2bWlfdmNwdV9jbWRfam9iJwpA
QCAtNDc3LDYgKzQ5Nyw3IEBAIHN0YXRpYyBpbnQoKmNvbnN0IG1zZ192Y3B1W10pKGNvbnN0IHN0
cnVjdCBrdm1pX3ZjcHVfY21kX2pvYiAqLAogCVtLVk1JX0VWRU5UXSAgICAgICAgICAgICAgID0g
aGFuZGxlX2V2ZW50X3JlcGx5LAogCVtLVk1JX1ZDUFVfQ09OVFJPTF9FVkVOVFNdID0gaGFuZGxl
X3ZjcHVfY29udHJvbF9ldmVudHMsCiAJW0tWTUlfVkNQVV9HRVRfSU5GT10gICAgICAgPSBoYW5k
bGVfZ2V0X3ZjcHVfaW5mbywKKwlbS1ZNSV9WQ1BVX0dFVF9SRUdJU1RFUlNdICA9IGhhbmRsZV9n
ZXRfcmVnaXN0ZXJzLAogfTsKIAogc3RhdGljIGJvb2wgaXNfdmNwdV9jb21tYW5kKHUxNiBpZCkK
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KVmlydHVhbGl6
YXRpb24gbWFpbGluZyBsaXN0ClZpcnR1YWxpemF0aW9uQGxpc3RzLmxpbnV4LWZvdW5kYXRpb24u
b3JnCmh0dHBzOi8vbGlzdHMubGludXhmb3VuZGF0aW9uLm9yZy9tYWlsbWFuL2xpc3RpbmZvL3Zp
cnR1YWxpemF0aW9u
