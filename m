Return-Path: <virtualization-bounces@lists.linux-foundation.org>
X-Original-To: lists.virtualization@lfdr.de
Delivered-To: lists.virtualization@lfdr.de
Received: from fraxinus.osuosl.org (smtp4.osuosl.org [140.211.166.137])
	by mail.lfdr.de (Postfix) with ESMTPS id 839572C3C5C
	for <lists.virtualization@lfdr.de>; Wed, 25 Nov 2020 10:42:18 +0100 (CET)
Received: from localhost (localhost [127.0.0.1])
	by fraxinus.osuosl.org (Postfix) with ESMTP id 39E0786AAC;
	Wed, 25 Nov 2020 09:42:17 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from fraxinus.osuosl.org ([127.0.0.1])
	by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id w8xzFwOjy8yH; Wed, 25 Nov 2020 09:42:16 +0000 (UTC)
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by fraxinus.osuosl.org (Postfix) with ESMTP id 44B8386A36;
	Wed, 25 Nov 2020 09:42:16 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 255AEC0052;
	Wed, 25 Nov 2020 09:42:16 +0000 (UTC)
X-Original-To: virtualization@lists.linux-foundation.org
Delivered-To: virtualization@lists.linuxfoundation.org
Received: from whitealder.osuosl.org (smtp1.osuosl.org [140.211.166.138])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 0869EC163C
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:42:06 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by whitealder.osuosl.org (Postfix) with ESMTP id E409E86D64
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:42:05 +0000 (UTC)
X-Virus-Scanned: amavisd-new at osuosl.org
Received: from whitealder.osuosl.org ([127.0.0.1])
 by localhost (.osuosl.org [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id YIo5zeMVK2uz
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:41:58 +0000 (UTC)
X-Greylist: from auto-whitelisted by SQLgrey-1.7.6
Received: from mx01.bbu.dsd.mx.bitdefender.com
 (mx01.bbu.dsd.mx.bitdefender.com [91.199.104.161])
 by whitealder.osuosl.org (Postfix) with ESMTPS id D323A86D6F
 for <virtualization@lists.linux-foundation.org>;
 Wed, 25 Nov 2020 09:41:55 +0000 (UTC)
Received: from smtp.bitdefender.com (smtp01.buh.bitdefender.com [10.17.80.75])
 by mx01.bbu.dsd.mx.bitdefender.com (Postfix) with ESMTPS id
 62E05305D3C1; Wed, 25 Nov 2020 11:35:51 +0200 (EET)
Received: from localhost.localdomain (unknown [91.199.104.27])
 by smtp.bitdefender.com (Postfix) with ESMTPSA id 3F14A3072785;
 Wed, 25 Nov 2020 11:35:51 +0200 (EET)
From: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>
To: kvm@vger.kernel.org
Subject: [PATCH v10 53/81] KVM: introspection: add KVMI_VCPU_GET_REGISTERS
Date: Wed, 25 Nov 2020 11:35:32 +0200
Message-Id: <20201125093600.2766-54-alazar@bitdefender.com>
In-Reply-To: <20201125093600.2766-1-alazar@bitdefender.com>
References: <20201125093600.2766-1-alazar@bitdefender.com>
MIME-Version: 1.0
Cc: =?UTF-8?q?Adalbert=20Laz=C4=83r?= <alazar@bitdefender.com>,
 Paolo Bonzini <pbonzini@redhat.com>,
 =?UTF-8?q?Mihai=20Don=C8=9Bu?= <mdontu@bitdefender.com>,
 virtualization@lists.linux-foundation.org
X-BeenThere: virtualization@lists.linux-foundation.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: Linux virtualization <virtualization.lists.linux-foundation.org>
List-Unsubscribe: <https://lists.linuxfoundation.org/mailman/options/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=unsubscribe>
List-Archive: <http://lists.linuxfoundation.org/pipermail/virtualization/>
List-Post: <mailto:virtualization@lists.linux-foundation.org>
List-Help: <mailto:virtualization-request@lists.linux-foundation.org?subject=help>
List-Subscribe: <https://lists.linuxfoundation.org/mailman/listinfo/virtualization>, 
 <mailto:virtualization-request@lists.linux-foundation.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: virtualization-bounces@lists.linux-foundation.org
Sender: "Virtualization" <virtualization-bounces@lists.linux-foundation.org>

RnJvbTogTWloYWkgRG9uyJt1IDxtZG9udHVAYml0ZGVmZW5kZXIuY29tPgoKVGhpcyBjb21tYW5k
IGlzIHVzZWQgdG8gZ2V0IGt2bV9yZWdzIGFuZCBrdm1fc3JlZ3Mgc3RydWN0dXJlcywKcGx1cyBh
IGxpc3Qgb2Ygc3RydWN0IGt2bV9tc3JzIGZyb20gYSBzcGVjaWZpYyB2Q1BVLgoKV2hpbGUgdGhl
IGt2bV9yZWdzIGFuZCBrdm1fc3JlZ3Mgc3RydWN0dXJlcyBhcmUgaW5jbHVkZWQgd2l0aCBldmVy
eQpldmVudCwgdGhpcyBjb21tYW5kIGFsbG93cyByZWFkaW5nIGFueSBNU1IuCgpTaWduZWQtb2Zm
LWJ5OiBNaWhhaSBEb27Im3UgPG1kb250dUBiaXRkZWZlbmRlci5jb20+CkNvLWRldmVsb3BlZC1i
eTogQWRhbGJlcnQgTGF6xINyIDxhbGF6YXJAYml0ZGVmZW5kZXIuY29tPgpTaWduZWQtb2ZmLWJ5
OiBBZGFsYmVydCBMYXrEg3IgPGFsYXphckBiaXRkZWZlbmRlci5jb20+Ci0tLQogRG9jdW1lbnRh
dGlvbi92aXJ0L2t2bS9rdm1pLnJzdCAgICAgICAgICAgICAgIHwgNDQgKysrKysrKysrKysrCiBh
cmNoL3g4Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWkuaCAgICAgICAgICAgICAgfCAxNSArKysrCiBh
cmNoL3g4Ni9rdm0va3ZtaS5jICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyNSArKysrKysr
CiBhcmNoL3g4Ni9rdm0va3ZtaS5oICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgOSArKysK
IGFyY2gveDg2L2t2bS9rdm1pX21zZy5jICAgICAgICAgICAgICAgICAgICAgICB8IDcyICsrKysr
KysrKysrKysrKysrKy0KIGluY2x1ZGUvdWFwaS9saW51eC9rdm1pLmggICAgICAgICAgICAgICAg
ICAgICB8ICAxICsKIC4uLi90ZXN0aW5nL3NlbGZ0ZXN0cy9rdm0veDg2XzY0L2t2bWlfdGVzdC5j
ICB8IDU5ICsrKysrKysrKysrKysrKwogNyBmaWxlcyBjaGFuZ2VkLCAyMjQgaW5zZXJ0aW9ucygr
KSwgMSBkZWxldGlvbigtKQogY3JlYXRlIG1vZGUgMTAwNjQ0IGFyY2gveDg2L2t2bS9rdm1pLmgK
CmRpZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0IGIvRG9jdW1lbnRh
dGlvbi92aXJ0L2t2bS9rdm1pLnJzdAppbmRleCBhNTAyY2Y5YmFlYWQuLmRiYWVkYmVlOWRlZSAx
MDA2NDQKLS0tIGEvRG9jdW1lbnRhdGlvbi92aXJ0L2t2bS9rdm1pLnJzdAorKysgYi9Eb2N1bWVu
dGF0aW9uL3ZpcnQva3ZtL2t2bWkucnN0CkBAIC01NTcsNiArNTU3LDUwIEBAIHRoZSAqS1ZNSV9W
TV9DT05UUk9MX0VWRU5UUyogY29tbWFuZC4KICogLUtWTV9FUEVSTSAtIHRoZSBhY2Nlc3MgaXMg
ZGlzYWxsb3dlZCAodXNlICpLVk1JX1ZNX0NIRUNLX0VWRU5UKiBmaXJzdCkKICogLUtWTV9FQUdB
SU4gLSB0aGUgc2VsZWN0ZWQgdkNQVSBjYW4ndCBiZSBpbnRyb3NwZWN0ZWQgeWV0CiAKKzExLiBL
Vk1JX1ZDUFVfR0VUX1JFR0lTVEVSUworLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCisKKzpB
cmNoaXRlY3R1cmVzOiB4ODYKKzpWZXJzaW9uczogPj0gMQorOlBhcmFtZXRlcnM6CisKKzo6CisK
KwlzdHJ1Y3Qga3ZtaV92Y3B1X2hkcjsKKwlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnMg
eworCQlfX3UxNiBubXNyczsKKwkJX191MTYgcGFkZGluZzE7CisJCV9fdTMyIHBhZGRpbmcyOwor
CQlfX3UzMiBtc3JzX2lkeFswXTsKKwl9OworCis6UmV0dXJuczoKKworOjoKKworCXN0cnVjdCBr
dm1pX2Vycm9yX2NvZGU7CisJc3RydWN0IGt2bWlfdmNwdV9nZXRfcmVnaXN0ZXJzX3JlcGx5IHsK
KwkJX191MzIgbW9kZTsKKwkJX191MzIgcGFkZGluZzsKKwkJc3RydWN0IGt2bV9yZWdzIHJlZ3M7
CisJCXN0cnVjdCBrdm1fc3JlZ3Mgc3JlZ3M7CisJCXN0cnVjdCBrdm1fbXNycyBtc3JzOworCX07
CisKK0ZvciB0aGUgZ2l2ZW4gdkNQVSBhbmQgdGhlIGBgbm1zcnNgYCBzaXplZCBhcnJheSBvZiBN
U1JzIHJlZ2lzdGVycywKK3JldHVybnMgdGhlIGN1cnJlbnQgdkNQVSBtb2RlIChpbiBieXRlczog
MiwgNCBvciA4KSwgdGhlIGdlbmVyYWwgcHVycG9zZQorcmVnaXN0ZXJzLCB0aGUgc3BlY2lhbCBy
ZWdpc3RlcnMgYW5kIHRoZSByZXF1ZXN0ZWQgc2V0IG9mIE1TUnMuCisKKzpFcnJvcnM6CisKKyog
LUtWTV9FSU5WQUwgLSB0aGUgc2VsZWN0ZWQgdkNQVSBpcyBpbnZhbGlkCisqIC1LVk1fRUlOVkFM
IC0gb25lIG9mIHRoZSBpbmRpY2F0ZWQgTVNScyBpcyBpbnZhbGlkCisqIC1LVk1fRUlOVkFMIC0g
dGhlIHBhZGRpbmcgaXMgbm90IHplcm8KKyogLUtWTV9FSU5WQUwgLSB0aGUgcmVwbHkgc2l6ZSBp
cyBsYXJnZXIgdGhhbgorICAgICAgICAgICAgICAgIGt2bWlfZ2V0X3ZlcnNpb25fcmVwbHkubWF4
X21zZ19zaXplICh0b28gbWFueSBNU1JzKQorKiAtS1ZNX0VBR0FJTiAtIHRoZSBzZWxlY3RlZCB2
Q1BVIGNhbid0IGJlIGludHJvc3BlY3RlZCB5ZXQKKyogLUtWTV9FTk9NRU0gLSB0aGVyZSBpcyBu
b3QgZW5vdWdoIG1lbW9yeSB0byBhbGxvY2F0ZSB0aGUgcmVwbHkKKwogRXZlbnRzCiA9PT09PT0K
IApkaWZmIC0tZ2l0IGEvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmggYi9hcmNoL3g4
Ni9pbmNsdWRlL3VhcGkvYXNtL2t2bWkuaAppbmRleCA5ZDlkZjA5ZDM4MWEuLjExODM1YmY5YmRj
NiAxMDA2NDQKLS0tIGEvYXJjaC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKKysrIGIvYXJj
aC94ODYvaW5jbHVkZS91YXBpL2FzbS9rdm1pLmgKQEAgLTMwLDQgKzMwLDE5IEBAIHN0cnVjdCBr
dm1pX3ZjcHVfZXZlbnRfYXJjaCB7CiAJfSBtc3JzOwogfTsKIAorc3RydWN0IGt2bWlfdmNwdV9n
ZXRfcmVnaXN0ZXJzIHsKKwlfX3UxNiBubXNyczsKKwlfX3UxNiBwYWRkaW5nMTsKKwlfX3UzMiBw
YWRkaW5nMjsKKwlfX3UzMiBtc3JzX2lkeFswXTsKK307CisKK3N0cnVjdCBrdm1pX3ZjcHVfZ2V0
X3JlZ2lzdGVyc19yZXBseSB7CisJX191MzIgbW9kZTsKKwlfX3UzMiBwYWRkaW5nOworCXN0cnVj
dCBrdm1fcmVncyByZWdzOworCXN0cnVjdCBrdm1fc3JlZ3Mgc3JlZ3M7CisJc3RydWN0IGt2bV9t
c3JzIG1zcnM7Cit9OworCiAjZW5kaWYgLyogX1VBUElfQVNNX1g4Nl9LVk1JX0ggKi8KZGlmZiAt
LWdpdCBhL2FyY2gveDg2L2t2bS9rdm1pLmMgYi9hcmNoL3g4Ni9rdm0va3ZtaS5jCmluZGV4IDM4
M2IxOWRjZjA1NC4uZmE5YjIwMjc3ZGFkIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0va3ZtaS5j
CisrKyBiL2FyY2gveDg2L2t2bS9rdm1pLmMKQEAgLTkzLDMgKzkzLDI4IEBAIHZvaWQga3ZtaV9h
cmNoX3NldHVwX3ZjcHVfZXZlbnQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LAogCWV2LT5hcmNoLm1v
ZGUgPSBrdm1pX3ZjcHVfbW9kZSh2Y3B1LCAmZXZlbnQtPnNyZWdzKTsKIAlrdm1pX2dldF9tc3Jz
KHZjcHUsIGV2ZW50KTsKIH0KKworaW50IGt2bWlfYXJjaF9jbWRfdmNwdV9nZXRfcmVnaXN0ZXJz
KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKKwkJCQljb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9y
ZWdpc3RlcnMgKnJlcSwKKwkJCQlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnNfcmVwbHkg
KnJwbCkKK3sKKwlzdHJ1Y3QgbXNyX2RhdGEgbSA9IHsuaG9zdF9pbml0aWF0ZWQgPSB0cnVlfTsK
KwlpbnQgaywgZXJyID0gMDsKKworCWt2bV9hcmNoX3ZjcHVfZ2V0X3JlZ3ModmNwdSwgJnJwbC0+
cmVncyk7CisJa3ZtX2FyY2hfdmNwdV9nZXRfc3JlZ3ModmNwdSwgJnJwbC0+c3JlZ3MpOworCXJw
bC0+bW9kZSA9IGt2bWlfdmNwdV9tb2RlKHZjcHUsICZycGwtPnNyZWdzKTsKKwlycGwtPm1zcnMu
bm1zcnMgPSByZXEtPm5tc3JzOworCisJZm9yIChrID0gMDsgayA8IHJlcS0+bm1zcnMgJiYgIWVy
cjsgaysrKSB7CisJCW0uaW5kZXggPSByZXEtPm1zcnNfaWR4W2tdOworCisJCWVyciA9IGt2bV94
ODZfb3BzLmdldF9tc3IodmNwdSwgJm0pOworCQlpZiAoIWVycikgeworCQkJcnBsLT5tc3JzLmVu
dHJpZXNba10uaW5kZXggPSBtLmluZGV4OworCQkJcnBsLT5tc3JzLmVudHJpZXNba10uZGF0YSA9
IG0uZGF0YTsKKwkJfQorCX0KKworCXJldHVybiBlcnIgPyAtS1ZNX0VJTlZBTCA6IDA7Cit9CmRp
ZmYgLS1naXQgYS9hcmNoL3g4Ni9rdm0va3ZtaS5oIGIvYXJjaC94ODYva3ZtL2t2bWkuaApuZXcg
ZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAwMDAuLjdhYWI0YWFhYmNkYQotLS0gL2Rl
di9udWxsCisrKyBiL2FyY2gveDg2L2t2bS9rdm1pLmgKQEAgLTAsMCArMSw5IEBACisvKiBTUERY
LUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMCAqLworI2lmbmRlZiBBUkNIX1g4Nl9LVk1fS1ZN
SV9ICisjZGVmaW5lIEFSQ0hfWDg2X0tWTV9LVk1JX0gKKworaW50IGt2bWlfYXJjaF9jbWRfdmNw
dV9nZXRfcmVnaXN0ZXJzKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwKKwkJCQljb25zdCBzdHJ1Y3Qg
a3ZtaV92Y3B1X2dldF9yZWdpc3RlcnMgKnJlcSwKKwkJCQlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9y
ZWdpc3RlcnNfcmVwbHkgKnJwbCk7CisKKyNlbmRpZgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYva3Zt
L2t2bWlfbXNnLmMgYi9hcmNoL3g4Ni9rdm0va3ZtaV9tc2cuYwppbmRleCA3NzU1MmJmNTA5ODQu
LmZkODM3YzI0MTM0MCAxMDA2NDQKLS0tIGEvYXJjaC94ODYva3ZtL2t2bWlfbXNnLmMKKysrIGIv
YXJjaC94ODYva3ZtL2t2bWlfbXNnLmMKQEAgLTcsNiArNyw3IEBACiAgKi8KIAogI2luY2x1ZGUg
Ii4uLy4uLy4uL3ZpcnQva3ZtL2ludHJvc3BlY3Rpb24va3ZtaV9pbnQuaCIKKyNpbmNsdWRlICJr
dm1pLmgiCiAKIHN0YXRpYyBpbnQgaGFuZGxlX3ZjcHVfZ2V0X2luZm8oY29uc3Qgc3RydWN0IGt2
bWlfdmNwdV9tc2dfam9iICpqb2IsCiAJCQkJY29uc3Qgc3RydWN0IGt2bWlfbXNnX2hkciAqbXNn
LApAQCAtMjEsOCArMjIsNzcgQEAgc3RhdGljIGludCBoYW5kbGVfdmNwdV9nZXRfaW5mbyhjb25z
dCBzdHJ1Y3Qga3ZtaV92Y3B1X21zZ19qb2IgKmpvYiwKIAlyZXR1cm4ga3ZtaV9tc2dfdmNwdV9y
ZXBseShqb2IsIG1zZywgMCwgJnJwbCwgc2l6ZW9mKHJwbCkpOwogfQogCitzdGF0aWMgYm9vbCBp
c192YWxpZF9nZXRfcmVnc19yZXF1ZXN0KGNvbnN0IHN0cnVjdCBrdm1pX21zZ19oZHIgKm1zZywK
KwkJCQljb25zdCBzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnMgKnJlcSkKK3sKKwlzaXpl
X3QgcmVxX3NpemUsIG1zZ19zaXplOworCisJaWYgKHJlcS0+cGFkZGluZzEgfHwgcmVxLT5wYWRk
aW5nMikKKwkJcmV0dXJuIGZhbHNlOworCisJcmVxX3NpemUgPSBzdHJ1Y3Rfc2l6ZShyZXEsIG1z
cnNfaWR4LCByZXEtPm5tc3JzKTsKKworCWlmIChjaGVja19hZGRfb3ZlcmZsb3coc2l6ZW9mKHN0
cnVjdCBrdm1pX3ZjcHVfaGRyKSwKKwkJCSAgICAgICByZXFfc2l6ZSwgJm1zZ19zaXplKSkKKwkJ
cmV0dXJuIGZhbHNlOworCisJaWYgKG1zZ19zaXplID4gbXNnLT5zaXplKQorCQlyZXR1cm4gZmFs
c2U7CisKKwlyZXR1cm4gdHJ1ZTsKK30KKworc3RhdGljIGJvb2wgaXNfdmFsaWRfZ2V0X3JlZ3Nf
cmVwbHkoY29uc3Qgc3RydWN0IGt2bWlfdmNwdV9nZXRfcmVnaXN0ZXJzICpyZXEsCisJCQkJICAg
IHNpemVfdCAqcHRyX3JwbF9zaXplKQoreworCXN0cnVjdCBrdm1pX3ZjcHVfZ2V0X3JlZ2lzdGVy
c19yZXBseSAqcnBsOworCXNpemVfdCBycGxfc2l6ZSwgbXNnX3NpemU7CisKKwlycGxfc2l6ZSA9
IHN0cnVjdF9zaXplKHJwbCwgbXNycy5lbnRyaWVzLCByZXEtPm5tc3JzKTsKKworCWlmIChjaGVj
a19hZGRfb3ZlcmZsb3coc2l6ZW9mKHN0cnVjdCBrdm1pX2Vycm9yX2NvZGUpLAorCQkJICAgICAg
IHJwbF9zaXplLCAmbXNnX3NpemUpKQorCQlyZXR1cm4gZmFsc2U7CisKKwlpZiAobXNnX3NpemUg
PiBLVk1JX01BWF9NU0dfU0laRSkKKwkJcmV0dXJuIGZhbHNlOworCisJKnB0cl9ycGxfc2l6ZSA9
IHJwbF9zaXplOworCXJldHVybiB0cnVlOworfQorCitzdGF0aWMgaW50IGhhbmRsZV92Y3B1X2dl
dF9yZWdpc3RlcnMoY29uc3Qgc3RydWN0IGt2bWlfdmNwdV9tc2dfam9iICpqb2IsCisJCQkJICAg
ICBjb25zdCBzdHJ1Y3Qga3ZtaV9tc2dfaGRyICptc2csCisJCQkJICAgICBjb25zdCB2b2lkICpy
ZXEpCit7CisJc3RydWN0IGt2bWlfdmNwdV9nZXRfcmVnaXN0ZXJzX3JlcGx5ICpycGwgPSBOVUxM
OworCXNpemVfdCBycGxfc2l6ZTsKKwlpbnQgZXJyLCBlYzsKKworCWlmICghaXNfdmFsaWRfZ2V0
X3JlZ3NfcmVxdWVzdChtc2csIHJlcSkgfHwKKwkgICAgIWlzX3ZhbGlkX2dldF9yZWdzX3JlcGx5
KHJlcSwgJnJwbF9zaXplKSkgeworCQllYyA9IC1LVk1fRUlOVkFMOworCQlnb3RvIHJlcGx5Owor
CX0KKworCXJwbCA9IGt2bWlfbXNnX2FsbG9jKCk7CisJaWYgKCFycGwpIHsKKwkJZWMgPSAtS1ZN
X0VOT01FTTsKKwkJZ290byByZXBseTsKKwl9CisKKwllYyA9IGt2bWlfYXJjaF9jbWRfdmNwdV9n
ZXRfcmVnaXN0ZXJzKGpvYi0+dmNwdSwgcmVxLCBycGwpOworCityZXBseToKKwllcnIgPSBrdm1p
X21zZ192Y3B1X3JlcGx5KGpvYiwgbXNnLCBlYywgcnBsLCBycGwgPyBycGxfc2l6ZSA6IDApOwor
CisJa3ZtaV9tc2dfZnJlZShycGwpOworCXJldHVybiBlcnI7Cit9CisKIHN0YXRpYyBrdm1pX3Zj
cHVfbXNnX2pvYl9mY3QgY29uc3QgbXNnX3ZjcHVbXSA9IHsKLQlbS1ZNSV9WQ1BVX0dFVF9JTkZP
XSA9IGhhbmRsZV92Y3B1X2dldF9pbmZvLAorCVtLVk1JX1ZDUFVfR0VUX0lORk9dICAgICAgPSBo
YW5kbGVfdmNwdV9nZXRfaW5mbywKKwlbS1ZNSV9WQ1BVX0dFVF9SRUdJU1RFUlNdID0gaGFuZGxl
X3ZjcHVfZ2V0X3JlZ2lzdGVycywKIH07CiAKIGt2bWlfdmNwdV9tc2dfam9iX2ZjdCBrdm1pX2Fy
Y2hfdmNwdV9tc2dfaGFuZGxlcih1MTYgaWQpCmRpZmYgLS1naXQgYS9pbmNsdWRlL3VhcGkvbGlu
dXgva3ZtaS5oIGIvaW5jbHVkZS91YXBpL2xpbnV4L2t2bWkuaAppbmRleCBhY2QwMGU4ODNkYzku
Ljg1NDhlYWQ0NTFjMSAxMDA2NDQKLS0tIGEvaW5jbHVkZS91YXBpL2xpbnV4L2t2bWkuaAorKysg
Yi9pbmNsdWRlL3VhcGkvbGludXgva3ZtaS5oCkBAIC0zNyw2ICszNyw3IEBAIGVudW0gewogCiAJ
S1ZNSV9WQ1BVX0dFVF9JTkZPICAgICAgID0gS1ZNSV9WQ1BVX01FU1NBR0VfSUQoMSksCiAJS1ZN
SV9WQ1BVX0NPTlRST0xfRVZFTlRTID0gS1ZNSV9WQ1BVX01FU1NBR0VfSUQoMiksCisJS1ZNSV9W
Q1BVX0dFVF9SRUdJU1RFUlMgID0gS1ZNSV9WQ1BVX01FU1NBR0VfSUQoMyksCiAKIAlLVk1JX05F
WFRfVkNQVV9NRVNTQUdFCiB9OwpkaWZmIC0tZ2l0IGEvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMv
a3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYyBiL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZf
NjQva3ZtaV90ZXN0LmMKaW5kZXggNTk0OGY5Yjc5ZWQwLi5mOTFhNzBhZDEwMTMgMTAwNjQ0Ci0t
LSBhL3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL2t2bS94ODZfNjQva3ZtaV90ZXN0LmMKKysrIGIv
dG9vbHMvdGVzdGluZy9zZWxmdGVzdHMva3ZtL3g4Nl82NC9rdm1pX3Rlc3QuYwpAQCAtODA4LDYg
KzgwOCw2NCBAQCBzdGF0aWMgdm9pZCB0ZXN0X2NtZF92Y3B1X2NvbnRyb2xfZXZlbnRzKHN0cnVj
dCBrdm1fdm0gKnZtKQogCiB9CiAKK3N0YXRpYyB2b2lkIGNtZF92Y3B1X2dldF9yZWdpc3RlcnMo
c3RydWN0IGt2bV92bSAqdm0sIHN0cnVjdCBrdm1fcmVncyAqcmVncykKK3sKKwlzdHJ1Y3Qgewor
CQlzdHJ1Y3Qga3ZtaV9tc2dfaGRyIGhkcjsKKwkJc3RydWN0IGt2bWlfdmNwdV9oZHIgdmNwdV9o
ZHI7CisJCXN0cnVjdCBrdm1pX3ZjcHVfZ2V0X3JlZ2lzdGVycyBjbWQ7CisJfSByZXEgPSB7fTsK
KwlzdHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnNfcmVwbHkgcnBsOworCisJdGVzdF92Y3B1
MF9jb21tYW5kKHZtLCBLVk1JX1ZDUFVfR0VUX1JFR0lTVEVSUywgJnJlcS5oZHIsIHNpemVvZihy
ZXEpLAorCQkJICAgJnJwbCwgc2l6ZW9mKHJwbCksIDApOworCisJbWVtY3B5KHJlZ3MsICZycGwu
cmVncywgc2l6ZW9mKCpyZWdzKSk7Cit9CisKK3N0YXRpYyB2b2lkIHRlc3RfaW52YWxpZF92Y3B1
X2dldF9yZWdpc3RlcnMoc3RydWN0IGt2bV92bSAqdm0pCit7CisJc3RydWN0IHsKKwkJc3RydWN0
IGt2bWlfbXNnX2hkciBoZHI7CisJCXN0cnVjdCBrdm1pX3ZjcHVfaGRyIHZjcHVfaGRyOworCQlz
dHJ1Y3Qga3ZtaV92Y3B1X2dldF9yZWdpc3RlcnMgY21kOworCQlfX3UzMiBtc3JzX2lkeFsxXTsK
Kwl9IHJlcSA9IHt9OworCXN0cnVjdCB7CisJCXN0cnVjdCBrdm1pX21zZ19oZHIgaGRyOworCQlz
dHJ1Y3Qga3ZtaV92Y3B1X2hkciB2Y3B1X2hkcjsKKwkJc3RydWN0IGt2bWlfdmNwdV9nZXRfcmVn
aXN0ZXJzIGNtZDsKKwl9ICpyZXFfYmlnOworCXN0cnVjdCBrdm1pX3ZjcHVfZ2V0X3JlZ2lzdGVy
c19yZXBseSBycGw7CisJc3RydWN0IGt2bWlfZ2V0X3ZlcnNpb25fcmVwbHkgdmVyc2lvbjsKKwor
CXJlcS5jbWQubm1zcnMgPSAxOworCXJlcS5jbWQubXNyc19pZHhbMF0gPSAweGZmZmZmZmZmOwor
CXRlc3RfdmNwdTBfY29tbWFuZCh2bSwgS1ZNSV9WQ1BVX0dFVF9SRUdJU1RFUlMsCisJCQkgICAm
cmVxLmhkciwgc2l6ZW9mKHJlcSksCisJCQkgICAmcnBsLCBzaXplb2YocnBsKSwgLUtWTV9FSU5W
QUwpOworCisJY21kX3ZtX2dldF92ZXJzaW9uKCZ2ZXJzaW9uKTsKKworCXJlcV9iaWcgPSBjYWxs
b2MoMSwgdmVyc2lvbi5tYXhfbXNnX3NpemUpOworCXJlcV9iaWctPmNtZC5ubXNycyA9ICh2ZXJz
aW9uLm1heF9tc2dfc2l6ZSAtIHNpemVvZigqcmVxX2JpZykpIC8gc2l6ZW9mKF9fdTMyKTsKKwl0
ZXN0X3ZjcHUwX2NvbW1hbmQodm0sIEtWTUlfVkNQVV9HRVRfUkVHSVNURVJTLAorCQkJICAgJnJl
cS5oZHIsIHNpemVvZihyZXEpLAorCQkJICAgJnJwbCwgc2l6ZW9mKHJwbCksIC1LVk1fRUlOVkFM
KTsKKwlmcmVlKHJlcV9iaWcpOworfQorCitzdGF0aWMgdm9pZCB0ZXN0X2NtZF92Y3B1X2dldF9y
ZWdpc3RlcnMoc3RydWN0IGt2bV92bSAqdm0pCit7CisJc3RydWN0IGt2bV9yZWdzIHJlZ3MgPSB7
fTsKKworCWNtZF92Y3B1X2dldF9yZWdpc3RlcnModm0sICZyZWdzKTsKKworCXByX2RlYnVnKCJn
ZXRfcmVnaXN0ZXJzIHJpcCAweCVsbHhcbiIsIHJlZ3MucmlwKTsKKworCXRlc3RfaW52YWxpZF92
Y3B1X2dldF9yZWdpc3RlcnModm0pOworfQorCiBzdGF0aWMgdm9pZCB0ZXN0X2ludHJvc3BlY3Rp
b24oc3RydWN0IGt2bV92bSAqdm0pCiB7CiAJc3JhbmRvbSh0aW1lKDApKTsKQEAgLTgyNSw2ICs4
ODMsNyBAQCBzdGF0aWMgdm9pZCB0ZXN0X2ludHJvc3BlY3Rpb24oc3RydWN0IGt2bV92bSAqdm0p
CiAJdGVzdF9jbWRfdmNwdV9nZXRfaW5mbyh2bSk7CiAJdGVzdF9wYXVzZSh2bSk7CiAJdGVzdF9j
bWRfdmNwdV9jb250cm9sX2V2ZW50cyh2bSk7CisJdGVzdF9jbWRfdmNwdV9nZXRfcmVnaXN0ZXJz
KHZtKTsKIAogCXVuaG9va19pbnRyb3NwZWN0aW9uKHZtKTsKIH0KX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX18KVmlydHVhbGl6YXRpb24gbWFpbGluZyBsaXN0
ClZpcnR1YWxpemF0aW9uQGxpc3RzLmxpbnV4LWZvdW5kYXRpb24ub3JnCmh0dHBzOi8vbGlzdHMu
bGludXhmb3VuZGF0aW9uLm9yZy9tYWlsbWFuL2xpc3RpbmZvL3ZpcnR1YWxpemF0aW9u
